%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Chambord Logo.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: Bill
%%CreationDate: 12/8/2010
%%BoundingBox: 0 0 385 225
%%HiResBoundingBox: 0 0 384.5948 224.8018
%%CropBox: 0 0 384.5948 224.8018
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.0 x406 R agm 4.4378 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 76 8%%BeginData: 9786 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD3EFFA8A7A8FD7DFFA7FFA8CFFD7BFFA7A7A8A77DFD7AFFA1CF7D
%A77CCFA1CAFD77FFA8A8FFCFA8A8FFFFA7FD78FFA7A77CA77CA7A1FD70FF
%A8FFA8CFFD06FFA8A8FFCFA7FD07FFA8FFA8CFFD63FFA8CAA7A87CA8A7A8
%A1CAFFFFA7A77CFFA1A7A7FFFFFFA7A8A1CA7DA8A7A8A8FD60FFA8CFA1CA
%CFA7CFCF7CFFA7CFA8CFFFA7A8A8CAFFA7FFA7FFA7A8FFA7A8FF7DCAA7FD
%5EFFCAA7CAA87CA07DA17CA1A8A7A1A77DA7A1CFA1A7A1A7A7A7A8A77CA1
%7DA17CA7FFA7A8FD5CFFA8A8A7A77CA7A7A8A1A77DA17CFFCFA17DA7A1A7
%7DA1A8FF7CA77CA7A1A8A7A77CA7A1A8A8FD5BFFA8A8FF7CA7A1FFFFFFA8
%A87C7C7CA77DA7A7FFA8A77DA17D7C7CA7A8FFA8FFA7A77CA8FFA7FD5BFF
%A8A7A1A7A7FD06FFA7FFCFA1A7A8FFFFFFCFA8A1A7FFA8FD06FFA7A7A1A7
%A7FD5BFFA7A8A77CA8FD06FFA8A87DA7A7FD05FFA7A77CA8A1FD06FFCF7D
%A7A8A8A8FD5AFFA7FF7DA7A8FD06FFCAA1A7A1CFFD06FFA1A7A1A8CFFD05
%FFCAA77DFFA7FD5BFFCF7CA17CA8FD06FFA1FF7CA1A7FD05FFA8A77CFFA8
%A8FD05FFCA7CA17CA8FD5BFFA8FFA8A7A7FD06FFCAA1A7A1CFFD06FFA1A7
%A1A7FD06FFA7A7A7FFA7FD5BFFCFA7A77CA7A8FD05FFA7A87DA1A8FD05FF
%A8A77CA8A1FD05FFA8A77DA7A7A8FD5CFFCAA7A77CA7FD05FFA8FFA87CA8
%FD05FFCFA1A7FFCACAFD04FFA87CA7A8A7FD5DFFA7FFA8A17CA8FD04FFA8
%A17CA77DFD05FFA1A77C7CA7FD04FFCF7CA1A1FFA7FD5EFFA7A7A1A7A1FD
%05FFA7FF7CA7A8FD04FFA87CCFA8CFFD04FFA7A7A1A7A7FD60FFA7FF7CA7
%7DFFFFFFA8A8A8A77DA8FFFFFFCA7CA7A8A8A7FFFFFFA1A77CFFA8CAFD60
%FFA8A7A77CA7A7FFFFFFA8A1A1A7A7FFFFFFA7A7A1A7A7FFFFFFA7A77CA7
%A7A8A8FD61FFA7A8CF7CA1A1FFFFCFA8FF7CA1A7FFA8A77CCAA8A8FFFFA7
%A77CA8A8A7A8FD62FFCAA8A7A77CA1A7FFA8A7A7A7A1A8A7A8A7A7A7A8A8
%FFA7A77CA7A1CFA8FD64FFA8A7A8CF7C7C7DA77CA87DA8A7A1A7A87DA87C
%A7A17C7CA8FFA7A8FD66FFA8A8A1A77DA8FD07A7A8A7A7A1A7A1CF7DA77D
%CAA8FD68FF7CCFA8A77DA77CA8A1FD05A77CA87CA77DA7A8FF7CCFFD65FF
%CFCFA7A7A8CF7DA7A7A77CA77CA77CA17CA77CA1A1A77CA8A8A8A7CAA8FD
%63FFA87CA8A7A7A7A8A7A8A7A8A7A8A7A8A7A8A7A8A7A8A7A8A7A7A7A87C
%A7FD64FFA17CA77CA07CA77CA77CA17CA77CA77CA07CA77CA77DA17CA77C
%A1CAFD64FFA7A17DA17CA77DA7A1A175A7A1A77DA7767CA1A7A7A77C7CA1
%A77DFD65FFCF7CCFA7A7A8A8A7A8A7A7A8A8A7A8A8A7A7CFA7A8A8A8A7CF
%A1CAFD65FFA77C7CA7A77C7CA17DA1A8A17D7C7CA1A7A77CA17CA1A1A87C
%A17CFD64FFA8A7A7A7A1A8FD05A7A8A1A7A7A7A1A8A7A7A7A8A7A8FD05A7
%FD63FFA87CA7A1A77DA7A1A77DA7A1A77DA7A1A77DA7A1A77DA7A1A77DA7
%7CA7FDFCFFFDBCFFA8A8A8FFFFFFA8FFFFFFA8FD07FFA8FD0BFFA8FFFFFF
%A8FD21FFA8FD0DFFA8FD0FFFA8FD1BFFA8524C4B4C77A8524C77A84C767D
%774BA1FFCB4C767D774BA1FD06FF527677A84C767DFD06FFA14C777D7752
%A8FFFFFFA84C777D764CA2FFFFFF7D4C7DA17D4C4C4CA1A8FD07FFA8774B
%4C4B767DFD05FFA8774C7DA1774B4C4CA1CAFD04FFCA4C7677A876764C77
%7DCAFD04FFA1FFFFFF77214B214B214B214B4BCA4B45214B214B21A24C45
%214B214B20A1FD04FF4B45214B214B214577FD04FF77204B214B214B4BFF
%FFA8214B214B214B21A2FF76214B214B214B214B214CA1FD05FF7D4B214B
%214C21454CFFFFFFA84C214B214B214B214B214CA8FFFFA8214B214B214B
%214B214B2176A8FFA877FFFF7D214C4B4C4B4C4B4C4577A84C4B4C4B4C4B
%4B4C4C4B4C4B4C4B4B76FFFFFFA24B4B4C4B4C4B4C2176FD04FF4B4B4B4C
%4B4C214BA8FF7D454B4C4B4C4B4B4CFF454B4B4C4B4C214C4B4C214CA8FF
%FFFFA14B214C4B4C4B4C4B4B4CFFFFA8214C4B4C4B4C4B4C4B4C2152FFFF
%7D214B4C4B4C4B4C4B4C4B4C214CA8FFFFFFA2214B214B214B214B214B4C
%FFA14C214B214B77FFA24C214B214B77FD05FF764B214B214C214C7DFD04
%FFA84C4B214C214C7DFFFFFF774C214B214B52A8A8A84B4B214C214C214B
%214B217DFFFFA84B214B214B214B214C212177FFA8A2214B214B214C274B
%214B21A2FFFF774B214C214B4B4C214B214C214CCBFFFF4C4C4B4C2177A8
%A14B4C4B76FFFF7D4B4B4C4CFFFFFF7D4B4B4C4BFD07FF4B4C4B4C4B4B76
%FD06FFA8214C4B4B76FD05FF4C4C4B4C4BFD04FFA1214C4B76FFFF524C4B
%4C76FFFF7D214C4B4C76FF7D4C4B4C4B4CCBFFFF7D454C2177FFFF4C4C4B
%4B77FFFFFF4C4C4B4B77FFFFA14B4C4B4C21A8FFA14B214C2176FFFFFF7D
%214B52FFFFA1214B2176FFFFFFA1214B214CFD06FFA24B214B214C214CA8
%FD05FFA14B214C214BA2FFFFFF7D4B274B214CA8FFFFFF7D45214B4CFFFF
%A2214B2177FFFF214C4B4B4CFFFFFF7D4B274B21A1FFFF764B4B4B52FFFF
%7D214C2177FFFFFF52214C21A1FFFFFF7D214C4B4B4CFF7D214C4B4CA8FF
%FFFFA84B21A8FFFF7D4B4B4B4CFFFFFF7D4B4B4C4BFD06FF7D214C4B4C4B
%4C45A8FD05FFA8214C4B4C4552FFFFA84C214C4B4C4BFD04FFA2214C2176
%FFFF7D4B4B4B76FFA14B4B4C45A8FD04FF4C4C4B4B52FFFF7D214C2177FF
%FF764B4B4B7DFFFFFF4C4B4B4B7DFD04FF4C214C4B4CA84B4B214B4BFD04
%FFCB4C7DFFFFFF7D214C214CA1A8A877214C214CA8FD05FF4B4B214C4B4B
%214B76FD05FF7D4B214B214C217DFF76214B214C214BA8FFFFFF774B214B
%4BA87D4C214C21A2FF7D214B214B4CA8FFFFFF7D214C214CA8FF7645214B
%4CA8774B214B21CAFFFFA852214B21A1FD04FF4C4B214B21A84C4B4C217D
%FD0AFF7D4B4B4C4B4C4B4C4B4C4B4C4BFD05FFA84C4B4C4CA8214C4B76FD
%05FFA8454C4B4C4B4C4B7D4B4C4B4C4B4C4BFD04FFA2214C4B4C4B4B4B4C
%4B77FFFF764B4B4C4B4B21CAFFFF7D4B4B4C4BFFFF7D214C4B4C214C4B4C
%4BA8FD04FF4C4C4B4B7DFD04FF7D214C4B4CA2214C4B4B76FD0AFF7D214C
%4B4B214C214B214C214CA8FD04FFA1214B217DFF4C214C21A8FD04FF7D4B
%274B214C4B4B214C4B4B214C214BA8FFFFFF7D4B4B4B214C274B214B7DFF
%FF76214B214B4C7D7DFFFF76214C214BA2FF774B214C214B214C214B7DFD
%04FF76214B21A1FD04FF774B214C21A24C4B4C217DFD0AFF7D4B4B4C4B4B
%214B4B4C4B4C4BFD05FF4C4C4B4B77FF4C4B4B4B7DFD04FFA8214C4B4C4B
%4C4B4C4B4C4B4C4B4C4BFD04FFA1214C4B4C214B4B4C274CA2FF524C4B4B
%4CFFFFFF4C4C4B4C4B4C4BCAFF7D214C4B4C4B4B4B4C4B4CA8FFFFFF4C4C
%4B4B7DFD04FF7D214C4B4CA8214B214B4CFD05FFA8FD04FFA1214B214C76
%7D7676214B214CA8FFFFFFA84B214C214B214C214B2152FD04FF7D4B214B
%4B7D214B214B217D4B4B214CA8FFFFFF7D21214B4B7D774C214B214CFF77
%214C2152FFFFFF77204B214B214CA8FF764B214B52CA774B214B21A2FFFF
%FF52214C217DFD04FF4C4B214B21A876214C4B4CA8FD04FFA14CFFFFFF7D
%4B4B4C4CFFFFFF7D4B4B4C4CFD04FFA2214C4B4C4B4C4B4C4B4C4BFD04FF
%A8214C4B4CFF77214C21A2A84C4B4C4BFD04FFA2214C4B76FFFFA84C4B4C
%4BFF7D4B4B4C4BFD04FFA84C4C4B4C4CFFFF7D214C21A1FFFF4C4C4B4B7D
%FFFFFF4C4C4B4B7DFD04FF764B4C4B4CCA7745214C217DFD04FF522176FF
%FFA1214B2152FFFFFFA1214B214CFD04FF524B214C2145214B214B214B7D
%FFFFFF7D4B214B4BFFA84C2152FFA8214B214CA8FFFFFF7D45214B4CFFFF
%FF4B4B214BA2A8214C274B7DFFFFFFCB4C214B2177FFFF764B4B4B76FFFF
%77214C217DFFFFFF52214C217DFFFFFFA8214C4B4B4BFFCB4B4C4B4C4BA8
%FFFFA24C2176FFFF7D4B4B4B4CFFFFFF7D4B4B4C4BFFFFFFA84C4B4C4BA1
%7DA17D774B4C2177FFFFFFA8454C214CFFFF7D4BA8FFA84C4B4C4BFD04FF
%A2214C2176FFFFCA4C4B4C21A8FF4C214C4B4CA8FFFF77214C4B4BA1FFFF
%7D214C217DFFFF774B4B4B7DFFFFFF4C4B4B4B7DFFFFFF524B4B4C217DFF
%FF76214B214B21764C4B214B4CFFFF7D214C214CA8FFFF7D214C214BA8FF
%FFA1214B2176FD04FFA84B214B21CBFFFF7D4B214B21FFFFFFA8FFFFA821
%4B214BA8FFFFFF774B214B4BA8A877214C214BA8FF7D21214C214C777621
%4B214B4CFFFFFF524B214B52FFFF7D214B217DFFFFFF4C214B2177A8A84C
%4B214B214BA8FFFFA84C214C4B4C214C4B4C21A1FFA24B4C4B4C4B7DA8A8
%4B4C4B4C4B77A8A24B4C4B4C4CA8FFFFA8A14B4C4B4C4CA87D764B4C4B4C
%76FD04FFA8524C4B4C2177A8FF7D524B4C4B4C4B4C214C4B4B4CFFFFFF4C
%4C4B4C4B4B4B4C4B4C45A8FFFF7D4C4B4C4B4C77FF7D4B4B4C4BA2A87D4B
%4C4B4C4B4C4B4C4B4C4B4B7DFD04FFA14B214C4B4B214C214BA8CB214B21
%4C4B4B21764B4B214C4B4B214B214B214C4B4B21FFFF7D204C4B4B214B21
%21214C274B21454CFFFFFF214B214C274B2176A84B214C214B214C214B21
%4B21A8FFFFFFCA214B274B214C4B4B21A1FFFF7D45214B214C21217DA121
%4B214B4B76204C4B4B214C214B214C214576FD06FFA84C214B454B214CA8
%FFFF76214B214B214BA277214B214B214B524C214B214B2176FFFFA84B21
%4B214B2176524B214B214B21A2FFFFFF77214B214B21457DFF4C4B214C4B
%4B214C4B4B21A8FD06FF4C4B214B214B4BA2FD04FF4B4B214B214B4BFFA2
%4B214B217DA84C214B4B4B214C454B214C7DFD08FFA87D5276527DA8FFFF
%FFA87752A276767DFFA87752A276767DFF7D7677A24C77A8FFFFFF7D7676
%A25277A8FF76767D7D4C7DFD04FFA87D4CA1777677FFFFFF76767DA87652
%4B5276A8FD08FF7D77527677FD06FFA85277A1774CA8FFFF7D774C7DA8FF
%A17676A87D774C76527DA8FDFCFFFDFCFFFDA9FFA7CFFFCACAFFFFA8FFFF
%A7A7A8FFA8A8FFFFCFA8A8FFFFCAFFFFA8A8FFCAA8FFA7CFFFA8A7FFA8A8
%FFFFA7FFA8FFA8FFFFFFA8FFA8FFA8A7A7FFA8FFA8FFA8A8A8FFFFCAA8A8
%A8FD39FFA77DFFA1FFFFFF7CFFA8A8A8FFA7A7A8FFFFFF7CA7FFFF7CFFFF
%A7A8FF7DA1CAA1A1FFA7A8CFA87CFFA8A1A8CF7CA8FFFFCAA8FFA8A8A7CF
%A8A8A8FFA8A8A7A7FFA7FFA7CF7CA7FD39FF7DA7A8A7CAFF7DA1A7A8A7FF
%FFA87CFFFFFFA87CA7FF7DA1A1FFA8A7A8A7A7FF7CA7A8A7A7FF7DA1FFA8
%76FFFFA1A8FFFFFFA1FFA7A7A1FFA1A8A1FFA1CA7DCAA8A7A8A7A87CA7FD
%39FFA7A1FFA7FD05A8CFA8A7FFA8CAA7FFFFFFA7CAA8A8CAA8A8A8A7FFA7
%FFFFA7A1FFA7A8CFCFA7FFA8A8A8FFA7FD04FFA7CACFA8CAA1A1A8FFA1A8
%FFA8A8FFA8A7A8FFA7CAFD3DFFCAFD15FFA8FD05FFCFFFFFFFA8FD0DFFA8
%FD05FFCFFD05FFA8FFFFFFA8FFFFFFCFFDFCFFFD59FFCFCFFFA8FFA8FFCA
%FFCFFFA8FFCFCAFD71FF7DFFA7A1FFA1A7CF7DA7A8A8FFA8A1FD71FFCFFF
%FFA8FFA8CFCFFFA7FFA8FFA8CAFD7FFFA8FD38FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:17:08        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2010-12-08T08:51:29-05:00</xap:CreateDate>
         <xap:ModifyDate>2010-12-08T08:51:31-05:00</xap:ModifyDate>
         <xap:MetadataDate>2010-12-08T08:51:31-05:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>152</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAmAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXEhQSTQDck9AMVYhqusWl7qGmvcafdXOkSiRYgYg0csrBTE4SpLDirUDKOtR&#xA;mLOYJFg8LYBQ81bytrUS2yxNbXFvY3Fw66dLKoMYRj+7j5ciwqa8ainYHJYp7ctuiyiynMhrdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQF3rdnbukaCS6lc&#xA;Mwjtl9VgqEBmNOgBOQOQBIih4PNOkTFHR3FpIeKXrIVgLAcivNqb7d9u3XIjNE+5PAUdbXunajC/&#xA;1aaO5i+xJwYMNx0NPEHJiQlyQQQw8Ezarpmk22uo9ra85YG9NC4MIEcacySshozb07dzmNzkIiWz&#xA;Z0ulTy96Mrx6Xc6tHNDp10VtbZUVTIYTyi/eVNQvXiBXbqRjj7ieRWXfTLLnVNOtZkhubqKGaSnC&#xA;N3Csamg2J8dsyTMDmWsApefNemDjVJwJv94z6TUuNwP3P83Udabb9Mh4w/HVPAUdZapaXaVQmKQO&#xA;Y3glHCRXUAlSp9iDt2ycZgoIReSQ7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYqkXma6vpYLrTLGJWma1aaWV5PSCoSVotAxJah8B75TlJogdzOI6sLhutQ1DVPX0K3GnPLA&#xA;sQSyAbmorzY8xDGo5fDyO9R8NcxQTI+nb3NtADddf6H5ls7FbZ45f0dEfVSAoskSOu/JvReSSld6&#xA;FSMZY5gV0QJAqlt5l+uaje3F7fNpzvaKqpZoHSR4ubbtSXlRX9utD0wjLZJJrbopjQW2F1rV8tlE&#xA;9nBfLZ2wjitmthLRXVDylBkSNT8A41cEjfjgiZGtrodykALZr/VLYrYzhLGzF5FcTCC3KTQFpAQe&#xA;DM4CbfCVDj9mvbEyI2OwtaDV9r8wu9VsbGcX8V8qwC4uk/ecQnEhQgDOQzEAemfHGWTcgb2ojyRM&#xA;Wh+bZoYHC3CR2Y/0CMrChhoQRxEkvM7LT4+22SGOZ+HJeIIBLi7E97aXNqlxqt/JFHFe3FYp4p+Q&#xA;UbcW4MAQy8TTbYnpkLNkEblL0nTL+a5NxDcRLDdWriOZUf1EJZA4ZWIU7huhFczoSvn0aCEbk0Ox&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVgnnc231q5F80gujGo0cKVERUg&#xA;ep6hO1Of2ufalMw89Wb+DbBMvy/S3GnXDxj94XiVj34C3iKD5fET865Zpqr8dyMnNlJ2GZDW801V&#xA;7xrPT4Zo0XRrm4e7tG2MzxtykdZSD8NY3PQHwOYE7ofzebePtZv5ZtEt9EtT1luEFxcSd2llHNif&#xA;voPbMvEKiGqR3QPnPTori0t5yo5rKlu7/wDFVywiYH5MysPcZDPGxf43TApJ5WutRkg0S5u1Q6bF&#xA;I0NrMgAmaaRWjPqCrVXlyFRudmOVYiaiTyZzA3Z7mY0sB/MNIBfIVCCZrdCefHjyW4QRli232Wk6&#xA;9sw9TV/jvbsab+TDa8rn9GNM2lUQk3H2/rW/qdfi+zxrXv0yzBW9cv0sZ+bJ8yGt2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ksd8zW16s6yWLwifU0XTmS4WqAUkk5BgRx25b&#xA;UNTTKMoPTrsziWPeU759H1uXT7mkcLObV/i5KCrH0XDELyFSYyafy1yjDLhlRZzFi3oeZzS8t1OP&#xA;T4JbYNI6aoJyb+ykUJFDAzkN6IIAAoRTiTyFSc10wBXe5Atn/lmczeX7BiKOsKxSDweIem4/4JTm&#xA;biNxDTLmgfO92sGmQDubhJKf5NuDO3/JrIZzQ/HvTAbsd8nW1l9Z0420kk+oQO66jblawQqI2UOC&#xA;BwDnioDBiWqfoowAWK59Wcy9CkkSNGkdgqICzMdgANyTmc0vNZ2vfMXmH1LQKr1+s25nPGNVt+Po&#xA;qRxbkSJC7L4P7ZgG5y2b+QZp5bWaa1fU7hlNxqHGSRI14onBeAUbvy6farvmVi3Fnq1S7k3y1i7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVG9s7e8t2guI1ljb9lwGAI6Hfw&#xA;OCUQRRSDTzfUdBuUW2s7XTJkvLG1Z70iRHjmDMNwOf2XKsdgGr0G2YEsZ2AG4DcJebJvJ3mhb+Jb&#xA;C7ci9Rf3TvsZUArvX/dij7Q7/aG2ZGHLex5sJxpCeYtLv5rm70u2gjuk1JheTSGizRpHwQqpb4TX&#xA;jRPDfI5YEkgb3umJ6r/y81UT201q5+M/6SgPX4/hmH/Iwcv9kMdNOxSMgS/ztctqOtQ6XDyehFsq&#xA;qQKySUkloTt8KhAf9Y5DOeKVMoChaeeWYL2W7e5vIYbWawj/AEe1vBWhPwS8yelOPHiO1Tl2IG7O&#xA;1bMJJT5x8yPdv+iNNUzqzBJeHSWTkFEYPTgrEczXf7PjlWfLfpDKEepUNG8vCaT6lc6dI13bXvq3&#xA;d3PIhUxuOVCiu1S6Gmwp74IY72I3tMpM/jjjjjWONQkaAKiKAAANgABmaA0rsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVSrX9FW/tZ3id4b30JIopY5GjrUEqsnE7ry8&#xA;cryQsebKMqef6lYrMkOqaTaXFra8YYvWuJCS83Lghj+IkkVFHDKv0ZhSje8Rs3A9CrzXl3eX1m13&#xA;PPc7CBletszc5DFMqNbgrRClW5SbjCZEkX+r7kVSDt7aGO3ZTFHFxaIzyERieOoYSJAssjCVfhT4&#xA;j2yIGySVUWsTXlsTaxvKkcbutq4AYhC0jNNHL8EgcDio7+OGtxsttwX2qpp9zBa3U4FwTKEjXkkn&#xA;7v1ZgZZfSlDIAA5DEmu2IkaIBWharYaNwtkhuLadb3UXtzpl/HKRbhKK43BTjSjMFK16Ab74Yw23&#xA;G55FBk9GsNOt7JHWIuzytzlllYySO1AKszb7AADM6MQGkm0TkkOxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVh3n2XULSa1uY3lkspEkhltklkgUMoMnNjEQW+BW2PhmL&#xA;qCRR6NuOmI3OssrfoqW0MkC0jEYv52t+K9KHn6fFafIZjGf8Nfa2CPVbcLbJGyyaVE0UAJiH1yUq&#xA;4Ehjb0at8XxqenzwGu77V+KhZrp94hMGixM3JVSI3Mody7cRwUtU0PU9BgjR5R+1JsdVlxLpcJir&#xA;o8T+uqvH6dzK/wBoAhTxbZt/snfASB0+1d+9FmK24GM6ZD9XQcw312T0eZjEnENy4c+J/hk6Hd9q&#xA;Pivh16e8BjNtJS2/eIkt9cijx/ZEas/2x2A3xGQnp9pXhpnvkk38mkNdXkrv9ZldoYpHaUxop4cQ&#xA;7lmNSpPXMzBfDZaZ1bIMvYOxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxVhf5h3zM1rpYdbdXD3DXUrcE2Vowgbi+/x1Ip0zF1MuQbcY6sb+tyljP9c0xb1HjNtOruBDFG&#xA;rL6KJw48GDGo7969se/ONs696kJblY3SPUdNRXSSNRzakaSyF3SGiAoG5UO5NO+Cz3hKq9y6zsbS&#xA;8060thMtxbxJKxaFwvFvTdozTn+0ONPbDfcQEUpI37kRS3emusNv6FlxkkT0X5BvWXim8hK7n+G2&#xA;D4xT81/1u8+sfWf0jpnrep63HkfS9X0/T9X0/T+3+1WtK9sPEbu4or3tPMwi9KC802JJI4xcVldy&#xA;80bcvrFWT4ZDXrjfmPx1VnXkbUDdaKISKmzdoBMp5JIAaqytRa7Gh2zL08rj7mqY3ZDl7B2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxVZLPBCoaWRY1JoC5Civ04quVlZQykMrCqsNwQe4xVvFXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq5mCgsxAUCpJ2AAxVZFPBMCYZFkA2JRg1PuxWl+KuxV2&#xA;KuxV2KuxV2KuxV2KvMvzp/NseSrCPT9M4SeYb5C0PIBlt4vs+s69yTsgO2xJ6UMoxtyMGHjNnk+V&#xA;dX1rV9YvGvdVvJr26frNO5dqeAr0HsNssdjGIHJWs/M/mKy0ufSrTUrm3025Iae0jlZY2Ir1UHvX&#xA;fx79MaUwBN0z3WdB1zS/yn0O98vw3H6O1FJbvzHqEBajOJfThik4mqxxgHanEtud6YL3aIyBmb+D&#xA;zt9a1l7OKye/uGs4WLw2xlcxIxpVlQniDt2wt/COb03X7j84l/KrT7a/tr6LSoJpZLm7Yt6rWpWM&#xA;26zb+oI1ZpPtbdPAZEVbjxGPj25vMn1rWHsYrB764axgYyQ2plcxI5pVlSvEHbJORwi7fWH5Ct5w&#xA;/wADiPzKk4ZZidNkuiTK1q6Ky15EtQMW48u3tTK5c3W6jh4tmM/85Ma95tsdO06z0wz2+i3Ac6je&#xA;QclDPULHC8i/ZFKnjX4vowwDZpYxJ35vnuHzL5ih0+XTotTuo7Cdg01ssziNitaVUGnfJ053CLun&#xA;rv8AzjV5g83v5km0wNcXfl54XNyX5PDbygco2VjUIz048R169sjMOLqoxq+r3T8wb3zFZ+TdUuPL&#xA;kDXOtrGFs4o15vyd1RnVTWpRGLge2QDh4wDIXyfGf+JPNlnqc9ydTvrfU+TJczGaVJ+W6urkkNXs&#xA;Qctp2vDEjls9C/ILUPPbedbeWy+uXeiSSGPWGYyPbAOpozsfhEgNGH7X0VyMqaNQI8PmzD/nJm98&#xA;7JJZQ2Ed1H5aigEt7dW/MRG4kkZAkzJ0Cqq8eW1WwQatKI9ebwefzJ5huIILefVLuWC1/wB5onnk&#xA;ZY96/AC1F+jJ05vCO57/AOS/MP5sH8nNUcWV5c6xH6Y0K6lRnnktp6cpEDfHIY15FCR3HXIEC3Cy&#xA;Rh4g7ng0HmnzZYajLdxare22osWWeYTSrKSahg5ryr88nTmcESOSBm1TU57v65NdzS3ZNTcPI7SV&#xA;8eZPLFNB67+S35zeYLLzBZeX9dvHv9Jv5FtoJbhi8tvK54xkSGrFGYhSGO3UUoQYyi42fACLHN9C&#xA;+b/Nel+VfL91repMfq9svwxr9uSRtkjSvdj93XpkALcKEDI0Hx955/MrzT5xv5JtRunjsSxNvpsb&#xA;EQRrX4Rx25N4s2/6stAp2ePEIjZINL1fVNJvEvNMu5rK6T7M0DtG3yqpG3tizMQeb6l/JH83n842&#xA;smk6wVXzBZoH9RQFW5hFFMgA2DqT8YG29R3ArlGnX58PDuOTyf8A5yA1bzw/nGePUlurPREYx6PH&#xA;Vlt5EjA5SKVPFnYmp7gEDJRpydMI8O3N51e+ZfMmoWkNle6pd3VpAvCC2lmkdFHgFJIyVN4gB0Vv&#xA;LnnPzR5bukudG1Ke0ZDUxK5MTezxGqMPmMSESgJcw+tvJ3n2681/lzJ5h022WTWooJ0awU/Cb6FC&#xA;VjFTssh4kVPRsqIousnj4Z0eT5P1vXfO8HmSe61e9vbfX4ZOUrSvJFNG/wBoAD4eAofhA2p02y2g&#xA;7KMY1tyS/UNf13Ublrm/1C5urhuss0ru33sTjTIRA5J55Y/NLz35bnSTT9WneBDvZXLtPbsO49Ny&#xA;QtfFaH3xIDCeGMuYfSflPzjb/mj5T/0C/uNB1a0ngbUY7VlMilG50UsN4pQpp9xqKg1kU4E4eHLf&#xA;cPmT8xvMU3mLztrGqyPyjluHS232EER9OID/AGCj6csA2dhijwxAe4f849fllon+Go/NOrWcV5fa&#xA;gz/UlnQOsMMbFOSqwI5uyk8v5aU71hIuHqcpvhDD/wA+Py3Sy86WH+GNLfjrEJY2VpESgnR+LFFQ&#xA;UUMrLt06nDEtuny3Hc8nsFx5dk0H8i77RbpVaez0G6E4FCom+rvI9PGkhND9ORvdxhK8l+b5BtQp&#xA;uYQ1CpdeQPSle+WuzL7Q/MDXNCl8heY4o9QtZHfS71Y41mjJLG3fiAAetemUjm6rHE8Q974qy52r&#xA;9BFUKAqgBQKADYADKHSvH/8AnJvXo7LyPbaSKGfVrpdj1EVt+8dh/syg+nJQ5uVpI3K+58uiKQxt&#xA;KFJjVgrPTYMwJUE+J4n7stdg91/5xY8wLFqes6BIQPrMSXlv0HxQn05B71Ein6DkJhw9XHYF9G5W&#xA;4L4j/NFVX8xvMgAAH6RuDQeJkJOXDk7bF9A9zMf+cfPzEi8ueYn0TUHCaVrToiytsIbkfDGxP8r1&#xA;4t9B6A5GQatTi4hY5hmf/OSn5iRQ2Q8l2Dh7i54Tas4P93GpDxRbftOQGPtT+bBANWlxfxF855Y5&#xA;z770tFTTLREAVFhjCqBQABBQAZQ6Y83xJ+YYA8/+ZgBQDVb4AD/mJfLhydti+ke57fpOteUYP+cc&#xA;BZatdWpnlsbxbezd0MzXRll9ApHu3IOVNabdemQ6uJKMvF2eD+T7O4vfNmjWtsvKea9t0jHuZV3P&#xA;sOpyZcyZqJeu/wDOU3mOaXWNK8uxsRb20JvZ1HRpZWaNK+6Ihp/rZGAcbSR2JYb+R2h+VNV87RL5&#xA;kuIFt4E52llckKtzcFgEjPL4WA68SfiNBQiuGXJt1EpCOz2j8+vy30fU/J91rdjaR2+raOnrCWFA&#xA;nqW6U9VH4jcKnxL4U8CchEuJp8pEqPIvnDyT5im8uebNL1qNios7hGmp+1Cx4yr/ALKNmGWEOfkj&#xA;xRIe/f8AOU6ofKOjvQFhf0Vu9DC5IB96DIQcLSfUXl//ADj7f6fY/mNBc39xFawLbXA9ad1jQMVA&#xA;A5OQKnJS5ORqQTDZQ/PjUvLuo/mJdXOhyxTwmGJbq4tyDHJcAHmwZfhb4eIJHfGPJOnBEd3sn/OM&#xA;Vhd2/kC5uJgVhvNQlltlPQqkccZcfN0I+jIT5uLqz6nkP/OQwA/NTU6ClYrUn/pHTJx5OTpvoD1j&#xA;/nF6KJvy/wBSDIrB9UmV6gGq/VoNj4jc5GfNxtX9Q9zAf+cjfIOl+X9YsNY0i3W1s9VEiXFvEvGN&#xA;J4qHkqjZfUV+g7g4Ylu0uQyFHokv/OPuuzaX+ZdhAGIt9USSzuF7GqF4zTx9RF+iuGQ2Z6mNwebk&#xA;EGh2I6jJN77W/KOSCT8tPLjQ04CyjU0/nWqv/wAODlMubqs31lljyxoUV3VWkbjGCQCzULUFepop&#xA;OBqSH8xP/Jf+Zv8Atk33/UM+Ec2eL6h73w2ASQAKk7ADLnbprN5T81QQyTz6NfRQxKXlle2mVVVR&#xA;VmZitAAOpwWx4496VYWT9BModK+UP+ckPMX6T/ME6fG1YNHgS3oDUerIPVkPz+NVP+rlsRs7LSxq&#xA;N96QaNqvkuH8r9c0i8eQeZL66huLMrEWjVbagQF+xKyTD6cerOQlxg9EB+WXmP8Aw7580bVXfhBH&#xA;cLFdMeggnrFKT/qo5b6MJGycseKJD7dyl1L4j/NL/wAmN5k/7aFx/wAnDlw5O2w/QEgudNvrW2s7&#xA;qeFkt7+NpbSU/ZkRJGiYg+zxsCMLYCFWKLV9d1TiplvtRumLMzMXkcqpZmZmPRVUkk9AMCNgEDhS&#xA;+/NO/wCOfa/8Yo/+IjKHTHm+I/zE/wDJgeZv+2tff9RL5cOTtsX0j3IA+XPMI0tdWOl3Y0pqldQ9&#xA;CX6uQCQaS8eHUEdcbZcQur3ZP+TvnLSPKnnO3v8AVLOOe3lHoG8avqWvqfCZo+3Q0bavGtO4IkLa&#xA;88DKNBN/+cjg/wDys24ZiCjWtsYiP5eH471xjyYaX6G/yW/KXS/PX6RudSv5ba209o09C14iZmkD&#xA;EMXdXVV+Hb4TX2puylS58xhyZ5+a/wCamp+WNLvfIj6ZPLPLafVIdbu5lf17aSP0zNxWNQ7lSVbp&#xA;RsjEdWnDhEjxW+c8sc59If8AOSIlX8uvLizEGUXMQkI6cvqr1p075XHm4Ol+ovANC8va1r16bHR7&#xA;OS9uwhlMMQBbgpALb06VGTJc2UhHcoW9sbywu5bO9gktrqBuE1vMpR1YdmU0IwpBt9kfk75ntPMX&#xA;kHTrq3to7NrUGzntYBxiSSEAfAOwZSrU7V79cpkN3VZ4cMnzz/zkP/5NTUv+MVt/yYTLI8nO030B&#xA;61/zi3/5L/UP+2tN/wBQ1vkZ83G1f1fBB/8AOVLxDyvoyED1WvmKGm/EQsG3+ZGME6TmXiv5SxvJ&#xA;+ZXlxUbiRexsT7KeRH0gZOXJy830Fb+afliby3581bTmTjA8zXNmexgnJeOnjxrxPuDiDsuGfFEF&#xA;6X+Qf5v6Poumt5X8xXAtLZJGl029evpKJDyeFyB8PxVdWO25qRtkZRcfUYSTYUPz/wDzV0XXV0zS&#xA;PLd41wtjcfXZr+EuirMqlYhG3wklQ7HkOnbvjEJ02EiyXpkWv3msfkDd6tqbUu7nQrxZpG+Hm4hk&#xA;iD9t5CAfpyNbuPw1lod75JtWVbmFmNFV1JPsDlrsy+3fzEkjH5e+ZXLAI2lXoVqih5W7haH3J2yk&#xA;c3U4vqHvfDuXO2ffWoanZWGmXGp3EirZ20LXEstRx9NF5Eg/IZQ6YCzT4U1S/vNc126v5FL3mp3L&#xA;zFF3rJO5biv0tQZc7gChT1If84ufmAQD9f0oexmuP+yfI8Ycf83HzeX+YtCvtA1y90a/4/W7GVoZ&#xA;ShJRiOjIWCniw3FQNskC5EZCQsPsn8rvMg8xeQtH1NnElwYFhuz39eD93ISO3Iry+nKiN3VZY8Mi&#xA;HyZ+aDq/5i+ZCpDD9I3IqDUVEhBy0cnZYvoHuez+Wfy9tfO//OP2j2acV1az+uS6bOafDL9bmJjY&#xA;9lkGx+hu2QJouLPJwZT3K35S/lXL5a8oavr+t25i1y8s7iOGCQfFbQBGrXweSlT4LQeOMijNm4pA&#xA;Dk+a8sc999aVIkml2ckbBkeCNkYbggoCCModMeb4l/MJg3n7zKykFTqt8QRuCDcvlw5O2x/SPc+k&#xA;/wAqtd8uWP5K6fLq11AtlBbXIvI5HQ1UzS8oypO5ZTQL3rlZG7gZok5NnyZlrsntf/OQPlW+j0fy&#xA;r5kkQlzYQadqLU+zMieohP8ArcpB9AyES4umnuQxz8jPzEs/J3meVdTYpo+qIsN1KAT6ToaxSkDc&#xA;qvJgadjXthkLZ6jFxDbmHon/ADkB+Zfky+8sroely2ms6jdMrrdRenOlrGCGZllHILI/HjRTWla0&#xA;2rGIaNNikDZ2eLfl35Yl8zec9K0hULwzTq934LbxnnMT/sAQPfJkuXlnwxJe7f8AOVEiDyno8ZYc&#xA;2vyyr3IWFwT9HIZCDh6T6i8+/wCcZmUfmO4JALafOFB7nnGaD6BhnybtV9Cz/nJW3ii/MpnQUaey&#xA;t5JDtuwLp2/yUGGHJOlPoemf84tup8haigI5jVZSVruAbeChp70ORnzcfV/V8Hk3/OQzKfzU1MAg&#xA;lYrUEeB+roclHk5Om+gPUf8AnGTVNMtfIeox3N3DBIupzSsksiIRH9XtxzIYj4ailcjPm4+qB4h7&#xA;nnn/ADkH+YOneaPMNpYaTMLjTNIR1Fym6SzykeoUP7SqEUA/Om2SiKb9NjMRZ6t/843eXJtS8/rq&#xA;hQ/VdGheZ3/Z9WZTDGnzIZmH+rgmdl1UqjXe9v8Azc/Ku089aVG0Lpa65ZBjZXTA8WU7mGWm/Bj0&#xA;O/E7juDGJpw8ObgPk+Wtb/Lzztol21rqOjXUbqaCRImlib/UkjDI30HLLDsY5YnkU48lfk5528z3&#xA;8UYsJtP04sDPqF3G0SKncoHAMjU6BfpI64DIMcmeMQ9X/Pvyl5otfKui2Xln61J5e0+H6pf6fbFm&#xA;+GML6MkqJu4+E8idgaHvkYlxtPMcRvm8Hfyb5ujtIrx9FvltZmKRSm3l4sy0rT4ff/OmTtzOOPe9&#xA;E1zyt+cX/KrtOku5dSns3nm+taVyleWO14xi39WL7ZQMjniR8Pw/REEW0Rnj4zyedv5M83JZpevo&#xA;t8tpIxVJjby8SR78clbfxx72Wa95f/Oi38n2A1P9KTaFdV4WBaaQxBCAizxbsimlUDbfLACGuMsf&#xA;FtVsXbyb51tGtZzouoQvOQ9m4t5gzEH4SlFryr074bDZxxPV9XeU9J88f8qp+panezL5suLS4MVz&#xA;LITLFLJzNuHc8jVRx5eGVmrdbOUeOx9L5avvKP5iajrd1He6VqV5q4LNdPJFLLISg3YuQ3LYbGu+&#xA;1O2WWHYicQOYpO/Iflz835U1C18t/pLTbcRPLdcWlto3dF2RSeI9VtlFN/owEhhklDrTHF8l+d7u&#xA;W6f9CajNNBWS8Y28xdTX4i9VrWv04bDPjiOoevf842aN56t9ZuZbhbuz8sxxOXt5w6Qy3L0VeCPS&#xA;rAAlmUdgD2yM6cbVSjXmzD/nInTvOt15btJPLr3T2aNLHrFnZ8i8sUqrxZ1T4mReDBh/lb7ZGNNW&#xA;mMb3fNh8m+bhYi/Oi331NnMYn+ry8eQ7V45Zbn8ceVvcvJfl381B+TGsIlzfW2qymNtDtZJHS4S2&#xA;g480i5EPH6i8gi7dBTrkCRbhzlDxB3PFrLyB571Oa5Ftod/NNAGe55QyKwIO4PMCrn+X7R8MnYcs&#xA;5IjqlVzo2sWs5t7qxuIJxsYpYnR69PssAcWQkHqP5Q/kjrms6vbav5gsnstBtXWX0bhSkl0ymqos&#xA;bDl6ZP2mI3Gw9oyk4+bOAKHN9K+Y/L2l+YdFutH1SL1bK7ThIvQgg1V1PZlYAg5WC4EZGJsPk3z1&#xA;+SnnTyvdyGKzl1XSqkw39pG0nw/8WxryaMjvX4fA5aJW7LHnjLyLHtH8g+dNYu1tdP0W7llY0LGJ&#xA;kjWvd5HCoo+Zw2zlkiOZfUH5P/lLbeR9Pkubx0udfvVC3M6V4RR9fRjJ3pXdm2qfllcpW6/Nm4z5&#xA;PGfzz8refn88XLzw3+p6VPIX0h1EtxEiy0JhjChghDCnHrsDkokU5WnnHh82Haf5N/MjTtetobHS&#xA;tSs9YBVrZ4o5YnXmKcvUAAUUb4jWg3rkrDaZwI3Ip6D+e35fecRdaLqvoTassWl21lqF3CrTOLm3&#xA;Deo8lAWo/LlyPfIxLTp8kdxy3S/8mPJf5kXGpXsmnSXuiacbW4SW4cywRSXDwPHAAvw82SRw9afD&#xA;T5VZEJz5IVvuw648jfmNqOvzWlzpOoXWsO5M7zJIzMRsXaZ/hK7bMWofHJWG0ZIAcxSX3vk7zbYz&#xA;mC70W+glXqr28o+kfDuPcY2yE4nqnnlH8oPPfma7SO302WztKj1b+8RoYVU9xyAaQ+yA4DIMJ5ox&#xA;6vqzyD5E0jyXoEek6fWRyfUu7twA80xABcgVoNqKvYfScrJt12TIZmyyTA1uxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KsPtfOOpSaRqd1LHCLi0iWa3XhIisrFlNVZqsAV+0ppmKM54Se5sMBYTfzRrx0iyjeIK9zK9Io3&#xA;YKCqDnJ1I/YWg9yMty5OEMYxtbcarfXl3bWukPCgmtvrjXE6s4MbEBFVVZNyeprtiZkkCPda1XNR&#xA;vde1GDXLbRkWAT3MEUgncN6auWk9XbkC20fwLt7nIyyES4UiIq0Z5l1WfS9Ka7iKBxJEhaRWdQru&#xA;FZuKFWNAegOTyz4Y2iIsoC980XVt5atNQeFE1C8C+lbs3Fe7sasdhwWo+YGQllIgD1KRHelbVdeu&#xA;IrSxvrLgbCcepcXDI0nBOIK1VCGVeoZt+PhhnkNAjkoi0Nc1R/NJ02KBZbBKerKqPyQNFzDGSvp7&#xA;ttSlcfEPHXReEVaW6Z5y1K50S/vJo4Vu7aKOaFBHIqsshI+yzVYAjqG3yuGcmJPVJgLVtZ80arp2&#xA;m2s/FDPNJIhE1tLFXiKqoj9R2XkduRNMM8sogH9CxiCVa/8AMupW/mCw02OCMi6jheSFlYyD1GkE&#xA;hEgPACMR13G+SllIkB3oERVoqw1XV59Zm06aCNEsyzXNwA3F0feD0xyNGIrzrXp75KM5GVd34CCB&#xA;Vo64vZY9Xs7NQvpXEU8jk15AxGMLTen+7DXJGXqARWyUN5h1CWYWsP1eCUy3nO5mr6ccNpL6dePI&#xA;cmO1fiAyvxDy9/2MuEKmn+Yrq4mtYXWEl7uS0mmiJaNwlu0yPE1f2tutcMcpNe/9CmKGk8y6qyW3&#xA;pRoHnnu4m4QSTnjbScVoiyRncdTXInLLb4p4QitQ1+8toNVdEjL2BtxEGVt/WC8uQ5f5RpkpZCL8&#xA;qQI8lmneYr+58z3WlmONreD1KsquroF48SzElW5EkbDBHKTMhTHa2RZewdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdiqVxeWNDjt57dbY+lcoI5g0kjEoCTxBZiVFTWi0ysYo1TLiKtHoelo0TGH1WhRo4&#xA;jM7zUV25t/eFtyR169umHwwjiKm/l3SHghh9Eolvy9Bo5JEdBIeTBXVgwUntWmDwop4ivn0LSpxS&#xA;WDl8EUQPJwQsDFo+JBBBUsfiG+E44lHEUTc2dvcxpHOnNEdJFBJ+3GwZTsexGSMQeagoaLQdIi9H&#xA;jbKVt1dIEcs6osjBmCq5YDcfR0G2RGOPcvEVKXyzoksUULW/7qIvwQO4FJW5Oho26E/s9PbAcUU8&#xA;RR8VpbxTzTxpxluCplap3KLxXYmg28MmAGNoC38r6Hb2s1rFbkQXCrHKpklYlFJKqGZiygE9jkBi&#xA;iBTLiKodA0poEgkiaWJPU4iWSSQ/vV4vu7MTUfd2w+GEcRbl0HSpSjSQlnjWJI5DJJzUQMWjo3Ll&#xA;UFjvWp74nGF4iio7WCO4muEWk04UStU7hAQu1abV7ZIAXaLUrvS7K7nt7idWM1qSYXSSSOnIqWB4&#xA;MvIHgNjglAE2Ug0oz6BpM8XpvBSkkkyOrurrJMS0jK4IZeRPQGmA44lPEVOPyzo0dh9QSFltRJ60&#xA;aCSSqPSnJH5cl+g4BijVLxFfL5e0iSG3hMLJHa8hB6cssZXn9r4kZWNe9ThOOPyXiK+40PS7m6ju&#xA;poec0fCh5uAfTNU5qDxfienIHE4wTaBIrk0fTkuxdpFxuQ7yeoGYHlIAHrvuDxG3TDwC7WyjMkh2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVjc+iaz+iraKG4cXSXf1mdvUIYxg&#xA;N+7Vq99uu2UHHLhHfbPiFomSz15tTvJ+a/U7iFoIoQxDIUUmOTwqzM1fmPDJcMrPcixSiul6+sVz&#xA;HJcmcH6uIW9RoneONmMiM6/Zcg05L9r78jwS3+CbCIisb5dXtJwrJZx24jaMyl+Djn9rlu3UCuSE&#xA;TxDuReyc5axdirsVdirsVdirsVdirsVdirsVdirsVdir/9k=</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:4076D341D202E011BB7DA88965622A75</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:4176D341D202E011BB7DA88965622A75</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:43406ec0-0ea9-469a-960b-459a069b2fde</stRef:instanceID>
            <stRef:documentID>xmp.did:597D98C627F211689A828ADA76D6EF98</stRef:documentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:idPriv="http://ns.adobe.com/xmp/InDesign/private">
         <idPriv:DocChangeCount>5089</idPriv:DocChangeCount>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Trapped>False</pdf:Trapped>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:fpoinfo="http://ns.xinet.com/fpoinfo/1.0/">
         <fpoinfo:fpoinfo rdf:parseType="Resource">
            <fpoinfo:createdate>2008-06-19T08:12:34Z</fpoinfo:createdate>
            <fpoinfo:nofimages>47</fpoinfo:nofimages>
            <fpoinfo:images>
               <rdf:Bag>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11753</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11749</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMR1rFMADQ6gFfAAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAl9EM0k0ODAzLnBzZAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEGcaAIABogJzAAAAIQAAAe0AAAAhAAAB7QAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARjNQaG90b1Nob3AgTmF0aXZlAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11783</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11779</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRytz4AAA0AE4AAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAl9EOUo0NzgwLnRpZgAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEARwAIABogJzAAAAJQAAAqgAAAAlAAACqAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AaMhUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11789</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11785</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6rEADgLaA/4AAAFAAAAAAAAAAUAAAAAAACAPAEMqAAAAAkRlQ2hhYmVydF9SYWxwaC5qcGcAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAk9UAIAApADmAAAARwAAA3kAAABIAAAADgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AQ8RKUEVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11795</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11791</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7nkAAAu4BdwAAASwAAAAAAAABLAAAAAAAAIPAEMqAAAAAk5ldyBQYXVsIFZhcmdhIFNpZ18yLnRpZgAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAAoCAIAAtABaAAAASAAAAAAAAABIAAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AOzlUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11807</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11803</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7MYADgZACMAAAAFAAAAAAAAAAUAAAAAAACAPAEMqAAAAAldvb2RfUGhvZWJlLTIwMDYuanBnAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAACxtsAIABaAH4AAAASAAAAAAAAABIAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AaXBKUEVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11813</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11809</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqsD4AAAdKBBQAAAEsAAAAAAAAASwAAAAAAAQPAEMqAAAAAjEtMTAtMS0xLTIzLCBCRiAmIEMyLnRpZgAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAbksAIABwAD7AAAASAAAABkAAABIAAAAfQAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8APgJUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11819</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11815</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMR2mMQADQ0AE4AAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAl9EOUo0Nzk4LnBzZAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEFKGAIABogJzAAAAJQAAAqgAAAAlAAACqAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AbbtQaG90b1Nob3AgTmF0aXZlAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11825</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11821</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6Y8AAA/vBtUAAASwAAAAAAAABLAAAAAAAAIPAEMqAAAAAkdhcnZpbiBCcm93biBTaWcudGlmAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAA6kAIAA9QBpAAAASAAAAEsAAABIAAAAKQACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ASDRUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11840</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11836</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMR5STkAAAcICDQAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkZpbl9UdWFjYV9KaW1fQ2hhbV9TQ18yLnRpZgAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAADUv0AIABsAH4AAAASAAAAAAAAABIAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ASGJUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11850</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11846</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqsGoAAA0nDdkAAAEwAAAAAAAAATAAAAAAACAPAEMqAAAAAjc4NTY4MC0wMDFfMTEudGlmAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/ccAIAB8gINAAAALAAAA8MAAAAtAAAAFAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AaxpUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11862</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11858</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7iEAAA1FCbAAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAmowMDMyQ1QwMV9SMl9BQW5lX2NycC50aWYAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEHNuAIACVwG1AAAANAAAA4IAAAA0AAADXQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AQepUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11866</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11864</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7iEAAA1FCbAAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAmowMDMyQ1QwMV9SMl9BQW5lX2NycC50aWYAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEHNuAIACVwG1AAAANAAAA4IAAAA0AAADXQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AQepUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11872</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11868</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy5wwADgejCiwAAABIAAAAAAAAAEgAAAAAACAPAEMqAAAAAkFSTi1KRC1FdXJvcGUtMDEtMTE2LmpwZwAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/XcAIABuwJOAAAAEAAAATsAAAAQAAABOAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ASClKUEVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11878</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11874</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6XgAAAqMBZQAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkVOSk9ZXzIudGlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAADZnsAIACiAFXAAAASAAAAAAAAABIAAAAOQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AstlUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11888</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11884</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqqewADgKXA4QAAABIAAAAAAAAAEgAAAAAACAPAEMqAAAAAkphY2sxcGdfTWF0dXJpdHkuanBnAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/okAIABtwJUAAAALwAAAqEAAAAvAAACqAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ASFFKUEVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11913</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11909</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqsCcAABBCD7kAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkFCNzIwODNfMTEudGlmAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/leAIACCAH3AAAAJQAAAeAAAAAlAAAB6gAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ad7xUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11919</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11915</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7egAAAnzBb4AAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAmlzdDJfNDU0NjQxOF9oci50aWYAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAADSwAAIACYwFhAAAARwAAA8cAAABIAAAAKAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AR2tUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11925</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11921</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMR2li4AAAuHHCwAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkJBXzQ3MCBTb0NvX0xpbWVfTGVtLnRpZgAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/bAAIABRwMfAAAAIQAAAPIAAAAhAAAA7AAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AReRUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11931</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11927</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMR2kfgAABJzC4gAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAlNPQ09fQU5OVUFMcmVwb3J0LnRpZgAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/YkAIAChwGUAAAAKQAAAGAAAAApAAAANwAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AP/NUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11949</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11945</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7jUAAAHIA4QAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAldSIDcwY2wgODYuNCBwcm9vZl9zbS50aWYAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAXHUAIAAbQDYAAAARwAAAsUAAABIAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AQhdUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11961</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11957</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6kgAAAPABjgAAAFAAAAAAAAAAUAAAAAAACAPAEMqAAAAAkdKNzUwLnRpZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAABLo0AIAA2AFmAAAASAAAAAAAAABHAAADvgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARv1USUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11983</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11979</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqsBwAAAi+B3QAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkFSTi1KRC1FdXJvcGUtMDEtMTE2LnRpZgAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAADwTcAIACGQHKAAAARwAAA9cAAABIAAAADAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8APTdUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>11989</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11985</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqsLwAAAbWCkEAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkFXODAzNV8xLnRpZgAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEAEMAIABogJzAAAARwAAApAAAABHAAACkAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AXvRUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12002</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>11998</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqsHsAAA8NIhYAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAmowMDMyQ1QwMV9SMl9BQW5lLnRpZgAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEHQCAIABVAMCAAAAGgAAAdgAAAAaAAAB2AAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AaxFUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12008</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12004</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqsMgADgxODqYAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAk5ha2VkQW0tc25vdy12ZXJ0LmpwZwAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/sMAIAB1QIuAAAALAAAApoAAAAsAAACfgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8APnpKUEVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12026</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12022</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6gQAAA2wC7gAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkdyYXBldmluZVJvd3MudGlmAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/j4AIACKQHZAAAALwAAAVkAAAAvAAABKgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AQoRUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12032</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12028</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRqsWEAAAnGDbwAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAlNvQ29MaW1lX0tWLnRpZgAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAD/MgAIABrwJeAAAAMwAAAqYAAAAzAAACwgAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARihUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12044</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12040</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy5s0AAADhAMQAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkJvbGxhX2Nyb3AudGlmAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAALUCAIAAcABiAAAAlQAAAUwAAACWAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARH5USUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12050</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12046</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMR2kMsAAATyA+kAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkJvbnRlcnJhX2Nyb3BfMi50aWYAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAABHX0AIABMADwAAAASAAAACUAAABHAAADoAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8APnRUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12062</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12058</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy5+0AAADhAOsAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkNoYW1ib3JkX2Nyb3AudGlmAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAL00AIAAawBwAAAAjgAAApoAAACOAAAD0QAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AXW1USUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12068</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12064</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6U8AAADmAOIAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkNNX2Nyb3AudGlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAMJ0AIAAcABuAAAAkgAAAFUAAACSAAAAEAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AJy9USUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12074</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12070</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6RwAAADhAMQAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkVUX2Nyb3AudGlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAK10AIAAcABiAAAAlQAAAUwAAACWAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AQdJUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12080</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12076</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6mIAAADhARoAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkZpbmxhbmRpYV9jcm9wLnRpZgAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAALhiAIAAWQBwAAAAdgAAApoAAAB3AAAAlAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARyRUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12086</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12082</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6ToAAADhAPUAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkZpdmVSX2Nyb3AudGlmAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAALY0AIAAZwBwAAAAiQAAAUwAAACJAAAAjQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARhNUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12092</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12088</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6iYAAADwAQwAAAFAAAAAAAAAAUAAAAAAACAPAEMqAAAAAkhlcnJhZHVyYUFuZWpvX2Nyb3AudGlmAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAALacAIAAZABwAAAAhQAAAUwAAACFAAAC2wAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AQZFUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12103</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12099</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7kkAAADhAL8AAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkpEX2Nyb3AudGlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAKg0AIAAcABfAAAAlQAAAUwAAACVAAAA1gAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARCNUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12109</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12105</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7osAAADhAMoAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAktvcmJlbF9jcm9wLnRpZgAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAALK0AIAAcABlAAAAlQAAAUwAAACWAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARXtUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12123</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12119</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMR5SecADgPUA6wAAAFAAAAAAAAAAUAAAAAAACAPAEMqAAAAAmxCZE1FUkxPVCcwNV9jcm9wLmpwZwAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAuP0AIAA3QDUAAAASAAAAKMAAABIAAAAqQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARtBKUEVHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12129</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12125</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6/kAAAIpAhQAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAk9GX2Nyb3AudGlmAAAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAQv0AIAAhQCAAAAASAAAAJcAAABIAAAAtAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8A6CdUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12140</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12136</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7BsAAAHCAc4AAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAlNvQ29fY3JvcC50aWYAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAANfOAIAAbQBwAAAASAAAApoAAABIAAAC1gAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AfGRUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12146</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12142</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7GQAAADhAMcAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAlR1YWNhX2Nyb3AudGlmAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAK80AIAAcABjAAAAlQAAAUwAAACVAAAA9gAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AuXZUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12152</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12148</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7NoAAAI1AeMAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAldSLWNyb3AzLnRpZgAAAAAAAAAAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAPh0AIAAiAB0AAAASAAAANMAAABIAAAAMQAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Ac5ZUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12176</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12172</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMR5Sy4AAAPQBAAAAAGQAAAAAAAAAZAAAAAAACAPAEMqAAAAAlNDViAyMDA2IFJSUiBzdGVsdmluIGNhcCAudGlmAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAAgdYAIAAsAC4AAAASAAAAIIAAABHAAADawAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AgopUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12182</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12178</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy580ADQlECBIAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkJGQkpVU1A3MTg3X0tfdjEucHNkAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAE2PCAIACJAHeAAAARQAAATMAAABFAAABmAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8ARiZQaG90b1Nob3AgTmF0aXZlAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12188</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12184</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy7csADQ0QC7gAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAlBhZGxvY2sgRmluYWxfc2t5X3NlcGlhXzIucHNkAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEDKqAIACHAHkAAAAMAAAAbwAAAAwAAABkAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AcTdQaG90b1Nob3AgTmF0aXZlAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li/>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12202</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12198</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRy6QYADQlbC6wAAAEsAAAAAAAAASwAAAAAACAPAEMqAAAAAkhlcnJhZHVyYSBiYXJyZWxzX2J3XzEucHNkAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAAEDUAAIABygI7AAAAOQAAAXAAAAA5AAABSAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8Aq3hQaG90b1Nob3AgTmF0aXZlAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
                  <rdf:li rdf:parseType="Resource">
                     <fpoinfo:datalinkUID>12208</fpoinfo:datalinkUID>
                     <fpoinfo:imageUID>12204</fpoinfo:imageUID>
                     <fpoinfo:FPOinfo>AAUABMRyw6YAAAZACMAAAAFAAAAAAAAAAUAAAAAAACAPAEMqAAAAAkhhbWVsXyBNYXR0MjAwNy50aWYAAAAAAAAAAAAAAAAAQ2VudHJhbF9TdG9yYWdlAAAAAAAAAAAAAAAAAAAAAABUSUZGWElOVEZQTyAACxdwAIABaAH4AAAASAAAAAAAAABIAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AXHlUSUZGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH//HmgAAAAA</fpoinfo:FPOinfo>
                     <fpoinfo:filetype>High</fpoinfo:filetype>
                  </rdf:li>
               </rdf:Bag>
            </fpoinfo:images>
         </fpoinfo:fpoinfo>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>9.000000</stDim:w>
            <stDim:h>11.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>B. Gorman's New Brown Mix</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:red>45</xapG:red>
                           <xapG:green>22</xapG:green>
                           <xapG:blue>5</xapG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE 8962 C</xapG:swatchName>
                           <xapG:type>SPOT</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>RGB</xapG:mode>
                           <xapG:red>183</xapG:red>
                           <xapG:green>114</xapG:green>
                           <xapG:blue>0</xapG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -224.802 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 224.802 li
384.595 224.802 li
384.595 0 li
cp
clp
[1 0 0 1 0 0 ]ct
368.751 148.202 mo
368.603 135.89 363.72 132.337 359.334 131.255 cv
356.124 130.466 352.107 131.791 352.107 131.791 cv
352.095 168.03 li
353.484 168.486 357.235 169.635 360.644 168.292 cv
367.605 165.555 368.843 155.738 368.751 148.202 cv
381.465 147.72 mo
381.536 162.361 377.388 171.646 366.671 176.905 cv
358.478 180.918 347.668 176.592 346.755 176.055 cv
346.755 176.055 344.123 179.507 339.959 177.952 cv
336.056 176.5 336.106 172.013 336.128 171.422 cv
336.128 171.422 341.201 171.476 341.201 166.163 cv
341.201 133.831 li
341.201 128.515 336.128 128.564 336.128 128.564 cv
336.001 125.489 338.679 122.279 341.716 121.742 cv
346.08 120.906 348.259 123.939 348.259 123.939 cv
348.259 123.939 351.912 121.607 356.886 121.557 cv
361.054 121.506 381.329 122.371 381.465 147.72 cv
314.42 131.31 mo
311.797 130.149 307.425 131.728 307.425 131.728 cv
307.425 144.38 li
311.231 144.38 li
314.356 144.38 317.166 143.087 317.664 139.302 cv
317.866 137.139 318.065 132.927 314.42 131.31 cv
332.904 171.425 mo
333.045 174.505 330.357 177.712 327.321 178.256 cv
326.869 178.332 317.554 180.09 317.554 171.22 cv
317.554 161.056 li
317.554 156.485 316.304 154.504 313.689 153.347 cv
311.074 152.181 307.066 153.128 307.066 153.128 cv
307.066 166.163 li
307.78 171.485 312.849 171.425 312.849 171.425 cv
312.87 172.013 312.92 176.5 309.03 177.961 cv
304.865 179.511 302.222 176.061 302.222 176.061 cv
302.222 176.061 299.581 179.511 295.416 177.961 cv
291.526 176.5 291.567 172.013 291.589 171.425 cv
291.589 171.425 296.657 171.485 296.657 166.163 cv
296.657 133.837 li
296.657 128.518 291.589 128.572 291.589 128.572 cv
291.463 125.489 294.152 122.342 297.178 121.747 cv
301.587 120.868 303.721 123.942 303.721 123.942 cv
303.721 123.942 307.648 121.375 312.701 121.375 cv
316.244 121.375 328.16 122.617 328.16 136.235 cv
328.16 136.235 328.566 145.144 321.293 147.286 cv
321.293 147.286 327.793 148.972 327.84 158.378 cv
327.84 166.163 li
327.84 171.485 332.904 171.425 332.904 171.425 cv
229.494 159.451 mo
228.92 155.126 225.728 153.655 222.148 153.655 cv
217.866 153.723 li
217.866 168.085 li
217.866 168.085 222.804 169.888 225.785 168.563 cv
229.946 166.716 229.731 161.922 229.494 159.451 cv
217.87 144.464 mo
221.671 144.464 li
224.811 144.464 227.61 143.171 228.113 139.387 cv
228.32 137.215 228.515 133.009 224.865 131.39 cv
222.255 130.232 217.87 131.804 217.87 131.804 cv
217.87 144.464 li
cp
232.321 176.728 mo
224.794 181.598 214.563 177.006 212.674 175.899 cv
212.674 175.899 210.03 179.596 205.865 178.037 cv
201.976 176.583 202.017 172.095 202.038 171.515 cv
202.038 171.515 207.107 171.562 207.107 166.247 cv
207.107 133.916 li
207.107 128.603 202.038 128.657 202.038 128.657 cv
201.912 125.577 204.59 122.367 207.627 121.823 cv
212.247 120.995 214.17 124.019 214.17 124.019 cv
214.17 124.019 218.103 121.456 223.142 121.456 cv
226.694 121.456 238.605 122.702 238.605 136.319 cv
238.605 136.319 239.012 145.714 231.746 147.847 cv
231.746 147.847 238.399 150.585 239.81 157.326 cv
241.226 164.068 239.642 171.976 232.321 176.728 cv
196.647 128.657 mo
196.771 125.577 194.098 122.364 191.056 121.823 cv
186.704 120.986 184.521 124.019 184.521 124.019 cv
184.521 124.019 181.876 120.572 177.711 122.127 cv
173.817 123.584 173.868 128.075 173.888 128.657 cv
173.888 128.657 182.075 128.552 177.809 135.961 cv
169.454 148.469 li
161.094 135.961 li
156.827 128.552 165.018 128.657 165.018 128.657 cv
165.04 128.075 165.086 123.584 161.195 122.127 cv
157.03 120.572 154.386 124.019 154.386 124.019 cv
154.386 124.019 152.207 120.986 147.848 121.823 cv
144.81 122.364 142.128 125.577 142.255 128.657 cv
142.255 128.657 147.333 128.603 147.333 133.916 cv
147.333 166.247 li
147.333 171.562 142.255 171.515 142.255 171.515 cv
142.229 172.095 142.191 176.583 146.086 178.037 cv
150.247 179.596 152.896 176.14 152.896 176.14 cv
152.896 176.14 155.527 179.596 159.692 178.037 cv
163.591 176.583 163.54 172.095 163.522 171.515 cv
163.522 171.515 158.446 171.562 158.086 166.247 cv
158.086 148.653 li
169.454 164.983 li
180.816 148.653 li
180.816 166.247 li
180.462 171.562 175.384 171.515 175.384 171.515 cv
175.364 172.095 175.317 176.583 179.211 178.037 cv
183.376 179.596 186.013 176.14 186.013 176.14 cv
186.013 176.14 188.656 179.596 192.821 178.037 cv
196.716 176.583 196.673 172.095 196.647 171.515 cv
196.647 171.515 191.575 171.562 191.575 166.247 cv
191.575 133.916 li
191.575 128.603 196.647 128.657 196.647 128.657 cv
119.732 153.57 mo
115.073 138.255 li
110.414 153.57 li
119.732 153.57 li
cp
137.025 178.037 mo
132.856 179.596 130.216 176.14 130.216 176.14 cv
130.216 176.14 127.576 179.596 123.411 178.037 cv
119.517 176.583 119.563 172.095 119.584 171.515 cv
119.584 171.515 125.435 172.029 123.846 167.118 cv
122.461 162.563 li
107.685 162.563 li
106.295 167.118 li
104.711 172.029 110.562 171.515 110.562 171.515 cv
110.583 172.095 110.625 176.583 106.735 178.037 cv
102.57 179.596 99.9258 176.14 99.9258 176.14 cv
99.9258 176.14 97.2896 179.596 93.1245 178.037 cv
89.2256 176.583 89.2759 172.095 89.2979 171.515 cv
89.2979 171.515 94.582 172.187 96.5547 165.575 cv
106.029 135.153 li
107.76 129.818 102.548 129.046 102.548 129.046 cv
101.847 125.526 105.337 121.844 108.847 121.624 cv
113.565 121.329 115.073 124.597 115.073 124.597 cv
115.073 124.597 116.716 121.308 121.295 121.624 cv
124.839 121.865 128.293 125.526 127.593 129.046 cv
127.593 129.046 122.376 129.818 124.479 135.276 cv
133.946 165.698 li
135.56 172.187 140.853 171.515 140.853 171.515 cv
140.869 172.095 140.92 176.583 137.025 178.037 cv
32.5127 156.903 mo
32.4668 167.911 23.8877 167.374 23.6255 167.38 cv
17.7334 167.38 12.7949 158.99 12.7949 149.545 cv
12.7949 139.53 16.9434 131.927 23.1064 131.927 cv
23.1064 131.927 30.5825 131.56 30.6372 142.66 cv
38.8276 142.512 37.3027 131.5 37.3027 127.445 cv
37.3027 123.389 40.2773 121.577 40.2773 121.577 cv
33.5938 120.179 31.1489 125.071 31.1489 125.071 cv
31.1489 125.071 29.4468 120.852 22.3794 120.852 cv
10.5562 120.852 .933105 133.765 .933105 149.685 cv
.933105 165.609 10.5396 178.519 22.3794 178.519 cv
22.3794 178.519 33.4507 179.012 36.6699 169.386 cv
39.8965 159.759 32.7163 157.022 32.5127 156.903 cv
275.664 157.313 mo
274.464 157.099 270.046 156.024 268.106 151.897 cv
268.106 151.897 275.931 152.772 276.458 146.821 cv
275.689 138.136 271.528 131.5 266.493 131.5 cv
262.383 131.5 258.853 135.931 257.276 142.284 cv
258.497 142.512 262.891 143.593 264.812 147.7 cv
264.812 147.7 257.365 146.866 256.517 152.354 cv
257.23 161.149 261.421 167.911 266.493 167.911 cv
270.561 167.911 274.063 163.565 275.664 157.313 cv
287.939 149.706 mo
287.939 165.631 278.338 178.54 266.493 178.54 cv
254.653 178.54 245.053 165.631 245.053 149.706 cv
245.053 133.78 254.653 120.872 266.493 120.872 cv
278.338 120.872 287.939 133.78 287.939 149.706 cv
88.0264 171.515 mo
88.043 172.095 88.0894 176.583 84.1943 178.037 cv
80.0293 179.596 77.3945 176.14 77.3945 176.14 cv
77.3945 176.14 74.7505 179.596 70.584 178.037 cv
66.6904 176.583 66.7407 172.095 66.7622 171.515 cv
66.7622 171.515 71.8354 171.562 71.8354 166.247 cv
71.8354 154.048 li
58.7441 154.048 li
58.7441 166.247 li
58.7441 171.562 63.8096 171.515 63.8096 171.515 cv
63.8438 172.095 63.8813 176.583 59.9902 178.037 cv
55.8252 179.596 53.1812 176.14 53.1812 176.14 cv
53.1812 176.14 50.5459 179.596 46.3813 178.037 cv
42.4858 176.583 42.5278 172.095 42.5532 171.515 cv
42.5532 171.515 47.6221 171.562 47.6221 166.247 cv
47.6221 133.679 li
47.6221 128.356 42.5532 128.417 42.5532 128.417 cv
42.5278 127.829 42.4858 123.344 46.3813 121.886 cv
50.5459 120.331 53.1812 123.787 53.1812 123.787 cv
53.1812 123.787 55.8252 120.331 59.9902 121.886 cv
63.8813 123.344 63.8438 127.829 63.8096 128.417 cv
63.8096 128.417 58.7441 128.356 58.7441 133.679 cv
58.7441 144.577 li
71.8354 144.577 li
71.8354 133.679 li
71.8354 128.356 66.7622 128.417 66.7622 128.417 cv
66.7407 127.829 66.6904 123.344 70.584 121.886 cv
74.7505 120.331 77.3945 123.787 77.3945 123.787 cv
77.3945 123.787 80.0293 120.331 84.1943 121.886 cv
88.0894 123.344 88.043 127.829 88.0264 128.417 cv
88.0264 128.417 82.9536 128.356 82.9536 133.679 cv
82.9536 166.247 li
82.9536 171.562 88.0264 171.515 88.0264 171.515 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
.360784 .160784 .27451 rgb
f
360.302 167.421 mo
358.334 168.198 355.884 168.132 353.028 167.312 cv
353.028 165.938 353.037 133.849 353.037 132.509 cv
354.22 132.196 356.898 131.623 359.115 132.167 cv
364.859 133.587 367.707 138.833 367.816 148.22 cv
367.901 155.595 366.671 164.917 360.302 167.421 cv
359.571 130.352 mo
356.124 129.498 351.984 130.845 351.812 130.905 cv
351.169 131.12 li
351.161 168.714 li
351.812 168.926 li
355.359 170.087 358.452 170.167 360.991 169.167 cv
366.811 166.868 369.827 159.616 369.696 148.198 cv
369.57 137.983 366.161 131.981 359.571 130.352 cv
218.812 132.497 mo
220.244 132.075 222.892 131.538 224.485 132.243 cv
226.762 133.261 227.269 135.547 227.269 137.646 cv
227.269 138.22 227.227 138.777 227.18 139.293 cv
226.813 142.094 224.954 143.526 221.671 143.526 cv
218.812 143.526 li
218.812 132.497 li
cp
229.039 139.505 mo
229.207 137.755 229.71 132.519 225.245 130.532 cv
222.318 129.231 217.747 130.854 217.557 130.931 cv
216.933 131.149 li
216.933 145.401 li
221.671 145.401 li
225.861 145.401 228.553 143.251 229.039 139.505 cv
274.089 149.617 mo
271.977 151.353 268.246 150.974 268.213 150.968 cv
266.548 150.783 li
267.259 152.292 li
269.002 156.017 272.518 157.457 274.473 157.993 cv
272.851 163.468 269.792 166.975 266.49 166.975 cv
262.037 166.975 258.177 160.723 257.466 152.413 cv
258.24 147.985 264.444 148.603 264.707 148.628 cv
266.362 148.811 li
265.665 147.306 li
263.926 143.589 260.406 142.145 258.451 141.607 cv
260.061 136.02 263.151 132.433 266.49 132.433 cv
270.896 132.433 274.751 138.601 275.503 146.79 cv
275.394 147.995 274.934 148.925 274.089 149.617 cv
266.49 130.558 mo
262.075 130.558 258.104 135.073 256.368 142.065 cv
256.132 143.023 li
257.107 143.21 li
258.117 143.395 261.196 144.172 263.127 146.732 cv
260.141 146.858 256.229 148.075 255.587 152.21 cv
255.57 152.324 li
255.578 152.431 li
256.352 161.943 260.938 168.85 266.49 168.85 cv
270.925 168.85 274.781 164.521 276.572 157.55 cv
276.821 156.574 li
275.833 156.388 li
274.814 156.207 271.719 155.433 269.776 152.849 cv
271.335 152.78 273.59 152.447 275.275 151.075 cv
276.521 150.044 277.235 148.641 277.392 146.901 cv
277.4 146.815 li
277.392 146.736 li
276.56 137.362 271.98 130.558 266.49 130.558 cv
225.405 167.709 mo
225.405 167.709 li
223.518 168.55 220.405 167.89 218.8 167.401 cv
218.8 154.645 li
219.936 154.626 222.161 154.598 222.161 154.598 cv
225.972 154.598 228.126 156.265 228.565 159.573 cv
228.823 162.327 228.789 166.204 225.405 167.709 cv
222.148 152.722 mo
222.136 152.722 217.85 152.789 217.85 152.789 cv
216.928 152.802 li
216.928 168.743 li
217.544 168.964 li
217.76 169.044 222.876 170.885 226.175 169.419 cv
231.176 167.193 230.61 161.296 230.428 159.362 cv
229.867 155.126 226.847 152.722 222.148 152.722 cv
231.806 175.941 mo
223.991 181.003 213.253 175.152 213.144 175.093 cv
212.408 174.666 li
211.914 175.354 li
211.817 175.481 209.616 178.434 206.194 177.158 cv
203.66 176.212 203.12 173.657 203.006 172.339 cv
203.918 172.187 205.265 171.819 206.381 170.72 cv
207.487 169.626 208.045 168.119 208.045 166.247 cv
208.045 133.916 li
208.045 132.044 207.487 130.545 206.381 129.451 cv
205.308 128.392 204.006 128.007 203.099 127.847 cv
203.424 125.519 205.473 123.161 207.791 122.752 cv
211.699 122.051 213.313 124.433 213.376 124.53 cv
213.888 125.312 li
214.676 124.809 li
214.714 124.784 218.461 122.393 223.146 122.393 cv
226.551 122.393 237.673 123.395 237.673 136.319 cv
237.686 136.718 237.956 145.042 231.48 146.948 cv
228.938 147.694 li
231.383 148.713 li
231.446 148.743 237.601 151.356 238.894 157.517 cv
240.494 165.145 237.842 172.029 231.806 175.941 cv
233.854 147.919 mo
239.223 144.991 239.544 137.896 239.544 136.515 cv
239.544 136.282 li
239.544 121.278 225.883 120.514 223.146 120.514 cv
219.091 120.514 215.767 122.063 214.368 122.823 cv
213.414 121.835 211.234 120.23 207.462 120.902 cv
203.931 121.535 200.966 125.176 201.101 128.691 cv
201.144 129.591 li
202.046 129.587 li
202.067 129.587 203.885 129.603 205.075 130.794 cv
205.802 131.521 206.178 132.573 206.178 133.916 cv
206.178 166.247 li
206.178 167.591 205.802 168.642 205.075 169.369 cv
203.885 170.561 202.067 170.573 202.046 170.573 cv
201.144 170.573 li
201.101 171.472 li
201.08 172.06 201.017 177.23 205.536 178.916 cv
208.86 180.156 211.525 178.502 212.873 177.073 cv
216.493 178.916 225.849 182.033 232.827 177.513 cv
238.255 173.995 241.229 168.335 241.229 161.842 cv
241.229 160.313 241.06 158.741 240.723 157.128 cv
239.68 152.144 236.063 149.267 233.854 147.919 cv
266.49 177.602 mo
255.186 177.602 245.985 165.087 245.985 149.702 cv
245.985 134.326 255.186 121.805 266.49 121.805 cv
277.802 121.805 287.002 134.326 287.002 149.702 cv
287.002 165.087 277.802 177.602 266.49 177.602 cv
266.49 119.935 mo
254.154 119.935 244.114 133.29 244.114 149.702 cv
244.114 166.121 254.154 179.477 266.49 179.477 cv
278.836 179.477 288.873 166.121 288.873 149.702 cv
288.873 133.29 278.836 119.935 266.49 119.935 cv
366.259 176.063 mo
358.692 179.773 348.352 175.903 347.232 175.249 cv
346.523 174.835 li
346.017 175.481 li
345.923 175.604 343.722 178.362 340.28 177.073 cv
337.741 176.127 337.2 173.575 337.096 172.246 cv
337.998 172.102 339.354 171.73 340.47 170.628 cv
341.581 169.534 342.138 168.034 342.138 166.163 cv
342.138 133.831 li
342.138 131.965 341.581 130.46 340.47 129.366 cv
339.397 128.303 338.096 127.917 337.188 127.762 cv
337.514 125.431 339.558 123.078 341.881 122.659 cv
345.577 121.953 347.415 124.387 347.499 124.488 cv
348.014 125.188 li
348.758 124.733 li
348.787 124.704 352.272 122.544 356.901 122.49 cv
360.049 122.456 368.019 122.993 373.844 128.733 cv
378.238 133.05 380.484 139.44 380.527 147.726 cv
380.599 162.644 376.337 171.122 366.259 176.063 cv
375.158 127.395 mo
368.827 121.163 360.264 120.581 356.88 120.615 cv
352.905 120.662 349.768 122.063 348.44 122.76 cv
347.452 121.789 345.167 120.121 341.539 120.821 cv
338.02 121.443 335.047 125.083 335.189 128.606 cv
335.231 129.507 li
336.132 129.507 li
336.157 129.507 337.979 129.515 339.165 130.71 cv
339.896 131.437 340.268 132.489 340.268 133.831 cv
340.268 166.163 li
340.268 167.507 339.896 168.563 339.165 169.284 cv
337.979 170.476 336.157 170.484 336.132 170.484 cv
335.231 170.484 li
335.189 171.388 li
335.168 171.976 335.098 177.142 339.626 178.831 cv
342.962 180.077 345.632 178.519 346.976 177.188 cv
349.768 178.379 359.504 181.458 367.078 177.745 cv
377.752 172.512 382.479 163.247 382.397 147.716 cv
382.353 138.913 379.927 132.075 375.158 127.395 cv
316.727 139.188 mo
316.358 142.009 314.501 143.441 311.226 143.441 cv
308.357 143.441 li
308.357 132.413 li
309.79 131.993 312.439 131.458 314.036 132.163 cv
316.313 133.173 316.819 135.462 316.819 137.569 cv
316.819 138.132 316.777 138.681 316.727 139.188 cv
318.59 139.396 mo
318.758 137.672 319.261 132.433 314.801 130.452 cv
311.868 129.151 307.303 130.772 307.099 130.845 cv
306.482 131.069 li
306.482 145.321 li
311.226 145.321 li
315.416 145.321 318.1 143.171 318.59 139.425 cv
318.59 139.396 li
cp
327.16 177.335 mo
326.404 177.467 322.61 177.999 320.351 176.089 cv
319.118 175.055 318.492 173.416 318.492 171.216 cv
318.492 161.052 li
318.492 156.362 317.217 153.884 314.069 152.489 cv
311.2 151.21 307.02 152.181 306.842 152.216 cv
306.124 152.388 li
306.124 166.231 li
306.137 166.289 li
306.694 170.46 309.744 171.958 311.886 172.284 cv
311.767 173.622 311.226 176.131 308.696 177.078 cv
305.254 178.362 303.054 175.608 302.965 175.485 cv
302.226 174.543 li
301.481 175.485 li
301.388 175.608 299.188 178.362 295.736 177.078 cv
293.206 176.131 292.662 173.581 292.552 172.253 cv
293.465 172.102 294.819 171.73 295.936 170.632 cv
297.033 169.538 297.596 168.034 297.596 166.163 cv
297.596 133.837 li
297.596 131.965 297.033 130.46 295.936 129.371 cv
294.857 128.303 293.561 127.923 292.649 127.762 cv
292.975 125.447 294.989 123.136 297.367 122.659 cv
301.08 121.924 302.871 124.378 302.952 124.479 cv
303.468 125.21 li
304.228 124.724 li
304.265 124.704 308.016 122.308 312.701 122.308 cv
316.098 122.308 327.22 123.313 327.22 136.235 cv
327.224 136.272 327.224 136.374 327.224 136.534 cv
327.224 138.043 326.885 144.662 321.031 146.391 cv
317.847 147.319 li
321.052 148.19 li
321.293 148.257 326.863 149.866 326.901 158.386 cv
326.901 166.163 li
326.901 168.034 327.46 169.538 328.566 170.632 cv
329.64 171.696 330.945 172.073 331.85 172.237 cv
331.523 174.562 329.483 176.921 327.16 177.335 cv
332.909 170.492 mo
332.888 170.492 331.066 170.479 329.871 169.289 cv
329.149 168.563 328.778 167.51 328.778 166.163 cv
328.778 158.378 li
328.744 151.67 325.661 148.637 323.527 147.319 cv
328.786 144.425 329.099 137.735 329.099 136.417 cv
329.099 136.192 li
329.099 121.193 315.438 120.433 312.701 120.433 cv
308.616 120.433 305.292 121.991 303.907 122.752 cv
302.918 121.76 300.657 120.1 296.991 120.821 cv
293.481 121.526 290.516 125.164 290.651 128.61 cv
290.689 129.511 li
291.597 129.511 li
291.614 129.511 293.431 129.523 294.626 130.71 cv
295.353 131.437 295.724 132.489 295.724 133.837 cv
295.724 166.163 li
295.724 167.51 295.353 168.563 294.626 169.289 cv
293.431 170.479 291.614 170.492 291.597 170.492 cv
290.689 170.492 li
290.651 171.388 li
290.63 171.979 290.571 177.146 295.087 178.835 cv
298.229 180.005 300.814 178.688 302.216 177.411 cv
303.627 178.688 306.213 180.005 309.355 178.835 cv
313.879 177.142 313.812 171.979 313.786 171.388 cv
313.748 170.492 li
312.845 170.492 li
312.671 170.492 308.612 170.441 307.99 166.074 cv
307.99 153.909 li
309.183 153.715 311.615 153.444 313.31 154.2 cv
315.353 155.108 316.62 156.57 316.62 161.052 cv
316.62 171.216 li
316.62 173.995 317.474 176.123 319.138 177.521 cv
321.968 179.903 326.218 179.396 327.447 179.186 cv
331.016 178.549 333.99 174.91 333.846 171.388 cv
333.809 170.492 li
332.909 170.492 li
cp
111.681 152.634 mo
112.171 151.011 114.017 144.946 115.073 141.474 cv
116.128 144.946 117.975 151.011 118.464 152.634 cv
111.681 152.634 li
cp
114.177 137.983 mo
109.151 154.513 li
120.995 154.513 li
115.073 135.036 li
114.177 137.983 li
cp
192.501 177.158 mo
189.054 178.451 186.848 175.688 186.755 175.566 cv
186.021 174.619 li
185.277 175.566 li
185.185 175.688 182.988 178.451 179.536 177.158 cv
177.019 176.221 176.47 173.698 176.355 172.372 cv
178.498 172.034 181.468 170.522 181.749 166.308 cv
181.749 145.671 li
181.749 145.671 170.792 161.419 169.458 163.341 cv
168.119 161.419 157.153 145.671 157.153 145.671 cv
157.153 166.247 li
157.44 170.514 160.414 172.034 162.551 172.372 cv
162.437 173.698 161.893 176.216 159.37 177.158 cv
155.928 178.451 153.724 175.688 153.63 175.566 cv
152.891 174.619 li
152.152 175.566 li
152.051 175.688 149.857 178.451 146.411 177.158 cv
143.873 176.212 143.336 173.657 143.222 172.339 cv
144.134 172.187 145.49 171.819 146.602 170.72 cv
147.704 169.626 148.261 168.119 148.261 166.247 cv
148.261 133.916 li
148.261 132.044 147.704 130.545 146.602 129.451 cv
145.528 128.392 144.228 128.007 143.32 127.847 cv
143.644 125.519 145.685 123.161 148.008 122.752 cv
151.704 122.042 153.554 124.471 153.63 124.581 cv
154.361 125.565 li
155.125 124.597 li
155.223 124.479 157.424 121.722 160.862 123.005 cv
163.371 123.942 163.929 126.443 164.047 127.783 cv
162.746 127.931 160.495 128.438 159.46 130.207 cv
159.104 130.816 158.923 131.496 158.923 132.252 cv
158.923 133.464 159.383 134.862 160.283 136.425 cv
160.313 136.48 168.672 148.987 168.672 148.987 cv
169.458 150.153 li
178.586 136.48 li
179.52 134.874 179.972 133.464 179.972 132.243 cv
179.972 131.487 179.794 130.812 179.444 130.207 cv
178.404 128.438 176.158 127.931 174.861 127.783 cv
174.97 126.443 175.523 123.948 178.037 123.005 cv
181.483 121.722 183.688 124.479 183.776 124.597 cv
184.533 125.565 li
185.277 124.581 li
185.354 124.471 187.204 122.042 190.882 122.744 cv
193.219 123.161 195.263 125.519 195.584 127.847 cv
194.677 128.007 193.38 128.392 192.306 129.451 cv
191.195 130.545 190.638 132.044 190.638 133.916 cv
190.638 166.247 li
190.638 168.114 191.195 169.626 192.306 170.72 cv
193.421 171.819 194.769 172.187 195.682 172.339 cv
195.571 173.657 195.034 176.212 192.501 177.158 cv
136.696 177.158 mo
133.254 178.451 131.053 175.688 130.959 175.566 cv
130.221 174.619 li
129.477 175.566 li
129.38 175.688 127.179 178.451 123.736 177.158 cv
121.261 176.233 120.691 173.791 120.564 172.443 cv
121.671 172.386 123.344 172.095 124.332 170.852 cv
124.817 170.247 125.054 169.513 125.054 168.663 cv
125.054 168.106 124.953 167.493 124.742 166.835 cv
124.746 166.852 123.356 162.289 123.356 162.289 cv
123.158 161.627 li
106.984 161.627 li
105.404 166.852 li
105.188 167.503 105.091 168.106 105.091 168.663 cv
105.091 169.513 105.328 170.243 105.814 170.852 cv
106.802 172.095 108.475 172.386 109.59 172.443 cv
109.455 173.791 108.885 176.233 106.405 177.158 cv
102.966 178.451 100.762 175.688 100.673 175.566 cv
99.9297 174.619 li
99.186 175.566 li
99.0928 175.688 96.8916 178.451 93.4463 177.158 cv
90.9653 176.229 90.3955 173.778 90.269 172.427 cv
92.1226 172.259 95.8408 171.235 97.4502 165.847 cv
106.925 135.433 li
107.182 134.612 107.317 133.849 107.317 133.131 cv
107.317 132.188 107.089 131.339 106.628 130.596 cv
105.746 129.169 104.284 128.568 103.415 128.312 cv
103.406 128.247 103.393 128.188 103.393 128.12 cv
103.393 127.099 103.786 126.029 104.546 125.049 cv
105.657 123.613 107.326 122.659 108.905 122.557 cv
112.885 122.313 114.173 124.89 114.224 124.999 cv
115.039 126.685 li
115.909 125.024 li
115.969 124.915 117.371 122.295 121.228 122.557 cv
122.832 122.667 124.514 123.631 125.621 125.075 cv
126.364 126.048 126.752 127.104 126.752 128.116 cv
126.752 128.188 126.74 128.247 126.736 128.312 cv
125.874 128.572 124.467 129.163 123.644 130.574 cv
123.242 131.269 123.04 132.044 123.04 132.901 cv
123.04 133.729 123.226 134.634 123.597 135.614 cv
123.588 135.563 133.055 165.973 133.055 165.973 cv
134.368 171.282 138.03 172.271 139.876 172.431 cv
139.75 173.778 139.184 176.229 136.696 177.158 cv
83.8691 177.158 mo
80.4312 178.451 78.2261 175.688 78.1328 175.566 cv
77.3945 174.619 li
76.646 175.566 li
76.5571 175.688 74.3564 178.451 70.9146 177.158 cv
68.3667 176.212 67.8311 173.657 67.7212 172.339 cv
68.6328 172.187 69.9927 171.819 71.0996 170.72 cv
72.2114 169.626 72.7686 168.114 72.7686 166.247 cv
72.7686 153.114 li
57.8071 153.114 li
57.8071 166.247 li
57.8071 168.119 58.3643 169.626 59.4746 170.72 cv
60.5903 171.819 61.9429 172.187 62.8545 172.339 cv
62.7495 173.657 62.2124 176.212 59.6611 177.158 cv
56.2227 178.451 54.0132 175.688 53.9297 175.566 cv
53.1899 174.619 li
52.4468 175.566 li
52.353 175.688 50.1484 178.451 46.7065 177.158 cv
44.1675 176.212 43.627 173.657 43.5205 172.339 cv
44.4248 172.187 45.7847 171.819 46.8965 170.72 cv
47.998 169.626 48.5605 168.114 48.5605 166.247 cv
48.5605 133.675 li
48.5605 131.81 47.998 130.301 46.8965 129.214 cv
45.7847 128.107 44.4248 127.733 43.5205 127.589 cv
43.627 126.267 44.1675 123.715 46.7065 122.769 cv
50.1484 121.481 52.353 124.239 52.4468 124.353 cv
53.1812 125.303 li
53.9297 124.353 li
54.0132 124.239 56.2227 121.481 59.6611 122.769 cv
62.2124 123.715 62.7495 126.267 62.8545 127.589 cv
61.9429 127.733 60.5903 128.107 59.4746 129.214 cv
58.3643 130.301 57.8071 131.81 57.8071 133.675 cv
57.8071 145.52 li
72.7686 145.52 li
72.7686 133.675 li
72.7686 131.81 72.2114 130.301 71.1045 129.214 cv
69.9927 128.107 68.6328 127.733 67.7212 127.589 cv
67.8311 126.267 68.3667 123.715 70.9146 122.769 cv
74.3564 121.481 76.5571 124.239 76.646 124.353 cv
77.3945 125.303 li
78.1328 124.353 li
78.2261 124.239 80.4312 121.481 83.8691 122.769 cv
86.4077 123.715 86.9487 126.263 87.0625 127.589 cv
86.1509 127.733 84.7944 128.107 83.6792 129.214 cv
82.5723 130.301 82.019 131.81 82.019 133.675 cv
82.019 166.247 li
82.019 168.114 82.5723 169.626 83.6841 170.72 cv
84.7944 171.819 86.1509 172.187 87.0625 172.339 cv
86.9487 173.657 86.4077 176.212 83.8691 177.158 cv
197.552 170.573 mo
196.644 170.573 li
196.622 170.573 194.803 170.561 193.611 169.369 cv
192.88 168.642 192.513 167.591 192.513 166.247 cv
192.513 133.916 li
192.513 132.573 192.88 131.521 193.611 130.794 cv
194.803 129.603 196.622 129.587 196.644 129.587 cv
197.544 129.591 li
197.583 128.691 li
197.726 125.172 194.752 121.535 191.224 120.902 cv
187.815 120.248 185.589 121.691 184.517 122.667 cv
183.106 121.4 180.524 120.082 177.386 121.248 cv
172.857 122.942 172.93 128.107 172.951 128.691 cv
172.985 129.603 li
173.897 129.591 li
174.738 129.587 177.069 129.856 177.825 131.158 cv
178.021 131.483 178.1 131.859 178.1 132.26 cv
178.1 133.312 177.547 134.532 176.999 135.491 cv
176.993 135.491 171.515 143.687 169.458 146.778 cv
168.17 144.86 161.88 135.44 161.88 135.44 cv
161.348 134.521 160.802 133.312 160.802 132.265 cv
160.802 131.863 160.883 131.483 161.073 131.158 cv
161.842 129.856 164.169 129.587 165.005 129.591 cv
165.918 129.603 li
165.953 128.687 li
165.973 128.107 166.036 122.937 161.525 121.248 cv
158.378 120.082 155.797 121.4 154.391 122.667 cv
153.313 121.691 151.091 120.248 147.669 120.902 cv
144.146 121.535 141.177 125.172 141.325 128.691 cv
141.363 129.591 li
142.264 129.587 li
142.284 129.587 144.096 129.603 145.296 130.794 cv
146.023 131.521 146.391 132.573 146.391 133.916 cv
146.391 166.247 li
146.391 167.591 146.023 168.642 145.296 169.369 cv
144.096 170.561 142.115 170.561 141.355 170.577 cv
140.599 170.593 136.244 171.025 134.858 165.474 cv
134.842 165.415 125.371 134.993 125.371 134.993 cv
124.805 133.515 124.776 132.37 125.257 131.529 cv
125.992 130.263 127.724 129.976 127.733 129.976 cv
128.382 129.869 li
128.518 129.224 li
128.869 127.458 128.366 125.577 127.107 123.935 cv
125.684 122.08 123.483 120.839 121.362 120.691 cv
118.06 120.463 116.095 121.903 115.086 123.002 cv
114.097 121.903 112.167 120.483 108.791 120.691 cv
106.692 120.821 104.492 122.055 103.06 123.905 cv
101.783 125.562 101.273 127.452 101.624 129.224 cv
101.75 129.869 li
102.409 129.976 li
102.422 129.976 104.23 130.271 105.041 131.593 cv
105.543 132.413 105.568 133.515 105.138 134.867 cv
105.134 134.874 95.6543 165.296 95.6543 165.296 cv
93.9995 171.071 89.5254 170.581 88.7061 170.606 cv
88.0806 170.618 86.1802 170.561 84.9844 169.369 cv
84.2578 168.642 83.8867 167.591 83.8867 166.247 cv
83.8867 133.675 li
83.8867 132.332 84.2578 131.28 84.9844 130.558 cv
86.1802 129.358 88.001 129.35 88.0176 129.35 cv
88.9214 129.354 li
88.9595 128.45 li
88.981 127.867 89.0444 122.697 84.5288 121.011 cv
81.3818 119.833 78.8013 121.159 77.3945 122.436 cv
75.9839 121.159 73.4019 119.833 70.2598 121.011 cv
65.7266 122.697 65.8027 127.867 65.8242 128.45 cv
65.8584 129.354 li
66.7661 129.35 li
66.7876 129.35 68.6035 129.358 69.7988 130.558 cv
70.5259 131.28 70.897 132.332 70.897 133.675 cv
70.897 143.644 li
59.6826 143.644 li
59.6826 133.675 li
59.6826 132.332 60.0498 131.28 60.7803 130.558 cv
61.9683 129.358 63.7842 129.35 63.813 129.35 cv
64.7085 129.354 li
64.7466 128.45 li
64.7729 127.867 64.8564 122.702 60.3154 121.011 cv
57.1729 119.833 54.5918 121.159 53.1865 122.436 cv
51.7793 121.159 49.1934 119.833 46.0508 121.011 cv
41.5234 122.697 41.5908 127.867 41.6162 128.45 cv
41.6538 129.354 li
42.562 129.35 li
42.5796 129.35 44.3994 129.358 45.5947 130.558 cv
46.3218 131.28 46.6929 132.332 46.6929 133.675 cv
46.6929 166.247 li
46.6929 167.591 46.3218 168.642 45.5947 169.369 cv
44.3994 170.561 42.5796 170.573 42.562 170.573 cv
41.6577 170.573 li
41.6162 171.472 li
41.5908 172.056 41.5234 177.226 46.0508 178.916 cv
49.1934 180.09 51.7793 178.768 53.1865 177.492 cv
54.5879 178.768 57.1729 180.09 60.3154 178.916 cv
64.8564 177.222 64.7729 172.056 64.7466 171.472 cv
64.7134 170.573 li
63.813 170.573 li
63.793 170.573 61.9756 170.561 60.7803 169.369 cv
60.0498 168.642 59.6826 167.591 59.6826 166.247 cv
59.6826 154.986 li
70.897 154.986 li
70.897 166.247 li
70.897 167.591 70.5259 168.642 69.7988 169.369 cv
68.6035 170.561 66.7876 170.573 66.7661 170.573 cv
65.8657 170.573 li
65.8242 171.472 li
65.8027 172.056 65.7266 177.226 70.2598 178.916 cv
73.4019 180.09 75.9785 178.768 77.3945 177.492 cv
78.8013 178.768 81.3818 180.09 84.5288 178.916 cv
87.1436 177.939 88.2202 175.798 88.6631 174.054 cv
89.1025 175.798 90.1802 177.939 92.79 178.916 cv
95.938 180.09 98.519 178.768 99.9258 177.492 cv
101.34 178.768 103.917 180.09 107.064 178.916 cv
111.588 177.226 111.516 172.06 111.495 171.472 cv
111.453 170.497 li
110.477 170.577 li
109.831 170.632 107.99 170.577 107.275 169.682 cv
107.064 169.416 106.963 169.077 106.963 168.651 cv
106.963 168.288 107.035 167.878 107.187 167.409 cv
107.187 167.396 107.997 164.765 108.377 163.502 cv
121.769 163.502 li
122.063 164.468 122.955 167.392 122.955 167.392 cv
123.107 167.874 123.188 168.288 123.188 168.651 cv
123.188 169.077 123.078 169.419 122.866 169.682 cv
122.157 170.577 120.314 170.632 119.669 170.577 cv
118.692 170.497 li
118.651 171.472 li
118.629 172.06 118.562 177.23 123.078 178.916 cv
126.225 180.09 128.805 178.768 130.216 177.492 cv
131.626 178.768 134.204 180.09 137.355 178.916 cv
140.117 177.88 141.157 175.562 141.558 173.766 cv
141.951 175.566 142.998 177.885 145.756 178.916 cv
148.899 180.09 151.476 178.768 152.891 177.492 cv
154.297 178.768 156.878 180.09 160.021 178.916 cv
164.558 177.226 164.477 172.06 164.457 171.472 cv
164.419 170.573 li
163.515 170.573 li
163.084 170.573 159.316 170.46 159.024 166.188 cv
159.024 151.645 li
161.491 155.181 169.458 166.618 169.458 166.618 cv
169.458 166.618 177.411 155.181 179.884 151.645 cv
179.884 166.247 li
179.592 170.446 175.832 170.573 175.393 170.573 cv
174.485 170.573 li
174.447 171.472 li
174.425 172.06 174.362 177.23 178.881 178.916 cv
182.024 180.09 184.61 178.768 186.016 177.492 cv
187.419 178.768 190.009 180.09 193.15 178.916 cv
197.671 177.23 197.603 172.06 197.583 171.472 cv
197.552 170.573 li
cp
36.4165 129.198 mo
36.4492 130.038 36.48 130.981 36.48 131.956 cv
36.48 134.968 36.1543 138.359 34.3677 140.247 cv
33.6372 141.013 32.6519 141.393 31.4946 141.562 cv
31.3047 137.837 30.27 134.964 28.3311 133.122 cv
25.957 130.88 23.1772 130.984 23.0557 130.988 cv
16.4824 130.988 11.8613 138.618 11.8613 149.545 cv
11.8613 159.721 17.2432 168.316 23.6294 168.316 cv
24.855 168.347 27.9131 168.148 30.3511 165.778 cv
32.1035 164.068 33.0747 161.571 33.3281 158.437 cv
34.8198 159.434 36.5684 161.321 36.5684 164.748 cv
36.5684 165.981 36.3403 167.421 35.7783 169.091 cv
32.8306 177.923 22.8442 177.602 22.4175 177.585 cv
11.0801 177.585 1.88037 165.068 1.88037 149.685 cv
1.88037 134.305 11.0801 121.789 22.3833 121.789 cv
28.6567 121.789 30.2231 125.282 30.2827 125.431 cv
31.0688 127.269 li
31.9805 125.493 li
32.0654 125.346 33.7588 122.199 38.1602 122.288 cv
37.2778 123.373 36.3657 125.049 36.3657 127.445 cv
36.4165 129.198 li
cp
40.4673 120.657 mo
35.3936 119.601 32.5049 121.903 31.1865 123.427 cv
30.0459 122.004 27.5205 119.917 22.3833 119.917 cv
10.0405 119.917 0 133.271 0 149.685 cv
0 166.103 10.0405 179.456 22.3833 179.456 cv
22.4556 179.456 34.1523 179.861 37.5615 169.682 cv
40.6572 160.438 34.8364 156.938 32.9736 156.093 cv
31.6514 155.479 li
31.5752 156.896 li
31.563 160.278 30.7056 162.813 29.04 164.439 cv
27.0596 166.37 24.4487 166.463 23.6929 166.446 cv
18.3579 166.441 13.7329 158.542 13.7329 149.545 cv
13.7329 139.88 17.6738 132.864 23.1064 132.864 cv
23.228 132.86 25.2856 132.8 27.0688 134.511 cv
28.7959 136.171 29.6821 138.913 29.7036 142.663 cv
29.7075 143.614 li
30.6587 143.599 li
32.7622 143.561 34.4688 142.858 35.7236 141.536 cv
38.6299 138.461 38.4263 132.847 38.2871 129.134 cv
38.2451 127.445 li
38.2451 123.993 40.6611 122.443 40.7661 122.371 cv
42.748 121.143 li
40.4673 120.657 li
cp
f
191.208 8.57568 mo
189.222 8.57568 187.601 6.96094 187.601 4.97168 cv
187.601 2.98584 189.222 1.37256 191.208 1.37256 cv
193.193 1.37256 194.803 2.98584 194.803 4.97168 cv
194.803 6.96094 193.193 8.57568 191.208 8.57568 cv
191.191 0 mo
188.433 0 186.198 2.23877 186.198 5.00195 cv
186.198 7.76367 188.433 10.0024 191.191 10.0024 cv
193.958 10.0024 196.196 7.76367 196.196 5.00195 cv
196.196 2.23877 193.958 0 191.191 0 cv
191.229 24.0776 mo
189.235 24.0776 187.63 22.4629 187.63 20.4736 cv
187.63 18.4893 189.235 16.875 191.229 16.875 cv
193.21 16.875 194.832 18.4893 194.832 20.4736 cv
194.832 22.4629 193.21 24.0776 191.229 24.0776 cv
191.191 15.4858 mo
188.433 15.4858 186.198 17.7285 186.198 20.4863 cv
186.198 23.2495 188.433 25.4922 191.191 25.4922 cv
193.958 25.4922 196.196 23.2495 196.196 20.4863 cv
196.196 17.7285 193.958 15.4858 191.191 15.4858 cv
197.577 16.3306 mo
195.593 16.3306 193.979 14.7207 193.979 12.7314 cv
193.979 10.7422 195.593 9.12891 197.577 9.12891 cv
199.566 9.12891 201.182 10.7422 201.182 12.7314 cv
201.182 14.7207 199.566 16.3306 197.577 16.3306 cv
197.539 7.74219 mo
194.777 7.74219 192.538 9.98096 192.538 12.7441 cv
192.538 15.5073 194.777 17.7446 197.539 17.7446 cv
200.303 17.7446 202.541 15.5073 202.541 12.7441 cv
202.541 9.98096 200.303 7.74219 197.539 7.74219 cv
184.854 16.3428 mo
182.869 16.3428 181.252 14.7295 181.252 12.7441 cv
181.252 10.7549 182.869 9.1416 184.854 9.1416 cv
186.835 9.1416 188.45 10.7549 188.45 12.7441 cv
188.45 14.7295 186.835 16.3428 184.854 16.3428 cv
184.854 7.74219 mo
182.097 7.74219 179.853 9.98096 179.853 12.7441 cv
179.853 15.5073 182.097 17.7446 184.854 17.7446 cv
187.612 17.7446 189.856 15.5073 189.856 12.7441 cv
189.856 9.98096 187.612 7.74219 184.854 7.74219 cv
199.063 81.1074 mo
197.874 81.1074 196.91 80.1436 196.91 78.957 cv
196.91 77.7656 197.874 76.8018 199.063 76.8018 cv
200.252 76.8018 201.214 77.7656 201.214 78.957 cv
201.214 80.1436 200.252 81.1074 199.063 81.1074 cv
199.063 75.5938 mo
197.201 75.5938 195.694 77.0981 195.694 78.957 cv
195.694 80.811 197.201 82.3188 199.063 82.3188 cv
200.919 82.3188 202.427 80.811 202.427 78.957 cv
202.427 77.0981 200.919 75.5938 199.063 75.5938 cv
206.693 82.4331 mo
205.536 82.4331 204.603 81.4995 204.603 80.3374 cv
204.603 79.1851 205.536 78.2466 206.693 78.2466 cv
207.851 78.2466 208.784 79.1851 208.784 80.3374 cv
208.784 81.4995 207.851 82.4331 206.693 82.4331 cv
206.693 76.9805 mo
204.835 76.9805 203.331 78.4834 203.331 80.3374 cv
203.331 82.1924 204.835 83.7046 206.693 83.7046 cv
208.553 83.7046 210.06 82.1924 210.06 80.3374 cv
210.06 78.4834 208.553 76.9805 206.693 76.9805 cv
183.362 81.1074 mo
182.173 81.1074 181.209 80.1436 181.209 78.957 cv
181.209 77.7656 182.173 76.8018 183.362 76.8018 cv
184.558 76.8018 185.513 77.7656 185.513 78.957 cv
185.513 80.1436 184.558 81.1074 183.362 81.1074 cv
183.362 75.5938 mo
181.509 75.5938 179.997 77.0981 179.997 78.957 cv
179.997 80.811 181.509 82.3188 183.362 82.3188 cv
185.218 82.3188 186.726 80.811 186.726 78.957 cv
186.726 77.0981 185.218 75.5938 183.362 75.5938 cv
175.706 82.4331 mo
174.548 82.4331 173.615 81.4995 173.615 80.3374 cv
173.615 79.1851 174.548 78.2466 175.706 78.2466 cv
176.867 78.2466 177.796 79.1851 177.796 80.3374 cv
177.796 81.4995 176.867 82.4331 175.706 82.4331 cv
175.706 76.9805 mo
173.851 76.9805 172.347 78.4834 172.347 80.3374 cv
172.347 82.1924 173.851 83.7046 175.706 83.7046 cv
177.568 83.7046 179.071 82.1924 179.071 80.3374 cv
179.071 78.4834 177.568 76.9805 175.706 76.9805 cv
168.22 84.7856 mo
167.029 84.7856 166.066 83.8223 166.066 82.6318 cv
166.066 81.4438 167.029 80.478 168.22 80.478 cv
169.403 80.478 170.371 81.4438 170.371 82.6318 cv
170.371 83.8223 169.403 84.7856 168.22 84.7856 cv
168.22 79.2646 mo
166.361 79.2646 164.854 80.7729 164.854 82.6318 cv
164.854 84.4858 166.361 85.9976 168.22 85.9976 cv
170.074 85.9976 171.586 84.4858 171.586 82.6318 cv
171.586 80.7729 170.074 79.2646 168.22 79.2646 cv
214.183 84.7856 mo
212.991 84.7856 212.032 83.8223 212.032 82.6318 cv
212.032 81.4438 212.991 80.478 214.183 80.478 cv
215.369 80.478 216.329 81.4438 216.329 82.6318 cv
216.329 83.8223 215.369 84.7856 214.183 84.7856 cv
214.183 79.2646 mo
212.328 79.2646 210.816 80.7729 210.816 82.6318 cv
210.816 84.4858 212.328 85.9976 214.183 85.9976 cv
216.036 85.9976 217.55 84.4858 217.55 82.6318 cv
217.55 80.7729 216.036 79.2646 214.183 79.2646 cv
191.119 80.731 mo
189.898 80.731 188.901 79.7422 188.901 78.5215 cv
188.901 77.3008 189.898 76.313 191.119 76.313 cv
192.336 76.313 193.323 77.3008 193.323 78.5215 cv
193.323 79.7422 192.336 80.731 191.119 80.731 cv
191.119 75.1553 mo
189.257 75.1553 187.748 76.6626 187.748 78.5215 cv
187.748 80.3765 189.257 81.8833 191.119 81.8833 cv
192.97 81.8833 194.481 80.3765 194.481 78.5215 cv
194.481 76.6626 192.97 75.1553 191.119 75.1553 cv
201.7 70.8589 mo
201.7 69.271 202.988 67.9819 204.577 67.9819 cv
206.156 67.9819 207.445 69.271 207.445 70.8589 cv
207.445 72.4429 206.156 73.731 204.577 73.731 cv
202.988 73.731 201.7 72.4429 201.7 70.8589 cv
200.429 70.8589 mo
200.429 73.1445 202.288 74.9985 204.577 74.9985 cv
206.862 74.9985 208.721 73.1445 208.721 70.8589 cv
208.721 68.5654 206.862 66.7158 204.577 66.7158 cv
202.288 66.7158 200.429 68.5654 200.429 70.8589 cv
204.408 63.0103 mo
204.408 61.3809 205.729 60.0586 207.36 60.0586 cv
208.99 60.0586 210.317 61.3809 210.317 63.0103 cv
210.317 64.6416 208.99 65.9634 207.36 65.9634 cv
205.729 65.9634 204.408 64.6416 204.408 63.0103 cv
203.095 63.0103 mo
203.095 65.3633 205.008 67.2764 207.36 67.2764 cv
209.714 67.2764 211.618 65.3633 211.618 63.0103 cv
211.618 60.6577 209.714 58.749 207.36 58.749 cv
205.008 58.749 203.095 60.6577 203.095 63.0103 cv
206.394 54.7563 mo
206.394 53.127 207.716 51.8047 209.347 51.8047 cv
210.981 51.8047 212.303 53.127 212.303 54.7563 cv
212.303 56.3823 210.981 57.7134 209.347 57.7134 cv
207.716 57.7134 206.394 56.3823 206.394 54.7563 cv
205.088 54.7563 mo
205.088 57.1094 206.988 59.0229 209.347 59.0229 cv
211.699 59.0229 213.616 57.1094 213.616 54.7563 cv
213.616 52.4038 211.699 50.499 209.347 50.499 cv
206.988 50.499 205.088 52.4038 205.088 54.7563 cv
206.077 38.334 mo
206.077 36.7407 207.37 35.4492 208.965 35.4492 cv
210.555 35.4492 211.846 36.7407 211.846 38.334 cv
211.846 39.9307 210.555 41.2183 208.965 41.2183 cv
207.37 41.2183 206.077 39.9307 206.077 38.334 cv
204.806 38.334 mo
204.806 40.6309 206.668 42.4951 208.965 42.4951 cv
211.264 42.4951 213.113 40.6309 213.113 38.334 cv
213.113 36.0405 211.264 34.1763 208.965 34.1763 cv
206.668 34.1763 204.806 36.0405 204.806 38.334 cv
207.099 46.4482 mo
207.099 44.8555 208.392 43.5635 209.983 43.5635 cv
211.567 43.5635 212.864 44.8555 212.864 46.4482 cv
212.864 48.0361 211.567 49.3291 209.983 49.3291 cv
208.392 49.3291 207.099 48.0361 207.099 46.4482 cv
205.827 46.4482 mo
205.827 48.7417 207.687 50.6045 209.983 50.6045 cv
212.272 50.6045 214.145 48.7417 214.145 46.4482 cv
214.145 44.146 212.272 42.2871 209.983 42.2871 cv
207.687 42.2871 205.827 44.146 205.827 46.4482 cv
195.584 26.0327 mo
195.584 24.4702 196.852 23.2026 198.409 23.2026 cv
199.973 23.2026 201.235 24.4702 201.235 26.0327 cv
201.235 27.5918 199.973 28.8594 198.409 28.8594 cv
196.852 28.8594 195.584 27.5918 195.584 26.0327 cv
194.338 26.0327 mo
194.338 28.2803 196.163 30.1055 198.409 30.1055 cv
200.666 30.1055 202.49 28.2803 202.49 26.0327 cv
202.49 23.7813 200.666 21.9565 198.409 21.9565 cv
196.163 21.9565 194.338 23.7813 194.338 26.0327 cv
202.131 30.9082 mo
202.131 29.2861 203.449 27.9678 205.075 27.9678 cv
206.697 27.9678 208.02 29.2861 208.02 30.9082 cv
208.02 32.5342 206.697 33.8525 205.075 33.8525 cv
203.449 33.8525 202.131 32.5342 202.131 30.9082 cv
200.83 30.9082 mo
200.83 33.252 202.728 35.1489 205.075 35.1489 cv
207.42 35.1489 209.316 33.252 209.316 30.9082 cv
209.316 28.563 207.42 26.6621 205.075 26.6621 cv
202.728 26.6621 200.83 28.563 200.83 30.9082 cv
209.385 26.481 mo
209.385 24.8428 210.714 23.5156 212.349 23.5156 cv
213.983 23.5156 215.311 24.8428 215.311 26.481 cv
215.311 28.1196 213.983 29.4507 212.349 29.4507 cv
210.714 29.4507 209.385 28.1196 209.385 26.481 cv
208.07 26.481 mo
208.07 28.8413 209.988 30.7598 212.349 30.7598 cv
214.707 30.7598 216.629 28.8413 216.629 26.481 cv
216.629 24.1196 214.707 22.2061 212.349 22.2061 cv
209.988 22.2061 208.07 24.1196 208.07 26.481 cv
217.575 24.3223 mo
217.575 22.7505 218.854 21.4756 220.425 21.4756 cv
222.002 21.4756 223.277 22.7505 223.277 24.3223 cv
223.277 25.8975 222.002 27.1699 220.425 27.1699 cv
218.854 27.1699 217.575 25.8975 217.575 24.3223 cv
216.316 24.3223 mo
216.316 26.5952 218.153 28.4287 220.425 28.4287 cv
222.694 28.4287 224.526 26.5952 224.526 24.3223 cv
224.526 22.0542 222.694 20.2168 220.425 20.2168 cv
218.153 20.2168 216.316 22.0542 216.316 24.3223 cv
225.757 24.3057 mo
225.757 22.7339 227.028 21.4541 228.6 21.4541 cv
230.175 21.4541 231.446 22.7339 231.446 24.3057 cv
231.446 25.8809 230.175 27.1563 228.6 27.1563 cv
227.028 27.1563 225.757 25.8809 225.757 24.3057 cv
224.494 24.3057 mo
224.494 26.5771 226.331 28.416 228.6 28.416 cv
230.872 28.416 232.71 26.5771 232.71 24.3057 cv
232.71 22.0376 230.872 20.2002 228.6 20.2002 cv
226.331 20.2002 224.494 22.0376 224.494 24.3057 cv
220.696 77.4741 mo
220.696 75.9028 221.972 74.6313 223.547 74.6313 cv
225.118 74.6313 226.398 75.9028 226.398 77.4741 cv
226.398 79.0493 225.118 80.3247 223.547 80.3247 cv
221.972 80.3247 220.696 79.0493 220.696 77.4741 cv
219.433 77.4741 mo
219.433 79.7461 221.275 81.5845 223.547 81.5845 cv
225.819 81.5845 227.657 79.7461 227.657 77.4741 cv
227.657 75.2061 225.819 73.3687 223.547 73.3687 cv
221.275 73.3687 219.433 75.2061 219.433 77.4741 cv
226.339 71.5098 mo
226.339 69.9346 227.619 68.6621 229.19 68.6621 cv
230.762 68.6621 232.037 69.9346 232.037 71.5098 cv
232.037 73.085 230.762 74.3604 229.19 74.3604 cv
227.619 74.3604 226.339 73.085 226.339 71.5098 cv
225.08 71.5098 mo
225.08 73.7817 226.927 75.624 229.19 75.624 cv
231.464 75.624 233.296 73.7817 233.296 71.5098 cv
233.296 69.2456 231.464 67.3828 229.19 67.3828 cv
226.927 67.3828 225.08 69.2456 225.08 71.5098 cv
231.434 65.0215 mo
231.434 63.4458 232.71 62.1694 234.276 62.1694 cv
235.856 62.1694 237.128 63.4458 237.128 65.0215 cv
237.128 66.5928 235.856 67.873 234.276 67.873 cv
232.71 67.873 231.434 66.5928 231.434 65.0215 cv
230.167 65.0215 mo
230.167 67.2944 232.008 69.1445 234.276 69.1445 cv
236.546 69.1445 238.387 67.2944 238.387 65.0215 cv
238.387 62.7568 236.546 60.9106 234.276 60.9106 cv
232.008 60.9106 230.167 62.7568 230.167 65.0215 cv
235.624 57.9287 mo
235.624 56.3574 236.903 55.0781 238.479 55.0781 cv
240.056 55.0781 241.322 56.3574 241.322 57.9287 cv
241.322 59.5054 240.056 60.7803 238.479 60.7803 cv
236.903 60.7803 235.624 59.5054 235.624 57.9287 cv
234.365 57.9287 mo
234.365 60.1978 236.207 62.0391 238.479 62.0391 cv
240.743 62.0391 242.586 60.1978 242.586 57.9287 cv
242.586 55.6606 240.743 53.8193 238.479 53.8193 cv
236.207 53.8193 234.365 55.6606 234.365 57.9287 cv
238.656 50.2661 mo
238.656 48.6997 239.928 47.4233 241.499 47.4233 cv
243.076 47.4233 244.354 48.6997 244.354 50.2661 cv
244.354 51.8428 243.076 53.1143 241.499 53.1143 cv
239.928 53.1143 238.656 51.8428 238.656 50.2661 cv
237.394 50.2661 mo
237.394 52.5391 239.235 54.3765 241.499 54.3765 cv
243.769 54.3765 245.609 52.5391 245.609 50.2661 cv
245.609 47.998 243.769 46.1606 241.499 46.1606 cv
239.235 46.1606 237.394 47.998 237.394 50.2661 cv
239.915 42.1519 mo
239.915 40.5801 241.191 39.3086 242.767 39.3086 cv
244.335 39.3086 245.613 40.5801 245.613 42.1519 cv
245.613 43.7285 244.335 45.0034 242.767 45.0034 cv
241.191 45.0034 239.915 43.7285 239.915 42.1519 cv
238.656 42.1519 mo
238.656 44.4248 240.494 46.2661 242.767 46.2661 cv
245.035 46.2661 246.872 44.4248 246.872 42.1519 cv
246.872 39.8877 245.035 38.0503 242.767 38.0503 cv
240.494 38.0503 238.656 39.8877 238.656 42.1519 cv
238.302 34.1221 mo
238.302 32.5469 239.578 31.2754 241.153 31.2754 cv
242.72 31.2754 243.996 32.5469 243.996 34.1221 cv
243.996 35.6934 242.72 36.9736 241.153 36.9736 cv
239.578 36.9736 238.302 35.6934 238.302 34.1221 cv
237.039 34.1221 mo
237.039 36.3862 238.886 38.2324 241.153 38.2324 cv
243.413 38.2324 245.255 36.3862 245.255 34.1221 cv
245.255 31.854 243.413 30.0117 241.153 30.0117 cv
238.886 30.0117 237.039 31.854 237.039 34.1221 cv
233.191 27.6929 mo
233.191 26.1177 234.475 24.8428 236.047 24.8428 cv
237.622 24.8428 238.894 26.1177 238.894 27.6929 cv
238.894 29.2646 237.622 30.5396 236.047 30.5396 cv
234.475 30.5396 233.191 29.2646 233.191 27.6929 cv
231.945 27.6929 mo
231.945 29.9609 233.778 31.8032 236.047 31.8032 cv
238.314 31.8032 240.157 29.9609 240.157 27.6929 cv
240.157 25.4199 238.314 23.5825 236.047 23.5825 cv
233.778 23.5825 231.945 25.4199 231.945 27.6929 cv
196.226 72.6494 mo
202.71 57.9844 204.547 46.4863 201.494 39.3682 cv
198.169 31.6299 191.559 31.541 191.28 31.541 cv
191.119 31.541 li
190.835 31.541 184.229 31.6299 180.909 39.3682 cv
177.851 46.4863 179.693 57.9844 186.173 72.6494 cv
185.708 72.6836 185.209 72.7217 184.69 72.7725 cv
177.724 56.252 176.165 45.1084 179.798 37.7422 cv
182.239 32.7998 186.151 30.1899 191.119 30.1899 cv
191.28 30.1899 li
196.243 30.1899 200.163 32.7998 202.601 37.7422 cv
206.241 45.1084 204.683 56.252 197.709 72.7773 cv
197.185 72.7256 196.69 72.6875 196.226 72.6494 cv
191.917 72.519 mo
190.438 72.519 li
190.409 72.519 189.459 72.4849 187.846 72.5532 cv
181.437 58.2378 179.478 46.6802 182.351 39.9814 cv
185.269 33.1885 191.06 33.1089 191.119 33.1089 cv
191.28 33.1089 li
191.338 33.1089 197.13 33.1885 200.053 39.9814 cv
202.925 46.6802 200.966 58.2412 194.554 72.5532 cv
192.919 72.4849 191.96 72.519 191.917 72.519 cv
233.191 59.1455 mo
236.508 53.4888 241.448 42.9126 237.334 35.5 cv
235.253 31.7603 232.366 29.3491 228.751 28.3564 cv
220.557 26.0884 210.896 31.6719 207.264 33.7764 cv
206.955 33.9536 li
207.77 35.3682 li
208.079 35.187 li
211.555 33.1797 220.78 27.8447 228.317 29.9229 cv
231.497 30.8018 234.048 32.9482 235.915 36.2974 cv
239.637 42.9927 234.923 52.9658 231.784 58.3174 cv
229.018 63.0229 223.125 70.7158 215.567 77.0054 cv
215.166 76.8447 214.773 76.6968 214.39 76.5537 cv
220.641 71.1807 226.647 64.2993 229.925 58.7148 cv
232.54 54.2461 239.501 42.3809 233.372 34.9668 cv
226.617 26.7939 215.34 32.791 211.099 35.0552 cv
210.988 35.1108 li
211.763 36.5469 li
211.864 36.4961 li
216.155 34.2104 226.212 28.8594 232.109 36.0024 cv
237.517 42.5327 230.978 53.6875 228.515 57.8955 cv
225.199 63.5435 218.994 70.5806 212.599 75.9277 cv
207.585 74.2515 202.942 73.3892 199.339 72.9497 cv
206.33 56.2104 207.829 44.7842 204.006 37.0498 cv
201.324 31.6172 196.805 28.6187 191.28 28.6187 cv
191.119 28.6187 li
185.599 28.6187 181.075 31.6172 178.388 37.0498 cv
174.573 44.7842 176.069 56.2104 183.063 72.9497 cv
179.46 73.3892 174.823 74.2461 169.799 75.9277 cv
163.414 70.5806 157.204 63.5435 153.883 57.8955 cv
151.421 53.6875 144.878 42.5327 150.281 36.0024 cv
156.194 28.8594 166.244 34.2104 170.539 36.4961 cv
170.637 36.5469 li
171.405 35.1108 li
171.304 35.0552 li
167.054 32.791 155.784 26.7939 149.022 34.9668 cv
142.893 42.3809 149.857 54.2461 152.485 58.7148 cv
155.751 64.2993 161.762 71.1807 168.018 76.5537 cv
167.625 76.6968 167.231 76.8447 166.839 77.0005 cv
159.278 70.7158 153.386 63.0283 150.619 58.3174 cv
147.476 52.9658 142.766 42.9927 146.487 36.2974 cv
148.351 32.9482 150.906 30.8018 154.091 29.9229 cv
161.618 27.8447 170.852 33.1797 174.324 35.187 cv
174.633 35.3682 li
175.447 33.9536 li
175.14 33.7803 li
171.503 31.6719 161.846 26.0884 153.651 28.3564 cv
150.035 29.3491 147.146 31.7603 145.06 35.5 cv
140.949 42.9126 145.896 53.4888 149.212 59.1455 cv
151.966 63.8296 157.731 71.3872 165.137 77.6982 cv
162.458 78.8379 159.733 80.2231 157.052 81.9175 cv
156.109 82.5181 155.603 83.603 155.717 84.8198 cv
155.827 86.0229 156.532 87.0498 157.52 87.4478 cv
158.124 85.9268 li
157.711 85.7622 157.394 85.2544 157.339 84.6719 cv
157.317 84.4478 157.301 83.6919 157.921 83.2954 cv
173.348 73.541 190.236 74.1411 190.409 74.1499 cv
191.951 74.1499 li
192.159 74.1411 209.05 73.541 224.477 83.2993 cv
225.102 83.6919 225.08 84.4478 225.06 84.6719 cv
225.01 85.2544 224.688 85.7622 224.277 85.9268 cv
224.878 87.4478 li
225.87 87.0498 226.579 86.0229 226.686 84.8198 cv
226.796 83.603 226.297 82.5181 225.352 81.9175 cv
222.669 80.2231 219.944 78.834 217.266 77.6982 cv
224.671 71.3872 230.437 63.8296 233.191 59.1455 cv
230.209 106.236 mo
230.209 106.236 li
152.185 106.236 li
151.581 106.232 151.091 105.742 151.091 105.129 cv
151.091 104.516 151.586 104.026 152.194 104.026 cv
152.203 104.026 152.21 104.026 152.219 104.026 cv
230.184 104.026 li
230.192 104.026 230.205 104.026 230.209 104.026 cv
230.816 104.026 231.311 104.516 231.311 105.129 cv
231.311 105.742 230.816 106.232 230.209 106.236 cv
228.751 97.3398 mo
228.751 97.8936 228.78 98.438 228.836 98.9619 cv
228.785 98.9619 228.742 98.9531 228.688 98.9531 cv
228.227 98.9531 227.788 99.0332 227.383 99.1646 cv
227.299 98.7378 227.12 97.9438 227.205 97.2007 cv
227.674 92.77 229.317 91.9922 229.761 91.8608 cv
229.124 93.4409 228.751 95.3164 228.751 97.3398 cv
228.685 100.356 mo
228.811 100.356 228.933 100.369 229.048 100.389 cv
229.169 101.002 229.321 101.59 229.517 102.143 cv
229.245 102.207 228.976 102.239 228.685 102.239 cv
227.957 102.239 227.294 102.033 226.796 101.691 cv
227.069 100.914 227.81 100.356 228.685 100.356 cv
222.212 93.5801 mo
223.552 92.7017 225.305 92.0723 227.286 91.8354 cv
226.209 94.0195 226.022 95.9712 226.022 95.9712 cv
226.022 95.9712 224.539 94.5645 222.212 93.5801 cv
220.89 94.8228 mo
220.89 94.8228 222.901 95.1265 225.563 97.6782 cv
226.146 98.2393 226.572 98.8647 226.847 99.3887 cv
226.078 99.7686 225.507 100.385 225.271 101.116 cv
224.794 100.825 224.273 100.407 223.859 100.018 cv
221.244 97.6274 220.89 94.8228 220.89 94.8228 cv
219.429 96.8501 mo
219.741 97.521 220.836 99.228 221.857 100.474 cv
219.416 102.662 li
216.983 100.474 li
218.009 99.228 219.121 97.4883 219.429 96.8501 cv
213.499 97.6782 mo
216.164 95.1265 218.174 94.8228 218.174 94.8228 cv
218.174 94.8228 217.819 97.6274 215.204 100.018 cv
214.765 100.427 214.212 100.867 213.718 101.163 cv
213.499 100.436 212.945 99.8154 212.193 99.418 cv
212.468 98.8901 212.911 98.252 213.499 97.6782 cv
211.732 91.8823 mo
213.785 92.0811 215.61 92.6938 217.009 93.584 cv
214.567 94.5693 213.009 96.0508 213.009 96.0508 cv
213.009 96.0508 212.826 94.0791 211.732 91.8823 cv
208.873 97.4414 mo
208.965 94.2476 210.279 92.3052 210.279 92.3052 cv
210.279 92.3052 211.652 94.2061 211.687 97.4072 cv
211.699 98.3872 211.674 98.8608 211.618 99.1738 cv
211.2 99.0332 210.752 98.9531 210.279 98.9531 cv
209.818 98.9531 209.375 99.0332 208.974 99.1646 cv
208.895 98.7378 208.856 98.1934 208.873 97.4414 cv
210.279 100.356 mo
211.153 100.356 211.893 100.914 212.168 101.691 cv
211.669 102.033 211.007 102.239 210.279 102.239 cv
209.549 102.239 208.886 102.033 208.392 101.691 cv
208.661 100.914 209.4 100.356 210.279 100.356 cv
203.428 93.6563 mo
204.768 92.7734 206.523 92.1533 208.502 91.9165 cv
207.428 94.1045 207.242 96.0508 207.242 96.0508 cv
207.242 96.0508 205.76 94.6455 203.428 93.6563 cv
202.478 95.0415 mo
202.478 95.0415 204.492 95.1265 207.149 97.6782 cv
207.737 98.2393 208.167 98.8647 208.438 99.3887 cv
207.674 99.7686 207.099 100.385 206.854 101.116 cv
206.39 100.825 205.865 100.407 205.442 100.018 cv
202.832 97.6274 202.478 95.0415 202.478 95.0415 cv
200.901 96.8501 mo
201.219 97.521 202.313 99.228 203.331 100.474 cv
200.897 102.662 li
198.469 100.474 li
199.491 99.228 200.603 97.4883 200.901 96.8501 cv
192.991 91.9165 mo
194.972 92.1533 196.729 92.7734 198.072 93.6563 cv
195.739 94.6455 194.253 96.0508 194.253 96.0508 cv
194.253 96.0508 194.067 94.1045 192.991 91.9165 cv
193.058 99.3887 mo
193.333 98.8647 193.767 98.2393 194.342 97.6782 cv
197.007 95.1265 199.019 94.8228 199.019 94.8228 cv
199.019 94.8228 198.663 97.6274 196.049 100.018 cv
195.631 100.407 195.11 100.825 194.646 101.116 cv
194.396 100.385 193.827 99.7686 193.058 99.3887 cv
189.81 97.4072 mo
189.848 94.2061 191.22 92.3052 191.22 92.3052 cv
191.22 92.3052 192.534 94.2476 192.618 97.4414 cv
192.635 98.1934 192.603 98.7378 192.521 99.1646 cv
192.12 99.0332 191.677 98.9531 191.22 98.9531 cv
190.747 98.9531 190.295 99.0332 189.882 99.1738 cv
189.822 98.8608 189.797 98.3872 189.81 97.4072 cv
191.22 100.356 mo
192.091 100.356 192.83 100.914 193.104 101.691 cv
192.609 102.033 191.951 102.239 191.22 102.239 cv
190.489 102.239 189.831 102.033 189.329 101.691 cv
189.61 100.914 190.345 100.356 191.22 100.356 cv
188.487 96.0508 mo
188.487 96.0508 186.929 94.5693 184.495 93.584 cv
185.886 92.6938 187.714 92.0811 189.763 91.8823 cv
188.674 94.0791 188.487 96.0508 188.487 96.0508 cv
183.337 94.8228 mo
183.337 94.8228 185.336 95.1265 187.997 97.6782 cv
188.589 98.252 189.028 98.8901 189.304 99.418 cv
188.555 99.8154 188.005 100.436 187.777 101.163 cv
187.287 100.867 186.729 100.427 186.29 100.018 cv
183.688 97.6274 183.337 94.8228 183.337 94.8228 cv
181.568 96.8501 mo
181.872 97.4883 182.988 99.228 184.001 100.474 cv
181.572 102.662 li
179.135 100.474 li
180.157 99.228 181.243 97.521 181.568 96.8501 cv
174.1 91.9165 mo
176.077 92.1533 177.834 92.7734 179.173 93.6563 cv
176.841 94.6455 175.358 96.0508 175.358 96.0508 cv
175.358 96.0508 175.178 94.1045 174.1 91.9165 cv
174.163 99.3887 mo
174.434 98.8647 174.865 98.2393 175.447 97.6782 cv
178.109 95.1265 180.128 95.0415 180.128 95.0415 cv
180.128 95.0415 179.764 97.6274 177.15 100.018 cv
176.731 100.407 176.212 100.825 175.748 101.116 cv
175.507 100.385 174.928 99.7686 174.163 99.3887 cv
170.911 97.4072 mo
170.944 94.2061 172.326 92.3052 172.326 92.3052 cv
172.326 92.3052 173.635 94.2476 173.716 97.4414 cv
173.745 98.1934 173.708 98.7378 173.627 99.1646 cv
173.226 99.0332 172.782 98.9531 172.322 98.9531 cv
171.845 98.9531 171.396 99.0332 170.982 99.1738 cv
170.924 98.8608 170.898 98.3872 170.911 97.4072 cv
172.326 100.356 mo
173.196 100.356 173.935 100.914 174.21 101.691 cv
173.716 102.033 173.053 102.239 172.326 102.239 cv
171.591 102.239 170.932 102.033 170.429 101.691 cv
170.708 100.914 171.447 100.356 172.326 100.356 cv
169.589 96.0508 mo
169.589 96.0508 168.025 94.5693 165.593 93.584 cv
166.987 92.6938 168.815 92.0811 170.864 91.8823 cv
169.774 94.0791 169.589 96.0508 169.589 96.0508 cv
164.427 94.8228 mo
164.427 94.8228 166.438 95.1265 169.099 97.6782 cv
169.694 98.252 170.134 98.8901 170.403 99.418 cv
169.652 99.8154 169.103 100.436 168.879 101.163 cv
168.385 100.867 167.832 100.427 167.392 100.018 cv
164.777 97.6274 164.427 94.8228 164.427 94.8228 cv
162.978 96.8501 mo
163.282 97.4883 164.394 99.228 165.407 100.474 cv
162.987 102.662 li
160.54 100.474 li
161.567 99.228 162.658 97.521 162.978 96.8501 cv
155.552 99.3887 mo
155.831 98.8647 156.261 98.2393 156.836 97.6782 cv
159.498 95.1265 161.508 94.8228 161.508 94.8228 cv
161.508 94.8228 161.162 97.6274 158.547 100.018 cv
158.124 100.407 157.601 100.825 157.136 101.116 cv
156.891 100.385 156.321 99.7686 155.552 99.3887 cv
153.352 100.389 mo
153.474 100.369 153.592 100.356 153.711 100.356 cv
154.585 100.356 155.328 100.914 155.606 101.691 cv
155.109 102.033 154.442 102.239 153.711 102.239 cv
153.427 102.239 153.149 102.207 152.891 102.143 cv
153.073 101.59 153.229 101.002 153.352 100.389 cv
155.113 91.8354 mo
157.089 92.0723 158.847 92.7017 160.191 93.5801 cv
157.854 94.5645 156.375 95.9712 156.375 95.9712 cv
156.375 95.9712 156.194 94.0195 155.113 91.8354 cv
155.198 97.2007 mo
155.281 97.9438 155.1 98.7378 155.024 99.1646 cv
154.61 99.0332 154.174 98.9531 153.706 98.9531 cv
153.66 98.9531 153.613 98.9619 153.566 98.9619 cv
153.623 98.438 153.647 97.8936 153.647 97.3398 cv
153.647 95.3164 153.275 93.4409 152.642 91.8608 cv
153.077 91.9922 154.724 92.77 155.198 97.2007 cv
152.185 89.5762 mo
152.185 89.5762 li
151.581 89.5713 151.091 89.0811 151.091 88.4697 cv
151.091 87.8604 151.586 87.3667 152.194 87.3667 cv
152.203 87.3667 152.21 87.3667 152.219 87.3667 cv
230.184 87.3667 li
230.192 87.3667 230.205 87.3667 230.209 87.3667 cv
230.816 87.3667 231.311 87.8604 231.311 88.4697 cv
231.311 89.0811 230.816 89.5713 230.209 89.5762 cv
152.185 89.5762 li
cp
231.78 102.574 mo
230.146 101.445 230.192 97.8936 230.192 96.5537 cv
230.192 95.5483 230.471 91.9961 231.818 90.9199 cv
232.768 90.146 233.372 89.5928 233.372 88.4897 cv
233.372 86.9868 232.16 85.7661 230.652 85.7622 cv
211.986 85.7622 li
206.997 84.1602 199.951 83.1675 192.159 83.1675 cv
190.236 83.1675 li
182.447 83.1675 175.402 84.1602 170.416 85.7622 cv
151.751 85.7622 li
150.247 85.7661 149.026 86.9868 149.026 88.4897 cv
149.026 89.5928 149.626 90.146 150.584 90.9199 cv
151.924 91.9961 152.215 95.5483 152.215 96.5537 cv
152.215 97.8936 152.257 101.445 150.623 102.574 cv
149.698 103.212 149.026 103.798 149.026 105.1 cv
149.026 106.599 150.247 107.82 151.751 107.824 cv
151.758 107.824 li
151.764 107.824 li
230.636 107.824 li
230.645 107.824 li
230.648 107.824 li
230.652 107.824 li
232.16 107.82 233.372 106.599 233.372 105.1 cv
233.372 103.798 232.701 103.212 231.78 102.574 cv
177.825 73.731 mo
176.237 73.731 174.953 72.4429 174.953 70.8589 cv
174.953 69.271 176.237 67.9819 177.825 67.9819 cv
179.41 67.9819 180.693 69.271 180.693 70.8589 cv
180.693 72.4429 179.41 73.731 177.825 73.731 cv
177.825 66.7158 mo
175.541 66.7158 173.682 68.5654 173.682 70.8589 cv
173.682 73.1445 175.541 74.9985 177.825 74.9985 cv
180.114 74.9985 181.97 73.1445 181.97 70.8589 cv
181.97 68.5654 180.114 66.7158 177.825 66.7158 cv
175.042 65.9634 mo
173.411 65.9634 172.085 64.6416 172.085 63.0103 cv
172.085 61.3809 173.411 60.0586 175.042 60.0586 cv
176.673 60.0586 177.995 61.3809 177.995 63.0103 cv
177.995 64.6416 176.673 65.9634 175.042 65.9634 cv
175.042 58.749 mo
172.689 58.749 170.78 60.6577 170.78 63.0103 cv
170.78 65.3633 172.689 67.2764 175.042 67.2764 cv
177.395 67.2764 179.301 65.3633 179.301 63.0103 cv
179.301 60.6577 177.395 58.749 175.042 58.749 cv
173.062 57.7134 mo
171.427 57.7134 170.1 56.3823 170.1 54.7563 cv
170.1 53.127 171.427 51.8047 173.062 51.8047 cv
174.688 51.8047 176.009 53.127 176.009 54.7563 cv
176.009 56.3823 174.688 57.7134 173.062 57.7134 cv
173.062 50.499 mo
170.7 50.499 168.79 52.4038 168.79 54.7563 cv
168.79 57.1094 170.7 59.0229 173.062 59.0229 cv
175.405 59.0229 177.31 57.1094 177.31 54.7563 cv
177.31 52.4038 175.405 50.499 173.062 50.499 cv
173.438 41.2183 mo
171.845 41.2183 170.552 39.9307 170.552 38.334 cv
170.552 36.7407 171.845 35.4492 173.438 35.4492 cv
175.029 35.4492 176.322 36.7407 176.322 38.334 cv
176.322 39.9307 175.029 41.2183 173.438 41.2183 cv
173.438 34.1763 mo
171.139 34.1763 169.28 36.0405 169.28 38.334 cv
169.28 40.6309 171.139 42.4951 173.438 42.4951 cv
175.735 42.4951 177.594 40.6309 177.594 38.334 cv
177.594 36.0405 175.735 34.1763 173.438 34.1763 cv
172.423 49.3291 mo
170.827 49.3291 169.534 48.0361 169.534 46.4482 cv
169.534 44.8555 170.827 43.5635 172.423 43.5635 cv
174.011 43.5635 175.304 44.8555 175.304 46.4482 cv
175.304 48.0361 174.011 49.3291 172.423 49.3291 cv
172.423 42.2871 mo
170.121 42.2871 168.258 44.146 168.258 46.4482 cv
168.258 48.7417 170.121 50.6045 172.423 50.6045 cv
174.717 50.6045 176.579 48.7417 176.579 46.4482 cv
176.579 44.146 174.717 42.2871 172.423 42.2871 cv
183.985 28.8594 mo
182.43 28.8594 181.167 27.5918 181.167 26.0327 cv
181.167 24.4702 182.43 23.2026 183.985 23.2026 cv
185.544 23.2026 186.81 24.4702 186.81 26.0327 cv
186.81 27.5918 185.544 28.8594 183.985 28.8594 cv
183.985 21.9565 mo
181.737 21.9565 179.917 23.7813 179.917 26.0327 cv
179.917 28.2803 181.737 30.1055 183.985 30.1055 cv
186.231 30.1055 188.062 28.2803 188.062 26.0327 cv
188.062 23.7813 186.231 21.9565 183.985 21.9565 cv
177.323 33.8525 mo
175.697 33.8525 174.383 32.5342 174.383 30.9082 cv
174.383 29.2861 175.697 27.9678 177.323 27.9678 cv
178.95 27.9678 180.267 29.2861 180.267 30.9082 cv
180.267 32.5342 178.95 33.8525 177.323 33.8525 cv
177.323 26.6621 mo
174.987 26.6621 173.082 28.563 173.082 30.9082 cv
173.082 33.252 174.987 35.1489 177.323 35.1489 cv
179.668 35.1489 181.568 33.252 181.568 30.9082 cv
181.568 28.563 179.668 26.6621 177.323 26.6621 cv
170.045 29.4507 mo
168.414 29.4507 167.088 28.1196 167.088 26.481 cv
167.088 24.8428 168.414 23.5156 170.045 23.5156 cv
171.688 23.5156 173.019 24.8428 173.019 26.481 cv
173.019 28.1196 171.688 29.4507 170.045 29.4507 cv
170.045 22.2061 mo
167.692 22.2061 165.774 24.1196 165.774 26.481 cv
165.774 28.8413 167.692 30.7598 170.045 30.7598 cv
172.411 30.7598 174.333 28.8413 174.333 26.481 cv
174.333 24.1196 172.411 22.2061 170.045 22.2061 cv
161.978 27.1699 mo
160.406 27.1699 159.129 25.8975 159.129 24.3223 cv
159.129 22.7505 160.406 21.4756 161.978 21.4756 cv
163.549 21.4756 164.824 22.7505 164.824 24.3223 cv
164.824 25.8975 163.549 27.1699 161.978 27.1699 cv
161.978 20.2168 mo
159.708 20.2168 157.863 22.0542 157.863 24.3223 cv
157.863 26.5952 159.708 28.4287 161.978 28.4287 cv
164.246 28.4287 166.083 26.5952 166.083 24.3223 cv
166.083 22.0542 164.246 20.2168 161.978 20.2168 cv
153.8 27.1563 mo
152.228 27.1563 150.948 25.8809 150.948 24.3057 cv
150.948 22.7339 152.228 21.4541 153.8 21.4541 cv
155.375 21.4541 156.65 22.7339 156.65 24.3057 cv
156.65 25.8809 155.375 27.1563 153.8 27.1563 cv
153.8 20.2002 mo
151.53 20.2002 149.689 22.0376 149.689 24.3057 cv
149.689 26.5771 151.53 28.416 153.8 28.416 cv
156.071 28.416 157.914 26.5771 157.914 24.3057 cv
157.914 22.0376 156.071 20.2002 153.8 20.2002 cv
158.851 80.3247 mo
157.279 80.3247 156.004 79.0493 156.004 77.4741 cv
156.004 75.9028 157.279 74.6313 158.851 74.6313 cv
160.431 74.6313 161.707 75.9028 161.707 77.4741 cv
161.707 79.0493 160.431 80.3247 158.851 80.3247 cv
158.851 73.3687 mo
156.583 73.3687 154.746 75.2061 154.746 77.4741 cv
154.746 79.7461 156.583 81.5845 158.851 81.5845 cv
161.119 81.5845 162.965 79.7461 162.965 77.4741 cv
162.965 75.2061 161.119 73.3687 158.851 73.3687 cv
153.212 74.3604 mo
151.637 74.3604 150.36 73.085 150.36 71.5098 cv
150.36 69.9346 151.637 68.6621 153.212 68.6621 cv
154.784 68.6621 156.064 69.9346 156.064 71.5098 cv
156.064 73.085 154.784 74.3604 153.212 74.3604 cv
153.212 67.3828 mo
150.944 67.3828 149.098 69.2456 149.098 71.5098 cv
149.098 73.7817 150.944 75.624 153.212 75.624 cv
155.48 75.624 157.317 73.7817 157.317 71.5098 cv
157.317 69.2456 155.48 67.3828 153.212 67.3828 cv
148.122 67.873 mo
146.546 67.873 145.275 66.5928 145.275 65.0215 cv
145.275 63.4458 146.546 62.1694 148.122 62.1694 cv
149.693 62.1694 150.969 63.4458 150.969 65.0215 cv
150.969 66.5928 149.693 67.873 148.122 67.873 cv
148.122 60.9106 mo
145.85 60.9106 144.016 62.7568 144.016 65.0215 cv
144.016 67.2944 145.85 69.1445 148.122 69.1445 cv
150.395 69.1445 152.228 67.2944 152.228 65.0215 cv
152.228 62.7568 150.395 60.9106 148.122 60.9106 cv
143.924 60.7803 mo
142.347 60.7803 141.072 59.5054 141.072 57.9287 cv
141.072 56.3574 142.347 55.0781 143.924 55.0781 cv
145.499 55.0781 146.771 56.3574 146.771 57.9287 cv
146.771 59.5054 145.499 60.7803 143.924 60.7803 cv
143.924 53.8193 mo
141.66 53.8193 139.813 55.6606 139.813 57.9287 cv
139.813 60.1978 141.66 62.0391 143.924 62.0391 cv
146.195 62.0391 148.029 60.1978 148.029 57.9287 cv
148.029 55.6606 146.195 53.8193 143.924 53.8193 cv
140.895 53.1143 mo
139.323 53.1143 138.052 51.8428 138.052 50.2661 cv
138.052 48.6997 139.323 47.4233 140.895 47.4233 cv
142.474 47.4233 143.747 48.6997 143.747 50.2661 cv
143.747 51.8428 142.474 53.1143 140.895 53.1143 cv
140.895 46.1606 mo
138.627 46.1606 136.789 47.998 136.789 50.2661 cv
136.789 52.5391 138.627 54.3765 140.895 54.3765 cv
143.168 54.3765 145.005 52.5391 145.005 50.2661 cv
145.005 47.998 143.168 46.1606 140.895 46.1606 cv
139.636 45.0034 mo
138.064 45.0034 136.789 43.7285 136.789 42.1519 cv
136.789 40.5801 138.064 39.3086 139.636 39.3086 cv
141.208 39.3086 142.486 40.5801 142.486 42.1519 cv
142.486 43.7285 141.208 45.0034 139.636 45.0034 cv
139.636 38.0503 mo
137.368 38.0503 135.531 39.8877 135.531 42.1519 cv
135.531 44.4248 137.368 46.2661 139.636 46.2661 cv
141.904 46.2661 143.747 44.4248 143.747 42.1519 cv
143.747 39.8877 141.904 38.0503 139.636 38.0503 cv
141.253 36.9736 mo
139.683 36.9736 138.406 35.6934 138.406 34.1221 cv
138.406 32.5469 139.683 31.2754 141.253 31.2754 cv
142.825 31.2754 144.096 32.5469 144.096 34.1221 cv
144.096 35.6934 142.825 36.9736 141.253 36.9736 cv
141.253 30.0117 mo
138.985 30.0117 137.147 31.854 137.147 34.1221 cv
137.147 36.3862 138.985 38.2324 141.253 38.2324 cv
143.522 38.2324 145.363 36.3862 145.363 34.1221 cv
145.363 31.854 143.522 30.0117 141.253 30.0117 cv
146.356 30.5396 mo
144.781 30.5396 143.504 29.2646 143.504 27.6929 cv
143.504 26.1177 144.781 24.8428 146.356 24.8428 cv
147.924 24.8428 149.199 26.1177 149.199 27.6929 cv
149.199 29.2646 147.924 30.5396 146.356 30.5396 cv
146.356 23.5825 mo
144.088 23.5825 142.246 25.4199 142.246 27.6929 cv
142.246 29.9609 144.088 31.8032 146.356 31.8032 cv
148.621 31.8032 150.462 29.9609 150.462 27.6929 cv
150.462 25.4199 148.621 23.5825 146.356 23.5825 cv
.658824 .6 .431373 rgb
f
86.2471 205.764 mo
87.2236 205.764 li
87.9326 205.764 88.457 205.62 88.7861 205.345 cv
89.1406 205.041 89.3193 204.661 89.3193 204.196 cv
89.3193 203.749 89.1455 203.373 88.8115 203.064 cv
88.4819 202.764 87.8945 202.617 87.0459 202.617 cv
86.2471 202.617 li
86.2471 205.764 li
cp
86.2471 201.299 mo
86.7422 201.299 li
87.3247 201.299 87.7554 201.172 88.0303 200.91 cv
88.3047 200.652 88.4351 200.272 88.4351 199.77 cv
88.4351 199.275 88.3013 198.903 88.0176 198.649 cv
87.7427 198.393 87.3335 198.27 86.8003 198.27 cv
86.2471 198.27 li
86.2471 201.299 li
cp
84.6768 207.238 mo
84.6768 196.825 li
86.2393 196.825 li
86.936 196.825 87.4932 196.881 87.9121 196.982 cv
88.3301 197.091 88.6812 197.277 88.9683 197.53 cv
89.2598 197.802 89.4912 198.135 89.665 198.523 cv
89.8384 198.925 89.9307 199.326 89.9307 199.74 cv
89.9307 200.487 89.6396 201.116 89.0737 201.632 cv
89.627 201.822 90.0625 202.152 90.3789 202.63 cv
90.6992 203.09 90.8643 203.636 90.8643 204.26 cv
90.8643 205.071 90.5781 205.759 90.0029 206.321 cv
89.6523 206.668 89.2671 206.909 88.8369 207.043 cv
88.3643 207.175 87.7729 207.238 87.0586 207.238 cv
84.6768 207.238 li
cp
f
95.8027 196.825 mo
95.8027 205.764 li
98.8608 205.764 li
98.8608 207.242 li
94.231 207.242 li
94.231 196.825 li
95.8027 196.825 li
cp
f
107.798 203.233 mo
106.252 199.689 li
104.635 203.233 li
107.798 203.233 li
cp
108.445 204.712 mo
103.98 204.712 li
102.823 207.242 li
101.125 207.242 li
106.283 196.176 li
111.25 207.242 li
109.535 207.242 li
108.445 204.712 li
cp
f
121.155 197.384 mo
121.155 199.241 li
120.239 198.481 119.305 198.105 118.329 198.105 cv
117.26 198.105 116.357 198.485 115.622 199.259 cv
114.887 200.019 114.515 200.957 114.515 202.063 cv
114.515 203.158 114.887 204.078 115.622 204.825 cv
116.361 205.582 117.265 205.958 118.329 205.958 cv
118.888 205.958 119.36 205.865 119.749 205.683 cv
119.96 205.6 120.184 205.473 120.425 205.319 cv
120.649 205.164 120.894 204.986 121.155 204.767 cv
121.155 206.663 li
120.248 207.175 119.305 207.428 118.316 207.428 cv
116.83 207.428 115.559 206.909 114.507 205.873 cv
113.459 204.825 112.931 203.558 112.931 202.076 cv
112.931 200.749 113.375 199.566 114.253 198.532 cv
115.327 197.261 116.72 196.622 118.439 196.622 cv
119.373 196.622 120.277 196.876 121.155 197.384 cv
f
126.376 200.982 mo
130.431 196.825 li
132.527 196.825 li
127.821 201.54 li
132.556 207.238 li
130.453 207.238 li
126.702 202.608 li
126.376 202.934 li
126.376 207.238 li
124.801 207.238 li
124.801 196.825 li
126.376 196.825 li
126.376 200.982 li
cp
f
142.559 201.606 mo
143.058 201.606 li
144.548 201.606 145.3 201.041 145.3 199.901 cv
145.3 198.832 144.569 198.299 143.121 198.299 cv
142.559 198.299 li
142.559 201.606 li
cp
144.519 202.808 mo
147.747 207.238 li
145.824 207.238 li
142.846 202.979 li
142.559 202.979 li
142.559 207.238 li
140.992 207.238 li
140.992 196.825 li
142.833 196.825 li
144.211 196.825 145.203 197.083 145.815 197.599 cv
146.487 198.173 146.825 198.934 146.825 199.876 cv
146.825 200.619 146.615 201.252 146.195 201.784 cv
145.769 202.317 145.211 202.655 144.519 202.808 cv
f
156.173 203.233 mo
154.626 199.689 li
153.009 203.233 li
156.173 203.233 li
cp
156.811 204.712 mo
152.35 204.712 li
151.197 207.242 li
149.503 207.242 li
154.657 196.176 li
159.625 207.242 li
157.905 207.242 li
156.811 204.712 li
cp
f
168.203 198.371 mo
166.928 199.127 li
166.691 198.718 166.459 198.443 166.248 198.316 cv
166.023 198.178 165.732 198.105 165.374 198.105 cv
164.938 198.105 164.579 198.229 164.292 198.473 cv
164.005 198.722 163.856 199.022 163.856 199.39 cv
163.856 199.901 164.236 200.31 164.989 200.619 cv
166.028 201.05 li
166.877 201.384 167.494 201.806 167.886 202.3 cv
168.271 202.789 168.474 203.398 168.474 204.111 cv
168.474 205.066 168.157 205.856 167.515 206.485 cv
166.868 207.115 166.07 207.428 165.115 207.428 cv
164.216 207.428 163.472 207.166 162.88 206.625 cv
162.298 206.09 161.935 205.332 161.795 204.361 cv
163.383 204.01 li
163.455 204.623 163.582 205.046 163.759 205.277 cv
164.084 205.729 164.558 205.958 165.179 205.958 cv
165.672 205.958 166.074 205.793 166.399 205.464 cv
166.725 205.135 166.886 204.721 166.886 204.214 cv
166.886 204.01 166.86 203.829 166.801 203.655 cv
166.747 203.491 166.658 203.33 166.539 203.19 cv
166.417 203.052 166.26 202.916 166.074 202.795 cv
165.884 202.672 165.665 202.554 165.403 202.439 cv
164.401 202.025 li
162.97 201.422 162.26 200.543 162.26 199.381 cv
162.26 198.596 162.56 197.944 163.155 197.416 cv
163.755 196.885 164.502 196.622 165.39 196.622 cv
166.585 196.622 167.528 197.206 168.203 198.371 cv
f
173.318 201.552 mo
173.91 201.552 li
175.351 201.552 176.077 200.999 176.077 199.883 cv
176.077 198.811 175.33 198.27 173.838 198.27 cv
173.318 198.27 li
173.318 201.552 li
cp
173.318 203.005 mo
173.318 207.242 li
171.743 207.242 li
171.743 196.825 li
173.53 196.825 li
174.404 196.825 175.063 196.885 175.507 197.008 cv
175.955 197.129 176.348 197.358 176.693 197.695 cv
177.293 198.278 177.59 199.019 177.59 199.908 cv
177.59 200.859 177.272 201.615 176.63 202.173 cv
175.993 202.731 175.134 203.005 174.045 203.005 cv
173.318 203.005 li
cp
f
182.163 205.764 mo
183.14 205.764 li
183.849 205.764 184.368 205.62 184.706 205.345 cv
185.058 205.041 185.231 204.661 185.231 204.196 cv
185.231 203.749 185.062 203.373 184.724 203.064 cv
184.394 202.764 183.808 202.617 182.958 202.617 cv
182.163 202.617 li
182.163 205.764 li
cp
182.163 201.299 mo
182.653 201.299 li
183.245 201.299 183.668 201.172 183.95 200.91 cv
184.216 200.652 184.353 200.272 184.353 199.77 cv
184.353 199.275 184.216 198.903 183.935 198.649 cv
183.659 198.393 183.249 198.27 182.718 198.27 cv
182.163 198.27 li
182.163 201.299 li
cp
180.593 207.238 mo
180.593 196.825 li
182.16 196.825 li
182.853 196.825 183.413 196.881 183.823 196.982 cv
184.241 197.091 184.593 197.277 184.889 197.53 cv
185.177 197.802 185.408 198.135 185.581 198.523 cv
185.754 198.925 185.844 199.326 185.844 199.74 cv
185.844 200.487 185.556 201.116 184.985 201.632 cv
185.53 201.822 185.974 202.152 186.296 202.63 cv
186.616 203.09 186.78 203.636 186.78 204.26 cv
186.78 205.071 186.493 205.759 185.919 206.321 cv
185.573 206.668 185.181 206.909 184.745 207.043 cv
184.276 207.175 183.688 207.238 182.97 207.238 cv
180.593 207.238 li
cp
f
195.888 198.299 mo
191.714 198.299 li
191.714 200.805 li
195.774 200.805 li
195.774 202.283 li
191.714 202.283 li
191.714 205.764 li
195.888 205.764 li
195.888 207.238 li
190.143 207.238 li
190.143 196.825 li
195.888 196.825 li
195.888 198.299 li
cp
f
200.91 201.606 mo
201.413 201.606 li
202.904 201.606 203.643 201.041 203.643 199.901 cv
203.643 198.832 202.921 198.299 201.469 198.299 cv
200.91 198.299 li
200.91 201.606 li
cp
202.866 202.808 mo
206.093 207.238 li
204.171 207.238 li
201.197 202.979 li
200.91 202.979 li
200.91 207.238 li
199.339 207.238 li
199.339 196.825 li
201.182 196.825 li
202.558 196.825 203.551 197.083 204.163 197.599 cv
204.838 198.173 205.177 198.934 205.177 199.876 cv
205.177 200.619 204.966 201.252 204.543 201.784 cv
204.116 202.317 203.563 202.655 202.866 202.808 cv
f
210.612 201.606 mo
211.111 201.606 li
212.599 201.606 213.347 201.041 213.347 199.901 cv
213.347 198.832 212.624 198.299 211.175 198.299 cv
210.612 198.299 li
210.612 201.606 li
cp
212.569 202.808 mo
215.801 207.238 li
213.869 207.238 li
210.893 202.979 li
210.612 202.979 li
210.612 207.238 li
209.041 207.238 li
209.041 196.825 li
210.88 196.825 li
212.26 196.825 213.253 197.083 213.866 197.599 cv
214.546 198.173 214.875 198.934 214.875 199.876 cv
214.875 200.619 214.663 201.252 214.242 201.784 cv
213.824 202.317 213.258 202.655 212.569 202.808 cv
f
220.393 202.744 mo
216.991 196.825 li
218.8 196.825 li
221.182 200.986 li
223.572 196.825 li
225.38 196.825 li
221.968 202.744 li
221.968 207.242 li
220.393 207.242 li
220.393 202.744 li
cp
f
235.949 196.825 mo
235.949 205.764 li
239.016 205.764 li
239.016 207.242 li
234.378 207.242 li
234.378 196.825 li
235.949 196.825 li
cp
f
243.463 207.238 mo
241.888 207.238 li
241.888 196.825 li
243.463 196.825 li
243.463 207.238 li
cp
f
252.851 203.115 mo
254.357 204.619 li
255.024 203.927 255.359 203.069 255.359 202.051 cv
255.359 200.927 254.992 199.993 254.248 199.237 cv
253.504 198.481 252.579 198.105 251.477 198.105 cv
250.362 198.105 249.441 198.481 248.723 199.237 cv
248.004 199.989 247.641 200.936 247.641 202.093 cv
247.641 203.212 248.013 204.133 248.757 204.847 cv
249.534 205.587 250.43 205.958 251.422 205.958 cv
252.105 205.958 252.719 205.793 253.264 205.489 cv
250.818 203.115 li
252.851 203.115 li
cp
257.175 207.428 mo
255.194 207.428 li
254.379 206.592 li
253.513 207.153 252.545 207.428 251.477 207.428 cv
250.1 207.428 248.875 206.963 247.802 206.026 cv
246.637 204.999 246.053 203.681 246.053 202.08 cv
246.053 200.513 246.606 199.203 247.7 198.152 cv
248.778 197.134 250.04 196.632 251.494 196.632 cv
252.82 196.632 254.003 197.074 255.055 197.962 cv
256.313 199.039 256.951 200.433 256.951 202.152 cv
256.951 203.504 256.453 204.703 255.451 205.751 cv
257.175 207.428 li
cp
f
261.332 196.825 mo
261.332 203.095 li
261.332 203.99 261.476 204.64 261.771 205.054 cv
262.206 205.657 262.822 205.958 263.612 205.958 cv
264.41 205.958 265.027 205.657 265.467 205.054 cv
265.754 204.657 265.898 204.007 265.898 203.095 cv
265.898 196.825 li
267.478 196.825 li
267.478 203.533 li
267.478 204.627 267.132 205.536 266.446 206.245 cv
265.675 207.03 264.736 207.428 263.612 207.428 cv
262.497 207.428 261.555 207.03 260.782 206.245 cv
260.103 205.536 259.761 204.627 259.761 203.533 cv
259.761 196.825 li
261.332 196.825 li
cp
f
276.56 198.299 mo
272.386 198.299 li
272.386 200.805 li
276.441 200.805 li
276.441 202.283 li
272.386 202.283 li
272.386 205.764 li
276.56 205.764 li
276.56 207.238 li
270.811 207.238 li
270.811 196.825 li
276.56 196.825 li
276.56 198.299 li
cp
f
281.578 196.825 mo
281.578 203.095 li
281.578 203.99 281.726 204.64 282.013 205.054 cv
282.457 205.657 283.068 205.958 283.858 205.958 cv
284.661 205.958 285.27 205.657 285.709 205.054 cv
286.005 204.657 286.148 204.007 286.148 203.095 cv
286.148 196.825 li
287.724 196.825 li
287.724 203.533 li
287.724 204.627 287.378 205.536 286.697 206.245 cv
285.929 207.03 284.978 207.428 283.858 207.428 cv
282.739 207.428 281.797 207.03 281.028 206.245 cv
280.349 205.536 280.007 204.627 280.007 203.533 cv
280.007 196.825 li
281.578 196.825 li
cp
f
292.539 201.606 mo
293.046 201.606 li
294.533 201.606 295.276 201.041 295.276 199.901 cv
295.276 198.832 294.546 198.299 293.102 198.299 cv
292.539 198.299 li
292.539 201.606 li
cp
294.499 202.808 mo
297.722 207.238 li
295.8 207.238 li
292.826 202.979 li
292.539 202.979 li
292.539 207.238 li
290.973 207.238 li
290.973 196.825 li
292.813 196.825 li
294.187 196.825 295.18 197.083 295.796 197.599 cv
296.473 198.173 296.811 198.934 296.811 199.876 cv
296.811 200.619 296.594 201.252 296.172 201.784 cv
295.745 202.317 295.188 202.655 294.499 202.808 cv
f
172.736 218.584 mo
170.383 218.584 li
170.383 220.21 li
172.651 220.21 li
172.651 221.165 li
170.383 221.165 li
170.383 224.388 li
169.353 224.388 li
169.353 217.62 li
172.736 217.62 li
172.736 218.584 li
cp
f
176.82 220.729 mo
177.15 220.729 li
178.105 220.729 178.59 220.362 178.59 219.622 cv
178.59 218.935 178.122 218.584 177.184 218.584 cv
176.82 218.584 li
176.82 220.729 li
cp
178.093 221.507 mo
180.183 224.388 li
178.932 224.388 li
177.002 221.621 li
176.82 221.621 li
176.82 224.388 li
175.803 224.388 li
175.803 217.624 li
176.993 217.624 li
177.889 217.624 178.536 217.79 178.932 218.123 cv
179.368 218.499 179.592 218.998 179.592 219.609 cv
179.592 220.087 179.453 220.505 179.173 220.84 cv
178.907 221.187 178.536 221.414 178.093 221.507 cv
f
186.642 221.79 mo
185.64 219.492 li
184.593 221.79 li
186.642 221.79 li
cp
187.06 222.749 mo
184.162 222.749 li
183.405 224.388 li
182.312 224.388 li
185.657 217.199 li
188.884 224.388 li
187.765 224.388 li
187.06 222.749 li
cp
f
191.622 224.388 mo
191.622 217.168 li
196.552 222.322 li
196.552 217.624 li
197.573 217.624 li
197.573 224.802 li
192.635 219.647 li
192.635 224.388 li
191.622 224.388 li
cp
f
206.14 217.98 mo
206.14 219.188 li
205.549 218.693 204.932 218.448 204.303 218.448 cv
203.61 218.448 203.022 218.698 202.545 219.195 cv
202.071 219.698 201.827 220.303 201.827 221.021 cv
201.827 221.734 202.071 222.331 202.545 222.82 cv
203.022 223.306 203.617 223.552 204.311 223.552 cv
204.67 223.552 204.974 223.496 205.227 223.373 cv
205.362 223.318 205.515 223.239 205.659 223.142 cv
205.814 223.04 205.971 222.923 206.14 222.787 cv
206.14 224.016 li
205.549 224.35 204.944 224.511 204.298 224.511 cv
203.335 224.511 202.511 224.172 201.823 223.501 cv
201.144 222.82 200.796 222.001 200.796 221.038 cv
200.796 220.172 201.093 219.403 201.649 218.728 cv
202.355 217.899 203.263 217.485 204.374 217.485 cv
204.986 217.485 205.569 217.65 206.14 217.98 cv
f
213.047 218.584 mo
210.334 218.584 li
210.334 220.21 li
212.966 220.21 li
212.966 221.165 li
210.334 221.165 li
210.334 223.437 li
213.047 223.437 li
213.047 224.388 li
209.313 224.388 li
209.313 217.62 li
213.047 217.62 li
213.047 218.584 li
cp
f
382.068 123.651 mo
382.343 123.651 li
382.66 123.651 382.931 123.534 382.931 123.233 cv
382.931 123.027 382.773 122.815 382.343 122.815 cv
382.221 122.815 382.132 122.828 382.068 122.836 cv
382.068 123.651 li
cp
382.068 124.974 mo
381.688 124.974 li
381.688 122.579 li
381.888 122.554 382.081 122.52 382.365 122.52 cv
382.732 122.52 382.969 122.595 383.108 122.702 cv
383.251 122.807 383.327 122.971 383.327 123.195 cv
383.327 123.516 383.121 123.707 382.858 123.783 cv
382.858 123.796 li
383.07 123.841 383.213 124.031 383.26 124.382 cv
383.323 124.754 383.378 124.897 383.412 124.974 cv
383.011 124.974 li
382.96 124.897 382.896 124.678 382.854 124.366 cv
382.792 124.057 382.644 123.948 382.334 123.948 cv
382.068 123.948 li
382.068 124.974 li
cp
382.47 121.908 mo
381.524 121.908 380.755 122.718 380.755 123.724 cv
380.755 124.746 381.524 125.548 382.474 125.548 cv
383.429 125.558 384.202 124.746 384.202 123.732 cv
384.202 122.718 383.429 121.908 382.474 121.908 cv
382.47 121.908 li
cp
382.474 121.577 mo
383.656 121.577 384.595 122.528 384.595 123.724 cv
384.595 124.936 383.656 125.882 382.47 125.882 cv
381.296 125.882 380.337 124.936 380.337 123.724 cv
380.337 122.528 381.296 121.577 382.47 121.577 cv
382.474 121.577 li
cp
.360784 .160784 .27451 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 13.0.0
%%For: (Bill) ()
%%Title: (Chambord Logo.eps)
%%CreationDate: 12/8/2010 8:51 AM
%AI9_DataStream
%Gb!R&D0%#6N@q`5*T@$;+uX&BIJ6o?1AR*tq4p&lc1l20mVmM8G0HN@:oVt#)BVNcP,do<?b^t0!$q+TeViU-qqdoa<=*,t+:&#k
%!.o^l2_XUVh7^A0qtA#-?[f]s.IZ8bGBod'3JJXUk\pI_mr*Z%rHR,]/ArCPngoQ">1</GL9e199P8EKB7+rDJ+`7'qX3UkL\n.<
%a2e/WiVqg+kI^]ibIcT60#)8<\_R/RqJ`tEoBsTVo'0$<S+C"LY@$-+Y$^$Mgg323b1T2@r&$_<LWB*glN$rcpb2*=%e&7ZJ(_QN
%Ie1b;pA7AZVLHc3^:Jc>C07rB3L/M$h2D6Da/Af=G4G1[F;F/)e(jpWXj^8FO#Y+cm(R^a[ei-oEVFrImXBT?:jfeQF2Rn;00_`u
%s%dE5_ibqKVR)MbAVn$5pViK^^]*&-If52\ZBi#Ts$Xp""DEGYs1\9+hd1eZoD%rsq/g\-pWmZ%rlZK!rTa7HV>R&^T]+c,mu-n_
%h8T%GQgYD[6@ms+ec,C:PF^Y)S%!o1nuL1C$N.Y1s%e(N9*a,LrA<I48$gZoiSSW6muiY$jd-c#,>*SDmD(aLs2)ljUSBJu,hD@,
%f=,Z/QVZ5oV`CW\]UQ`2rnl;6nH57<*m:\cE)uSAlq1C*@[c;Z/o:b-D*3(2qYQcJ5Q?-*pXbaMXrin9c6&Xl](sst6D^f'?)*"$
%qsJG%n.0_%:Q9,+E3$(XYO::Q+,"k1o9Y5*E0I1/s3qh!]6sDIqPikKqnkKH_p<PMAAA$7]A$DRn#mfSXi'hthn6Y:qq_5>M<I`N
%A%rSQem0Lc82Fj9mpb5uWQj1Pj*GI<kQ0RFcP;B0A`N^G4PY=2F8,9uL=EYEq_RKFpq)<N2e,q=\6J#)G(-m0s/kuZ7CGqhl08&i
%YRg9irNA[ddrb;aYB5`\IJ<1'p"e^=8/GM1AV]CCRhq(Cmk-5b/q:T>lVcHbr+5W^r=aDAeGbqMr)jC+>Z^j6h]$[/nb50+\+>R9
%cEmHBj\(%TT9Y"?V;S7Ld&[p</*5kclZ?F[AmNerD?'.tF[`WZ75OiLJ"kVFO(S8P52G\tS,FCF?G=?r?bS(FT>,c1"ts?+7tS+@
%//ZKrnlpKV^RlYtnJ@X&?MG2Y0JAotr!nq-T4ijKiD7bTa<;X8?MG0u@8ck6>m[d3CJ5(bEpi]-^mGp-'q,I6BSNMF:UGEC&hmN9
%+to/r=ph7uVgKu#QO*roJt7irjDCltM>W-@Qm;Su=0doCF8;@Z*<(M$R%pdjO@DFR*:YD*_?>Q'n>@H@&H5'RbRo?I@LB^QE<QH'
%BtQ^lNK\2C"@]"IRL/MC2DTWI!0J)IA7XrZQ;*h#IqXH@)NS?Zr*3hd^W%8`-^k@F@u`klq&"UU%49^k2_MS1,ik.DK[YpONG4@?
%LqKsN0SO?V>?df8i$YmuObJ$JhA4,n-g7=nNA'*\#P*6;:Q_!'.\&)+0*IFj?Lg<hjg"^ES+aD[hQbCc=CWEYVqW70SB0"]2qcIu
%X)53bWr\`LSG[br`6^B+D.Mm54q1r[J,!5:A^LHdP[BEbjhI&@kOH%Zf07M`5iZeYY?(IEr%7q#Mu:4=IIou.4$T'=NPFSi(GFk4
%n[JGJ5/4T=d.giEqo(5LkOH%Z2td2Mc=7=RVl[*"Cd6&!Qt&heP[@b@^NfSFHo\CnbKGfidJdGAF!L?HI=\$[S+G?_F&C9<cXHjZ
%?9j:rg=E%tGi!nc:KduVp\Hh\\YtF.;"sOqo?^ls,T=cQ;fNngO!]$^^F_8AFUfs+(W6uZA)*F%44(jZA8XfFrOuT/F%iZ/dNRQ$
%)QhE$NQ4i\?H/-=(N`=h<.W\oo`A7.`8#DY)1H9!"&`&:.C?hl`sX"*rn\#``(Z$?g9f26\b1H7pHem*PtZ_a"CR%GUs&A0T+dnn
%<VL3hq;rJ_<2I3'L88T5j8Tff=ZRGd6Jt3/^3#8a-G&:$2CDeA.L=10gl*liI<M?%3qCj#-ce&&5k2CPne`;sKAUmU,G?eY>pb#r
%S[A%q6@%rtkV$b<7B2lAQhu`W"'c;Q,EQH0j0:"b$0_T&59CsRV0*0r&*#sQ*CNiKG:`Rl/q*_W/i8&Yb'0$0^2.pG&[r(YYnm*V
%^;8S.op;s@qf?T/.;8me7dHl=s%\bgEt?,Cg,%B&Y9P><,DaBXIPKCnfKput>qVVANk@;"OPD3`2lsG8cPm,47`!q^DECqlQbNKP
%/K(Ef-Eau<?+m:X,W=rXcT6B=,!cuVbZ;6eZ])0tjFTrh'pZAFd7NCc)*\!T*FD4#M2Xlbn%5'a?'JkD)jn#4]9"18iWWnb7UAAE
%E2cNo>nl+5.V#\$[?%>Hb:^&=5dc$W3USuT%6i:(9q5n/p4Y3f??r$=$F=nuTUSKN&3?'l&ZfL^&cX?U%EVEEYDTV^BgZ@_37BZn
%DrDK:2_?6p</TV\kLgELGt@g9A1;)9.d(BTPUtS,khsgpJ+KT:9+u4<pDBG?7g66m/V9Z(lsQojK[dP"G77MLmZJl[[<EVB8LqQR
%\EL;D3plP<`eL='GR:d(n\XqQ@QUdnD;+tuH84>-Bk,Ls?0L2B8RPJc0/(bf<r"]RDLWEWD6<%+[cdXDJFmKshAdK12`:\r%aZgu
%2,49?"dcS\Nrl?uBeRW7NSj_2M99O?R.`NOe%W/?jc^%)nVPBErAh+_]+tfQ7FlV/XEqM0(t&fl^\"7KqBG#%4/Y*j54>/$1N)#b
%)l@5d$G:LCq(>6a+M8^(1U#mWKD*'nBqe')_IW:%`^otm_Il(Jn[KIZ,9LYtm8\l*pk\";s(,?O!<_FT?e;B]KAmL5e+apfkg\R0
%oQ,sDk$FO1lNe.JUj"Nl7XL;YSFkeHeJCO[c?22PI\*>*4QlM!\L'cu9]I""$M)'Q#,4[12a>J`Q*CPg+1X5m\mmks$g#(L8WL*9
%0e$nI=ZH3_%?B%%LA"j!FE%DdmW7&kfI#1UXb_tFIt8BDaQQN]'-W[C2V:kdTl4(>2VG$5rXdPW\-71Ef#V>@I`VI9/S#]\5htfd
%Y,sC,VL[$U"DtHo?KbdfPO#6;*'0\jHl`IsE%c;o(fOAaahl+([WTe*1=GCij*'g\=ZH7qgcm(?Mcfq$Ppm!ZR@r-]'U4T-T(:<`
%Lb`okrbp!OSKsl-r7iUUL$s$nf^Ce?RinX[rSlLq03^.TJi\+.HYh$0jBT\Wmi2mU"a"i*YngWL(VS9S(0!?ePNCss%bkb[dhf;=
%nai-Om^X-cM4A-`\8?Q>=-Z9@WXKO]_TX[EA?m4gHuALZdCXAg^<8mQ1PKOO@[[RqMRXM_BX!E4!n5Efq-LG)I%k9L,qCco`O5.q
%B^%VX6C@K%YO:r\Ce=<_]e(i`Ckn,VRrNhmcF.$Np$RFee:]<Jd`:g?E#c?L#kk`jDTa*0hN#?f>ZmhCqjf.7^+c$6:/1jq)"Y[R
%^B8(MpH$sBs1MQJASMn*jHYYKZt#ZmL%$0m?$LSpDLZ/RTR7XufIDsEkAdToaV#QA*j;jcR`?AglWc<kSm`?]fq$]n@e6Ri.A(Os
%[/Oun^6L2N6R*u4lbYfkd`WbG5IGDF'C(7F&iQJ8S;DPYCYBJNc2359)\hqPp%;Nhk"^!.GDPqVG$R#Vi%7IRgM.qjK]GitAK-j"
%6ahuf/aT5Xe%#u$Y,$D6TC8E*UaJf.Heo[>/PTOjf&O1X;4mPdNddcqP5]blYVJctMJI$E<>3^Fp!Sg%&1hb!")?@q#'oF5HE,TM
%\?ETToDRmm#jI'-20@Dpn&,"8l\u]'QjEoE3r<fdD'Yj=O9`%a;nRQ$rg^.K?a./VGj>,Z.s>FU4f@1S2q[<Ld<ZtVY$kgrjH%+m
%:?:7d2jeI2a2V76F^rXrB&+%[&`E_.gK^-6r.(qOb,F)%cU_6t?lN_$Dgd$1q*d6%S2k76C\lW+;>o23@Ojd:InoM9ibSuc-rFs)
%TqMPNrjaVE18m-a?47kl/B"m6^4/=#n>=k5S*n;[<OdA!*!gtQ-N2RWChm2u(LoC5iB"gG:e2K,aDSYNbDW&3]TsGjS@a(#5HWJB
%0/f.HkiX4ZdqIchl.#E5l"-Ip_e_2X(YA5aY/KCN:H@m.IQteqm8E=brg_QeKc?UdJiECX*Wn%+TTXrd"aG0o9p6Y/0gA:mg6CPt
%^l^bQZcpU&:W7V7qG+=X'&1ElaZ-H(,tCb:o:bhH='9>jS"+nEo@.`rcuRo(EOZtm'MRj`^Z]aF"k5Pq#K/'3!A@LNT=Vl3r!rJO
%3S[hm+c`=iBgC0hop(pF`G[3k>&V:<CbBV.m\dh8\H9CtKW)80lHXuD&E9e%9e\=AlXI,?35E,8;Q#lfX7iTGcP:7P;u`QhH+q"'
%XA37A?!rMI>D#rX)Gs%@aRJ3"\A7h?d?pbER3$Jj_U+!Zr6N&lr>^X=7#k6UPH/bN)L_aS!(5QQj@M+O"YGDE;!"EW":[?_;70p,
%'&+6r8%$Jj`<?Xn`%qq5\dYCnT$B7M=!u(o8[&bYFD<NSqu'0E$L&&cHX>*4`)1p304.=&<^RpdpuXGq.V,lid?J5!)M('oOVje"
%r2IH7IGkCPp(k;E/8-J@V8b4;@5q=aM?R%H^;e#.kD`jcA=JKbVE"PKSL`21m/h#Iei&mni52uA#n/K]Ni<kJIb@#6N`Qg<]]^"9
%>f$jX4h[)!$ejsfIOCPZRh7JI=,Q9Z)rtpdEVBZ/AbsaOr@RU?OAdJ4B4!jX+7?nohi8fR]<AB0hS&lmAC;(Zormi=#<-itCA[O^
%IP&<=^Ad]mY5Rq[*q%q!rT2iopHSZ)([#`)?XN99]R9QnpYp.?pZCun4,(e;48G[<?ep*J^pD4R[m0[VQX@G@I=6UTH+`MbH:\)1
%kB-C/LWc_VO54_\s3()c;u9`!j'Q0,]6V!eS?BRolJKM8Dsh/U&+:RSg\pR>rm6eW#5YAaq=B@hq;qo<88nF]!:?+;gs5Y\LVqBG
%&!q4L]=E6js(?f<#Pu6FT/5iW_r\f/k_VO4^V@VBT>f/Y>d``KhYsMcEVdWb@iR&L2`Gr!g*bZ8KC\cGDil-Vqs(f:[fE2b9@r`U
%n@uL4k5O>jnHP]%\GQ:%E<"K@5_iUQ!WV]\iU(8pXi'8Vjhm+nk^?AbI<jMAh3#&gCil/]DN`IA`h38&P;73Eh]^tTl2:W3^-DLE
%n*^4'a.IN>#@_oOD8;eBqXX?+pYX`/^Ugt(HarLYT6@t`J"4bVRR>f:J)mmLjQEEFQn&gB_ceB4.[N09'l@sn<'YI2\<ZQ=9Cu_n
%k^Ri<TDh@Xf=s/pT6G#DX5-#=o<`l9j7^+B9$9H3Bp]/trq=AsgAS*)$NBQ8m^niMNIEdel]cZ`i2eQ[]^d.%k-Y+,Y95M0r"";Q
%:Rthko^nl["f<.fE&jEWYP_PT,Q93*;*I.$Raqcq;C\&ns1i@moc60G;>\]!VLR$0*WQ%/<&^.'"J=TN2)@5lCM",A49KKj-5>8/
%rj83jo($bUjK2,9bL_4IhT'hOKQ$i)UcZ:YoB"MPagV*1m3'7(5AG,,hC1ek?bR@&mtCZ*AFccj\./2'Y,aDT2l_B^aY1VF79BME
%_-:Qmcju,/8DCg![Ih65R/sNPnDhb.=Q&c/]`S3&X&m'MIrkR>?iTN]Mne$gmTP782B1T5k4Q?alXn$6G;_X7Ge!Z)mH-WH'\Dd<
%]:6^-L[.$='mDn>AKt4T2?%iH%o\1sro3shHi3a;bD4-QD%c'52F9J^Cta>fH$Ip[itmauBR&.IQaTh/*k+B502JUF<3AH@8r*;E
%5@)&"/2CAWs8IY<i9M=goF.?Jai6.(#lSPajte@LS,Yu6`P8#niT!?%4Ass>^-5eOf$=&\Q2^fS&cR*MnFQ*5?S%l;%tigqcR[iZ
%rW.his&9d4q;Wc[9'FX1%mQ[bs"!dPD_V3qnG1sW.mJLSk8s\Rs">M:*tL;3s8.WB?D?Ck^V.?DHt:t"5ASO$s$3B'01#--C&R/b
%=SW1WXa*KNGtmsqe,&[\S#>^=CMMSo#;Nn/e(HL1jce0jmeZ)#mljAfoVOj/#r[6[EI\"nRD$=aC6ll?lYiAj6GmH\narRuN);lT
%q:5GULT>4AM"tI]'i!B[+RlnSI_'pUbcUmFACc5h1B6MVopL1CcahU0Q"a,)p:m*3rr)N-j3>9rp;K8plMAcM]A)/?I.GU$ORlh6
%Yj2c<#$lFV:#u.ZpZ9<cj7UmH*=G[:mG-7DgWMO!;P%^.h-N;El$34k^:f"WDKgB9Z/&8o+2<)JF/H1;TW@t-_]Zkm06cUJT'gg;
%]mP4=I^o4*lf2<tJ%>"(?G:7iH+^\9GG$>SLk!e4o&8j+rT1qdh%^:?*2<nFf^>5(P.)RU_tVcpqsU^1hSLH0pk^Zlh`Vutm]Lbp
%:Cm2Ll9\nT7-gc:^H?q=j/^)BgP.N0%=d%o>^q[c6:SoKkI:9JJY`/,pX`JBpCFmfQ\WbrX(TN)Gf!R!pSYY#X$8JCG2GoFl=4[L
%)N.lb?12)EVTs.h9H[-N,bXn8XrkFEM^ClU#'1\Uk<.o<Y0el/+o:VpVbQp#H2$s>U&4:!i7j%Q'@h\h:Cie9O)H]+m_=)*)Vr&?
%bgfiL`tXjNpDQ3KT5<gJpgiE?m\]jAbXU'c=iN+S[=?eQDtf/K2c#dDD[n^%n&M.A:S#Rc=-n-g^:X=:HM?P"gWh+]8YrVn/i@6M
%Wtporp&=l`EREZjKAgaRW)r^(Dm%t[,C=Suqt9p:p@j"oES%#(DfdX\otd3.C%f0`QF!P_PN0p%h#P4bnuGRYU2>q&q:(Xfj?FSQ
%`6\GErq0Du8o1jJ"`rJeD-N1CYMWY.@<C;mnP;)^?T2E_Vk8?agkY2RK?%b8\.Q[?*e^9ea8KdA[s+4k.?gmG]DEa2G;j^[?h]U?
%I4Cji='UfIWMgIgfL&F%<DNPeK6!,l7;DbepEC_eC]rfgc:IP.=E.l4+QC^aF!>9U_G@oB]8+Qg2qU4e8u1G9=.c7r_,6gt#\j5L
%8t7egIeS)E8\:%GCccoVru&0#;Hc9]$r[+0G153T%qjm2r5]X>UGigD1EkLR;DC:OkYH>DrEutViTQ2XlYkMThX"R`hd&A"I#m+V
%m&%dhc5<(Cli$)cM\!;N+RpFsfSV0IPHneYenIp8LU5`Ib'k&&LGrl?&)Wt,*-#h+?Ks4mYh:7c:@IS6%DVo[qJ>iuE:s2THm4QQ
%mN+SbdamW]l.'Ym4j0/KhYud+dAb;"2JT\Oop\`7\pCkN<m&/$2g8&1D[tOPH+),\]@VIKo5fOISfO8W3.,Nq4eB@$_%utdcAuU^
%fAAL0mJDr>s0:h)]-g)H51\p/TOfaJ:5-kg_oM4BORh+^`+PRUSA)Ua4HYH6fjEU-D6<-e8C8?lLAqPQXi:7nX8>]#Gl/B^f](/f
%cVlAb++@Zp5J28TjEPlmohj\`<gS#SrRgk,AtKdV=1;LnI.7_[?_-T`nbRCWC<[fGZhpA%I.`Q8q=9%7AG:NM^oU]ED]eD^\`l1+
%5!MXq:p+a5&UT]JoPD"],.j`GfkTH/Xrj8GVFtS+F[PHiIaMET\]+>7gUD)dT>TLJA+B9;-[V+i)(e3@^"3d.[MtJ*D0"R(VpB;[
%eE'VsOJ)48edkMkTuQGsg5D0_dlR+"Rr9@OT0Crr]An(\g<+?:+)em,o1k&O[H.1u<YsSi>C,H1BZ&$6f/HL7QQHkpBIf&`Nif8k
%.Iea+Rsji12pTIj7FQ/>^IAh":[#ao#?Z\PU).!^dtHk-pCI:=BB'LZj2#3RgBW[oL?7Cbm:TNAg@/Tq!nH]2*TE;*hc?J<\Zae7
%I\^gbWi)>aZ1;N^5Ki_5gU9"VpELpPH":na]P2#e:UPOgq0\gA2rJFqIJNC-0p3%<V<oW`00Z0(O;FP:pgIt!I]E35>*KQ+^V,$i
%e)M&&T@)@a\kb9YR"%Ts@la8a6gsE[2tqM<h7PSHDBTZ75I&qeC:\jTZA@Z-"*Vc'M3-Zsn[YOSI[3*J"XW0ll.#+kHp_nkI`eVB
%mbh_05r!i\r;HEcOhkaPLi;\GpAIMCi+RE9o\Bb"/EbU@HWg@ARIdRS#<kc.`.b7U)ceLh0$2(5QQCY-Q)2?-cL$Aqkc<<"rm;Nu
%]aI'X]t37W],f.g$aBZK0/)$^>ZuX5>0Bkl'Pq^&1@$FfgaBKiJ)S<8$M<6/De;(do\]:Y1&nG>eBI"=5Q(>t5Pf<e>lK4X'/G%R
%bA^3I8EPU1]<!^HDa8pQ,M&*s?^YgRkP6[)pA(5EZXlaOGH8NB$&^O'*<7es[$o>+>io=Nle*6b+Rq!81%)3uG;5_Db\#=,NH=tN
%`j6XWBomEPl<8B@T,?-;Yuk8;OO*2k_W^B61^dqhLtN4E887BQ&-J_jBV5km69/7k(&Vibe/FF=cDEM\me=Fu.?/Komp7m01q+W#
%quG)-5BpQXAQmC17[/H4-4=5'*p76#S#4jPF)#e)ES_>7fpZ]Vo:Su`Qa:t+j+`q0c"Ek(^/_LQV>ER%Ygg#!-L2M4OL2.m01'F1
%dP@ooXJQ]O/-j,@EWDHS\t'0V1k6%3[D^T)!Q`d)IBU-mPLc=nr<(f^/Q'cA;N1lpDHl,C9mp<nen(6iJ_G<nDGu&Rl"J<G\ZIZ,
%>@/*aF0(nj2&=ik^[cb[ZQ'N$`p\>^g3>b<gg57AHktpZ3IlOBcMEQe@u#/rq_%1*lC6&GEpUnCV7q(81&DG&btJ[n@Wm%E#;qXl
%n`k_HdkWP8V/g^bljut9%eTY'"8dO0O_oUGnW.#UpdYe:ZSm;0I6&mP$0bY)CjhU\ah&8MZ\6RCc>$YJ?##U?%H;mpN'W5&EuMi>
%`?gYRN/e+\`oDgY>X7.'lpb(D*sioK7Pm[5d*V';3o\`<l2:7FGM$3ZF51NHlBg(:at"js<^/8)hZ1YUeM_MRB^DjacC-@h)Z[Xh
%Ce@pp`\)j931Fr)1b\MQVp_"k87&1EI;NZ#$b-4)/qFkZZ`l8(Po;TJ4LM.@D.US=\->7n;sSR@K9'V](TeG$?d`)02FOIqF<VL2
%[e686PRls.)e`Dj>PZuBCg2)j^pKCS-OV&VKBJ!5>ba.<LQ+G5#Rd;t)`O[o+Z:u/`>&p!HnWau:gfTsOf?I*`gLJL(Y#*jD62qJ
%A.Wk?W*0u'ZI,arY[mCUn7p.U4'`t7]f)-2K4,\2&J474=>LB:d9f8<IC(V[XDJ.Nd^B6aF!5(#1IYr5B5Q-\J0DDd"\^_Bc*:-@
%""J1QV8U[g[K&fSCAggPb<iYN>r\ADM*^VO`7r4A>N?YC68GtWVNk65;JgR*>0!q&`\Ao_QRE(I8<Y;l'sn1HM49nO,e(TkO\-=h
%:c+/!RRUZ<@^Wo$(:IX;--pdfg@n`R-/?0H[?:kR*gh9Uru)$Mk)B1Md5=RnD2'TN5NaA2"p>kWCBnB3YfVY-3^\f/&N%Zfq=+l6
%--57AgSZWbd&'C)(&^hCaJ<3]Cqd:%$>tr"D-]HM)>aM?HYm!ZKTUr&-:ioJ*Lc8t*FK>bp1ndd7Vlj!cSQu=;28GaD:U\?l&E83
%lC'ga\5G8E+$c,kS:T04C(35!Y4@%52I"l3=r-J72QsQsW>Il\_J8,6[WS6<)i$'[526-*RlV!Fr>HS"2'"[&I0;)0Ut*JTbM_G$
%*4CAC0N"H>l[6fch3rDa;1/nSUJGW?Q&`u=5&$b/gVu#jXQ%/=)<W@G;QXh55h>5e3C'$X=gqq3=6r>k5Kl)K21@$_Lq]Uop3WKo
%kkPC.5YM_#Ef$OL)Lq07V)jG?O1!Y9S3Xp%@/I>!<_rmrQW<C)g*daVagK+98<QF5kP"@up.\am)@2=T_b+.<&NHfhdA55Xen_m8
%$;D3l;3$n]SWV$_BJ2YgOpkMZS-R+s_lBtWP6LQnrCY]I3ic&\oi!1g#.@Np;aYC(([NNJpL`KJ1ef$W74j"_CAVJB3Gb)g^bnNh
%7SQiUamXuE%HpbMp;I)9gSS3h(&&j!!^W@;\C*>l2gs*n*_sIec+[m]#`P'=2,^+cVZD3DlDufGPK;%[0hp-l+EA,!)*Q=-%)n9\
%_J>j0DoU[;;f3clkBY(JClNroM@DR5Ou4`5Z#Ri7nl6B&ZSWIVDk4:'6c'be@1gJ3:YY`Q,nJ-9OSk7(M?"ujk(,_#Lp_A'"c+'h
%m(\tU;2g7bf'`:r^PR6)M\Wk3)4$7-F49+\)PX]'!#VAoU?aM3roiBO=o_H\&+nSDHs6F^>5uiL?H5`jE&/i0TeI"/`:f7N;naV`
%Cp\,N<<dSU)ec?!Lb8aRIt:`9_cWtl:/`m.e\odTXW+"..rH'H&Vf1n1_ss%PV@RlHGd>s]A[TOCj<_2Eq!NZO>-S'4n^'+jooDP
%rlsT,:*QjFjm(Erd)a^=D/o,hSf5e-m5]E_?ii`?%L.Sck]d\kCXug0[UWmtV^c"58O+3"Rq$Dm<KL6`Wq0AJeeId5[q!oKA"p,7
%LH4&iR.US,UIL':]P_Bj@'a10O+EDG:GX=Oc%`N`Rmc%SMR<m5BGl'3[aRX`PCfr?j/d@`@A),;]n_0U"\4?!<>RTcZ;$PtmajYC
%%e6@^5i]n;#9)?g9!gemlNUs49'U]DCKN"QTIdmF:!_Ar:"!j(2+V=j:fn3C(/7Mg$G:H2D;4:V6]?eU%:/8P[!GFU8Do>6d&"U;
%(UnL#l8HZ4H*IRle"m.0>rlrO`J3k+$b4GX5@)\b4NIj[L!g(X,"F,ANM(4^BOm;OCZ?t>=^9ufcLWSYRF5]tc;6Va`\Q-H!J)AC
%c%."^g+f6ig&fO7#bYIY/0Zj=G])\JCp^'m-g:58aY*h[GZ3t.[:RtWZSi&Y=]Yme7(FokS9AjSS",^T7?+9i#)gj]X]6[=NV%)D
%QJF"Q35$kk7<._a<(45F1c.8[TWC%=*?#LA<b.\/!:a&G9-qkG;,,IUo7d"'d&bJ?9TVsX;VI8?5p/TDRA4_.4"@@,>O]O>ZCY&A
%f%n-L[E>2BL\K+h5g9C-2p`F'$$C.i8<]l,ra.sSAsk<32/$3Y!l`b\D>&8sOM),*NtHnfD5b5?5]A8TkTEF"&`O4r,?Lq?Zq&)<
%#LBmqAXmS&=JNigI9L(?E5U]%=Tu+%JNN3DGRS%Ys%kd.dhU;]!H`20q1<7=S'BY(C)*REVKUrm?nmjp;jhp*DC5Fjm=ME,C3(m_
%MgXW(FHC+EX=K?<",K)CXugl9gI+[R.Q,+&OX:6V2?$-l;6NTCO"GCc;rcf?6HGB[KM9PX\^56s];Xu35GFPHRj;]A5bS3$*H<>0
%`l)T+:3FqH4^(kI($lC"X+6#ZYi;HeVs;R)'a;gEZ"KiOdWfbuRe2`eeYHqJr>'LIE;#cRDq6c%]S+ZO*&%s%inC_)!EiB,$=40>
%_mBpGM2&S*Cm#fHV"hWA"egghbJ=;4+P5#\#S==%"25T$nfmeYdVQtTC.2e_M+k%2.hhQ-R(ti6MmKH)SE_@IS!4j:-"*+7>(O'g
%op`VPcGD<8[GW7:6WkB?O9\N#nOZq@L_Zj6+OP#FiZLtL9tElW.ccN-oE"lVGe=Z7e!(7%-2;s!@_>NT&l>5Y$;BPH"+(#2O*.+X
%s'uZ>dJ59HNl^.[7@dVk_Vn5gY2WHXl`JQf^.4&;aCaOQ!S/gbLfa079_i)3K+-24E'S6R\1HW&N0)>8Lehmp@X;A&*Ym?3TtJ0T
%>4<'&W@GWcP8Q@MP9Uou-oP<R%;l>O1@uFW=iSYKm?_qY2$0&s[S+V=f&U5/BbTn.%.b0=i2G4%-4OMh?dp!Hk"K/dRNZOSPpA/!
%=N-MIZQVl$E6rH"75eALZJKHHEnK]IX[0nIf/FWkC=kiAZM-h*E[D[7@6Pf_YB:u^g*1pmJ_Y%c_QX'Fdnknc^#I"PPO5`c&G2<?
%mADdPNi;pYlni!-*]'OX0.F]Y]/E<#R3^_?r]s=L>.\paLf'Dk8SsW3=b@DCnCl8e[L2Dg0^l6!gq__69mZ/$=5$df3AdPrEGdNl
%<9dT$C/d-9JhG@_BG_Mjed@7ug[V-qF:d:Y,2R?%X1%I"86(IKW.!;H&0#op-rZ$\$__b&a9BiI6(+qliP0,^A>Y^*-L,#C`9lX5
%k+0JX4@KQI[&L'F"pYcC$g?&>Np&b54.T&C#k6aN6,MJt>NTL^cps:(inSDU&1nU+CMQjMijk$5F?hYhrnD^%`4rOXEgDDpR<(_P
%&=PAi2$ko=3_Ib<iaINR29;&-F@4_<ZeOI^qNQLrLMT)a#&FDb=aO6*=ClY#FpPeN<L@e`X/7B[A,^RoM\?_=!%i.9jAMQ!<Z-:C
%moF1o!_s5u<SIR*cCKdL+Q0L0Bpt'5ZO=RF&I;8H5WM6K*us$!4Xb9#BP<,6r.Ug/'!&N>Gli\p4RhFeB"M#&'nOqeT!1>8f)u\B
%>^9/;i>,,r&N%sO'hD>&['@#5790Yp)]6X"8f(:Y)dj>>:tWY6DItjp%Vfjs;U3+6,8A#2)J?k%-U:?/.pg2`c2g(:*\/L&UG_EM
%:2YgSiNAu]%MC>"I@;QV'>j$b`*>1&;.^t5J<8'L5J5%?1a]NT=b)=X</'[=K=V%pnpD\>3p@6P@'(6tgDlqZTk08$&kuhG6"GP/
%"@,`3:/qclJ>>d8=H#9-jZCV1$`=t&0M(.Hi=q:TOgZt;d&=6$:<)ZIOMB::jD'3<q=*1jQEp`p+@6pi[M-,KJ2?k!JMi7U3C9GA
%;CJc9<?_q`d[&=idf="M2$)-M2N]PMrZGfOH4n#^eF6pL84$1S-o7qkj11EhDJFQmTIDu=<'?1IaW=%K/Y'#O'!\>*g+g\,,E3pW
%)<dCILWt^TX3='O(Ej#%S=#uM7->0oP]&9BSGip6?k'r4_?;CK(^%(s-jE(ABO(sh8ioX9G]K77Rt3P-%XC<!iX1l,:abao&SMI8
%LS7W>i.*YBprc6?0XM<)KcI'XjE<4[GVhe?)h=13OFTuRM+Z/1p>[XC[3\mWkS5h,][1H\!*Rsm<aL;j0M""H'%'rbD?uaU-W+dr
%$&[o7UBFX:]4VK9[1kX6e6q7MH'L;[+t,n!L+m"c1M)Gq(oQ-i)dQl;Gl@fnDL,)4;<Ar"b@s4@p>Aqnf*olhQlXP4[^h9S:/d>.
%bC\rfb']=^c,c<A*?i:tET<j$@J]=jpk\b"J;mP:(MOJnW%DAH$AF;-,7n`'e`*cLHY^>j.^ER56;+9iU\^TgeFn.YMe!Bk$4bg5
%QD8JS7<<8'$?272%gnO0,mD-i?5X4W"@A?e]m1AdAd-f6n[MsUa:Eu/D775.:0CO7"/6hq3&3O6j,*-<C050D#^J3[f9'aY2odJ@
%XH)U-3=hut9hjmllI.Z4?3sRF#$bLA9S/IIo#80II2^)hh.fU!d*fRI$#%70:gPsU?d-)a)+u2\Lmd2V0L8T'l-5D4G+5$>EV;kD
%LQ5('l*@+<^o8jl(IudO_&m_S^P[+JB0*;m`A^h>/dX65VrLdiIe6cs7_g!sB-Nn0J5eZHE.3-?'SVD8;$tb;Nl]S9#C-d\>fr9N
%ARcFH#TsHL7Z8':>AQT;8'm>1&rE?Y0.cVO!tqB?dHGLm5<%W$fOkPmH>\O@Zph'R\j3D"")KO@'MSr"Gd*?P*5EEu1G_uc'G1D*
%&m(`#0q6[`Oe]7?)il/oW@A9&A<O).-YZ8tTFk"&YrS7MhcOi@BFY;[@hB7WP_2KlC77!T6cakcOG"i!od3([kLC/iK"!^M[h&h:
%79`0](KWN9.;lc'd%*bG=.mJtJLc;B<=lrH"(c)oH@j>=jt5'@gcS<&2j#^@rWVCj7cT(=5K;iJfkrg2h9bN#2KW3ENeolM>Mb2&
%.tm)Sa\^"F6O6dn^[=kt;UV4mEB/RYi4Am4#hkI-T]8=gNG-K8Em.@NN/:YnYiLcl6M.B#Ab(pbJ7L!$R8@r9Q$n#T:k5%6?jE\c
%*W;JC*G@F;4Kp^-blHm"f3sGbM4*>79&S]$U?f1]$,h[um2Qs'!f:]&5t(1nAWjALNT_l!kmN,%i/0KYP"j@cb9indr*H]:@MMB:
%I1h&]'^[lEj04.HkIR`e6g;9Y43U%i#oP;84V._060J=q,j,1.<O&a*Up:<FGpU6m>@\1`]K6C<>pnV1V1`""*CS^ed'kbSU^iDA
%>=qVbKq,($N3%g:(P"7laMdG&AJVHpfplahZ_$^<<DIX,b@kZLO-;R:',V%pp'[Va@qHWFFKO8"P3rSK1nuE<)rZt5$j_WA-Cl>g
%M+!mIOpjin<^bf`66cj:8o\c('kPPI+HjN^K1J`<#h>4R!7B@ecb4_(\Zh+b$!*^j9"7=q"XXt$ZB>[)R;k$a2I$I-Ih?#f=<^??
%%DYm&<4YgnZ=Ln*mECi8M[GKZ"k$Z9oE<#l"VBpH&^a)iELPQ@78:X5._]%b@OT((5VA-(5O=@IH+W[LWeDT\1&%*F4%2$2E1D_?
%ZHXpUaM$3lJ08_R[qUs.$l?_3gCYLQ`>MSa15r15A:AI>P02O1<ItFMIlP'%j>tY$OBPVpG&/,j<udNo"0=LUCM>.\!b;NbA2!1H
%D;St0Ani4cQQSK4V21<D5fl!BZ7#ip.A7bk/B"r,p#J&!>o!o&^hFSO^fZ#$f"i8;8c)n/en&+($SX7)@DG!2WrPB@VPfNpkHc$[
%^e:mGLKB,0Q8pD(!s3PWcYtNZMMUo3@']S@#Ls:cC^5m`LeGKo/roqU9NgD_DO1ZDYfqL\Wu5jp>2=dSJ?m.#Eo77V%9+(I.EQaY
%*pB#,!,W/""/s&2!?6e;0TRfeW-+QbUi6iP.\<\c1E_H)=%s6@;qY%]5c1l4Xo_G]P,o(TP8TUh&3*KZZ^NOqOf,/2fu=C#3CH.:
%2Yfco74_ZG$94tY.T3ZW&oXc8$?#mRjl8U`B#j=i84njb:C(KiB.F%!?8og\7?8aK%9ikcA<16$5V"/AYl^VkQJ=e-iP^8@XX>7N
%Bs]aAOMP$$kR8:5;unoR2^(-,E3aFjCEdiDaH!3/iWeWm>2>V@PlaNN7T$1KaCq/%ULL;tC8^uPp</eSQtdn/Y&]Rp%o-f_16,Rk
%@;p6TH8Ihh?]@OGo6NoZ6/?d<O,4YJ=BXH6*ui'DfXD@\*2FF@bT6]i1h+p%SU//4Bro%L]uK?,^MBo'+M,Q2&>ucoY[jV1]lK;#
%)3D=a43RomK!6KIje^#*Mq("f/pdE%]7b>I-*k1$3GM*5a&,2aoQBC*`&MMq)8F%cNWp_)@njosbI@^83,7Zld7e\YlcN2++)u2"
%-XNGo7KIUWqdF)UP?SQZ`ce"EOiCIs]/AKG2p5ghoWE/N+boB?mGCj1JjZWeUnlp-`5q(aF)7V0(NM?2d58FD/k4M(R$h'<*:5Q-
%rJRN__^m'$10*,DBu%qP!-6a3M0hGU\sV5'9!UP(3cn'5R"j3'VKW;S)9m]#UsZ^1;o][_$@Dk^dO+mlp6br#5>OKV:k[Fs4pnjA
%AkPZ4i*b"`)/!_]cJJUH#luSYM)t0m"X(HAf]Kp+Vu\pn_ulnmJ-S[7f"3h2EscqV@1r;m\sFCpaH2P@WM,0.E)E!S_gXkj'Ko.R
%!$D2t9q'W*$k+uKaUscj;X<]5?6Dj5G&)^\&Si4Xp2UROL=0\9$f&\#)>`J"OKSQ-4CpGLdhiKPL^(/V&"2BRWoI-M20fJq*'J1l
%36"J`.P9=46`OPf>p3r\Ntk,GfC12GhA@0)ItWjNA>_EN\n.&LSb&qCPmTNec#A/BU!Gc5=#_M/P=-3G,;tf8NdS_PpDql)n*SXX
%O816QWO'1L4VK./"n&[Xk,fbWj%D,YI18_Rf.`MFOK&lHf*$D@iK`IZ9+%?dL,WM1MUR>OK21]&?S_,A&A9W`r7-+Z!=T5M!!4t^
%n_E[6+ERMFl0Vft[cr$%HnXp1N81)R/7uH(epI;-j>%*^PMht\?3PZE+@PG,NB842cQP<Ps'C)`ALd#3,.PY6RjF*j#u!3:$AVWP
%)TM]j6Eaq3`PP%FP,,9q>_bgUQCJiAFitZlS]_FfX"8oF4lK:7NEb8;qd'q_">'VJ?&^&nh8=.e]Qu22i^0`V(9;_;ZaaOcD$4S7
%H'Va[Zq+ljen<q7.<CUB.Gm8R)iD]/Y/tYo8mNYRnHo/[/Iqn6]Um\9%$kSW#DG;tQSNMY@j`k>hs&dS+e#D\P.M.DP%Mh4k$cfA
%UoaCSEX;u;=QMG81K$2;N,")'%>S:j]rOI1b`(M\l&K@hJCk@km(a*ar77N)bi4m?ph,/Inc9be;0]\m'/-]0A4i"6]0R8o3$BW<
%'[5C=RIu4u8h"!(9SgsB,@iX$0QF*'UN7ALUATI#-E)Goa/\)H&EZ*9Pm'Q"23([]N$.!e:'p=7W#Kht$@k^N9(i1hjq!M-EOBK5
%EXE:[EEUJP6%FlQ[*VAG+;^+Z/U0NjDP3+#kI@sb`[E6?+L`a>h8;:S3jIcIUu1=r@QVY=PQ>m_#R=T[^Mi`TcQPb"B](:o/9dgs
%W*6-09W(1$MgNYd&W#+PXgEYnb>D$b6GB>dQrYo>N-38]Gj^K@r&,hYNs0;@:(*f5I9g&e7aI%pU`'=fV91BV_(+%,+@+m6lYpg6
%%6Bm*iAPr5VD.f#VE));,KA@n7^KA%N36[b3V&5*C9'0LZE9pT39O9H<g[p.]%'K/4:Cf<Wr]S)]&;k@:qi2H^C2"4kLJ[)T6hBP
%SjZlLG"Qr"go9*5\6kIQkPNtU?-q34Wsm$&cMomAAuHln0LK'(%S`^X5u$lpgh)fJ>Q#8)ZC[GT`b?VZ1ZO"LNYl@t-;jD'MnD!5
%*FU11mt>sZs+l$:aYO@mM@eQ@%Z"V^%bqc/kWmTk^&P5mLdm5*XjOBgXjO&q[76drf,C2>?#+N`G-,an@-j<9M;VT"H*(;gUGeN:
%M_bBqSPo.'R@";g=:2@?4.,>#L%"@<gsh[3Xg:(hA:i(i&80'<]0VR0R.^/<=*+V.0g.cq>[^sHR,s]dbZOo_]1nFlVdG;*<ojrX
%qG,dk56VAlZY1"Q$FnMl,"#411XQbn$WY_A0<@6+OBb*]g*n^J]GZg1C.8t[Go2n/9e%-BQ]u=)V=9f"/8,SpDH,ELBVHEE_*%\E
%$&KVS\>$!IkV_M_JJ2M5lfdg\5e2mXA-+!%PMeG4*Y:96!OV+Op.s,so2IFt<]W2a,SJScm-1'RZ^P])=D<=K0bt8@C6bo;Fg98i
%iY`kkg$?<4P;Z1BcBD`c>SUFScbn\hp"4GBLIeKla2>"[IHqgn7ZMrMC^SrS$F@(U:_k1?@ih5HGH*@sKWJ$q\?anT/Nf9EjgB,U
%<Oq8:mjbIkb<]W)";kQ9(?".O-&C$)!O&Lg*&4(-YAPAkH@^aU;QW\ZA#:^n-<$aRLIZV:%3.[6>XVIsNrg+X/k'eSO9?6>Ur`F?
%P9_dMd\X70E&Qc0b0%NCQ6m&WZ/u%^hQ00HF'Nf5g[[s%9_MlRV78dHTWj!KC[<,M:s7r#Z8-uU9ro?9a%`6;AH&'-WRlo_PdfS(
%PNJg.1's^2Xe*"DMWQd(G>9&]T-ROOWq3pscKbL]BF5Og(+.-G.$JTSct%/8*CN2@=N%;3[)G<FKO*4R1E[%i1hj+@';p\d!&LhS
%H/.?)i`XlR@otNq-7861//1l;76uo,VN)t5YmbrPbShU`F0j4-GOQUU\k_QjH(_5M+=6e_XI97)=_q=d>dN:+a'C9).`HJM2FZDI
%P%Y*g8i_".?:bbCAH!i[A\@9B5Z[%.+VbkHp79'>qdYo[`+iGJ7rjmr_]fu[4P/nS<A1&?>R>LaW)\k=oZ"/kasqP@\3H,R)0$$5
%lh*DeU*D;&XupZ)8I))a%(Tb#%"Wq,#@]<QbW+#*U=#Ch(nEKO8g_F4EhuV:'3l`?g3)An\e'2\aFk]W-ZUm[_@S/N;ROOO6NSVe
%+Xm:HM^+%%gr>:EDbW6#a=OnZ'qH362MtG8;)C=LG6!fi!/@Z'$<tU+.q)Ge$_mu)Q]N7('[ZrWSMSbV6QqW+<43>\Y+6mk+41Md
%Q0p/50J``T373UOa1g0\]`^-k2a`C\-T:;XO&@MqJDQ.6J@S)@">cfcZ4\:.$58<)R*3E[M?7"-%?;Pj(klL5C)enb5ElPJNj]T.
%InedsK&'--e9)N^giD38^u7k-3Y8c_jO/t8JISR:bMHUS"OSr9YR3`m#=;Lnl:qluPmNB*LrH3A`%.n6f#;VgB5\Ed.%d@u9(LSK
%<6o*aX-#tA[rs^FH'^'7cET/Jc@+2n/rS?_9sXEj+d,*dJ]=]kRYf%["k?F/%tP-_8&]V(+!q@5Qs@Dk'mZWV3ulEmO*BdN,bM)m
%FJ_l(H6uZA$IDO=RK-KlfF(ME3X%8^BpgkFccBPX!*&GR%"#0qo-K89Jd'J,8b%h^;D;/;k9.R3hp0D;jE%@JPSrLMBNOcROCtH`
%<#/D<Ec2`=Escf`(79RO"K(/;0K5>+HU3;k#R5""c6^=3^Bi<Hi=aKg(fla2'$khbFj"?V4@Nu7Ng?+Mb?KoH16n<p6Nn7-#(Z-<
%hAoM."G=W$2V`,u/'J.A]Gua>iKsgEoIDg2i\bSc5?cm*<US-;.kq+'4juUf9D-)eUd^:\n"QSK_243)J1P/e?`?9IJFq'mT&bj@
%=T+\E>&'Mud0URcQ(]Hneen&'d7GFAV\tOr.(40smpFa/`lXB@YgPi.YT(p>%6rcCmA-_m_DO:ro8qB\$P6>N1^9a88+a@T%k=W'
%*G%pH3\&Zb#4!K<0Q4B)ZL"J\=d9_1Y2g)0S2=#>ns,^'h,OD02C.UH8A3<RDiqskg"WsKd8ea!+-Zb%f-tJ)#87fqog_-Ob7b"+
%WoP%tb]/`,j?%lunI2)%,=_\[%gO"JC_GE3P*Is=khIr@/%>QA\rk>>8s^mG!MSW+Ac7IFZ?PuJBJqMa?]1b*DWMidSe.Fc-ZqI-
%>;pNaDh,OP<\n:&n;$3'oW]28TBQA.<=D&$=HSNcH6#\c5o3t\[!e`1O+HROP*D)<bEG_?Kb,GJ[#Q%M0A'AbgspI*\6Cl(IF#e2
%6c_,e"Ulh'Btsj!%EegW6JdT?!_LP4i!<-1_%f.5>J=2'5Wo.]F+kfcC[htL!kt#,!s5k+!=&X?-"_D.=4@SEe-1f28T:7KqphdU
%;;'?kKhPNJmmqIc_tr:bhuL)o"mm%G!@HShORWbamkb8:"i=9gSoND*[20MY*"X!Qm'khfP)K1LOc5f7'Z6<Z"AY^=g?g)\0MG)b
%bEmDd:jrjr,=9bA;'\KgX*N+P-W%6&KTRRgJG0@*C,fUfo%#Hf#Dr0V-IkIaXg@Oi8ls)R`./'rcKaqcMB(9]XSRhH2dEg\M$p:o
%Ml?!B"[=+C[H8hip]2Qc+tecD_Z#(!SW1=1-pV-!@K;COHN0Pj$k(CF*S8TJI6O48qm6g<+cl_3#uE%<ZkE!sJQWATa9^J[<"hS(
%bQ?C0Bh[fQ9;jJ.-b9.<ZdMN6!K&'*/koZ<8?ps-eV_Ep$Z]CN*-c+<F@6q)AQIH.)+i@EO[@S.*&M90D^gM6kb1R;S/qre9@gc+
%lNr]!9@Ash+@++[&]/Q=,g#%Ui^I>MNd?giH=ANh7Y!$J1.CF9a&8efWM^ff4"@Fb+Lq_Ye+06pJLI\/Jo<BPBVITJ^)Dm&89$/U
%_'BP!`LX#?GRW5Djh^,a!TGGJ4#*Dl7pbkU_b)uspZm0BI[*PJm?E&X/Qu?f``8aEVLTEG74<kQb:6"1(:0_8/!`sBUsMaraBNNV
%/D%?ST@Zu-m4&,rlfFJI+=H1).4:'-2`\]Y@$4`n@O/B"nek9_(c0R0#?Wer-Ci$`@4;eJO,s]_P&N(XA=scs>ghOfN-Y+.,r+Y%
%5[02"#I],4g*$8d;\q!:HWOTf\[kjAQs=?VQP`0%"pcDR3hgaY$6fYem/r/QOf`L***T$".h@<TZdcAbZe])@PW9"GC7&.e%G8/)
%%PZp<%X*W_Y"Poo27,.KhP<RW3/+0b&h71'O!Ua&QS&>g3;#ND#mAFCr%L^FBi:M+kX\;s[6r>FXn+*Q7UA[F+jhFdn/sEe3n(]6
%lIbPM:*YSCd@+(Q%IBQM-FZ[4-8G[tkpeY$Q.4pfU+pq"s+3)*/O16eIQA0NRW9/C5L\U?%?X2K-#?HkY"<eV>Dep2kTS78keKoP
%V[c+OLa9BsV#SE"[\JCMHr?XHCoaH&1Nl@/]P%kJ=3F/Bg.+-PA1^9'CVg]q<lZ0c)aY+r5g#oJJSe8*JWA_?=e^@`S7RUd.^'b/
%?^%`[:$r.t(\Jrc/D(3[,Hmn(Q[0%$/"/m0"1T&M,YGk@6W266p6Asf:&-5)Y!d)@]i]')(`^`NTVr?`^]q`DT8MpQ#)q[)#@s-@
%jr4S)I((1e.JNn!"EU"X=E9D&A/-kY-`/T?j`o?q@cB^cqBR#B2c9T"apE@C^d>Rja@+O(j(1p>'4dAQr$p!,_*Y-h"Y0Tp<PVM*
%E@2G$.m=gQpF9F>c]KAIJu#@'KEG4?<s!RS`"X>0eL"lZe:'%n9D2o],nj^;XGbG?WsRRT$)1NO6DAo1!c>CJ>i[qHP^?u's6@.p
%B(`=$kdYVOfhUY"f'j,"dKB<H"l;+p-*_XT,T\UREg=tanjUbLL]t`'aO1HD;8+LG+9mDHO&K.i?-5u6c,IpIH_n69M0n?@U(ofR
%UB]6gPU\t::#aqt=U?#91lCR_@fLNQ'r(D_<#@IM.hB!;JnbukFumPTg^Dba=^HS[jR+B1,P_XS1l\XN2=VPu;Id#-(.3;Eo&Lof
%#\Nt8K30%D';t_;d<?0t8`@0,8!Iu?qf9>VT[g0OT^jQLU99_eAENR'78%Jh'>>H*,mC;*3X3V59N]lV=QMFuS[YQY-*D3!IB<8g
%@[C9?MmY>R9?Z7q$p4]tiZSN%?:_;:S?3?#U%&-GFp6E^aZP@";o[d2J^LU/"F2@".gf\8g`.)1HR7dr@b/_s"<J7jc\?*>[TTe0
%n@Z`gB?dkoYlK9d@\s+iO&ril9OdYSeUV=I[Cpr95VJB,0Y0kqm(XXG3Z:+fWT<I!_X`g5DdfHJ0;q.ekH07DJJ@fM@6q6Lqr%l8
%BSoeD9CI0B*lf,9ac]t&_&S<^6Cku@>M/CHmj^<\P7$6)?C.!p91CXbJru6DWNsOe]<cB.<'-jVInn-c=($*KC;N4ThIajMarso.
%'lOs4X=V?R7OBQ&$D<uQ[=2)0;`-/lNC+SFdk.qN2$?:n_KDrR.5!1d"4W50PPE>+.oMoaWl*j&Cm(;V/PL:"c9T&DdhOu'^(R)>
%.o&u7mi]Cp=agH.'gV:Xd`g6(KK"0S:E7muf-O%[1H@UlZ6J(9;+#@THNK#[s4;!-`b(CWDrr2mj&LL<6HherRTfC`8m-daPG7_<
%WEl38=UolQk2ChMo<8<UAI1HFber:e2\.tg0G!cV'2Q49h)n(KSY4(0,SWg)BuHm<LJY2f:=kXmkc.T6`ZJ&Y,-c#U>dri=,!r>:
%[V%0g9#4Y;4(3tj5U>VbqbXr%i0?!3.KLd\Y666\+8-k*N!BBd;GbU(6[7G=,gs0]XA(]MEsK0Mj/UWZZ]pIo&GuNn+L,*N\SpUt
%%fQ(&+:38I0;qRa>OlY!..`Gs,"2m+8SXb,,!J:4e`C$FT[\_;<NZX@7"2HJ-._0=h+HN2ibL_THuX8S,PJgRC2=fMed6at=H]WU
%]EH*\R)B=M5VUunO2skc1A\O(c#(B/_4or7S5p>i<qEE/:?uUZgjfK?GZdf_p!Xd>1#nACo+B1e1n8:u5fnAS=osUWK+@G#mm+UB
%d<><K$48hikb`80:1#Z*NFp78N4pYAChBk)_eSgRR%I.#/O$5N;:M9.1]5b3;M&./Pi7\dOV\rMXnWg^]K!\XML7(L#qS[%`kfKQ
%)\"_\b/5qB\6:kaL!sfT&<IJVQOl+#-M8^Q3<Z7;Ukp4,Hdt)Z?6lDf3ZO*MZ7rG%o#,9k=kr,Q,SZd"=]9qKOe."6.:"`&Q<B/D
%X7KGI-G+o@X]8B/9'7U.6eGjJS&FQul7pTA[$Kl<Hkicb-Mf.!"ZHl`/GFHq"6-%Y*U'8%"))hmHN1ZZ=@^81'^OEF_IJ!`rAKka
%gL"RX"S.nI3[t#=VLI_N2hHqOB=g$SaI@hqh;':)<EZ%%Qr'^mXWC@IE^c-;LF%"NW,*Geql=r-NQ'OQ(*&[.=;AA]q&=Vh-[d6?
%<?u?#Y#CY>k6iF%^b%!\a<D,[/$6fe+=`G8RS2%S1Bj$e21]N$k!LR9<V8JqTI`#BHh<$N7)GJVC@BZCCur?[*hm?/'YZ2i_t83[
%M7Lk(cln:i=0[o*,Ku(J?LF(Z=XA3^`,/_ag^0l5aGndU@"DR'>L?,P1U'tO=0DH+WIbD5l"d=P#7#5K3OW/]PF_bs=8,3Z6=^)4
%a&,nBRX21Q^;Ql*I_fETa5@'.3Qf`Z`-(#HdL3]s&9iZ*Q"R>GitM^(G]W>ca.td(5'2c<>$S+dE'nhjG!-,V,[`3Xe77U-QDBLB
%80+\Q;D682m_!X(LJ:0sQ\T(T3^\f\.aQMHQkj!+Uu!plM8rcR,CI#B!2&^1!K(QB#o08m.gu-XEn]7)CmsGl1DEl$ER>s,'`uSj
%!Ng,-X]C'R;N=W$5s-V$Yt$UE*)<^ooi\=B1:Wrkeg(F/Mc^e$@eYaKa;5p8pr(QK%^TgsW@G\o&qc92js211;#(/B,\Rl$-MbSV
%I";q73k@XNen5mt34UO0ih`!^fM;1<=4$!@M(0Aa[gM3&.0ejC'D.>#h42QM_$c!&5QGf^IH?#_-_`l+Bl(fgU'KOC$dqk=)$'jL
%SdVIG+Reak>MrRLW@3(-AoO.K^f'3DGA&Zh8/B,jSuAf&-!!'Ya5\+)*LL?&a2HVd\4JL1Z0-_-1+,?4Csbjbfj<0BA+jN?&J:Rj
%>0oSX72[daQEZ:c-*,5%=D/CN/p_/tcgJF^Y*P"j"7e;`/L8V.KRENI2+l%;WfgmikO@7KVdQ?5:!]&%MC4U8cFiW-A8'lO@;-:/
%B1:p6'f&&<Eh.g9=*5*&#>S*Z3BU+AGEn[04;fVMIp%)?PnOimjDFXkRl9ej0Q*S9C4M^*QUYl"=X#,qBI<r9U6(!rTeWE4PH2D]
%`iA9eKt16@s59"j*4pntja*p`S0UITk2Sbi+<H.d2g0]gD[(_6'(UASd0p*#E$L<#!_0Lr_LL4m9Nf4OZ#XC^jgr935V31g</OOV
%7?*YM=bV5E/g5>X0R65&)TA?WZ`&af6V&A74r9g_K<_/\0h<DjI2e#p(A?q8)1.4(<kKi]ORYq>/$s3[,b#bY#cWbY3K-lsn#jpH
%,-hphM^hD'f]8;!X^P8>!X><K"0%&sFKk>KSb5`;FE9QK-.L2.c]^KOLH[!LRA(K-]R\HeP[2\k!eecQ>M<>/h$\I/"$dn@J9?Zo
%3%jKKj[(4Q=2FVA8WFr_Aj@n&8:etY<4#*ciN<;>erlnZ`N\Q?AVNmMj](?/9-IBJ,P)gZ1Me22?f@[fK[I$M1=%47rT71ecXq18
%,EA;hphrXc&IZ[$"X*G5E(OJ9.P9iiUI%=:3mqKcg8ucW*V@/hjI!7N$S#N-X=0P!?I@!pII?L2i[eG@Q1&fF#It,1jOD!TcQn\q
%8f<Oo8"L<N$.\%)BaFsm!Y=("'D44c/aAhJ;.!<G.@AP6[*#I'+jt^Yb"nMUE7.r:n@/UH2$lO^)U(%=U/;fNG@3q1$`,R\<?<-m
%BW2,Nc_Pj0Eg.j8=D`/*6mBbpA(>Y&C/#.3Ks9bKbca,?H8:<0e_f<ucp@;pQ:Mf/Q&7]N?1gdgP=^'H8msP,jl*kb'br)lm[3%#
%>D5-ZLJhG(jEmUYD:<0<>D9Q,i1%iHY0<n'JLdch$qM)ENupD*?]u\P68<k27]nqt8Vk^Zk^]^9-ArXRYBn$Fbe$K%9i\TS^\<3*
%$9L@?#a\adchXU&Y*lJ6lea(@@1Ug*0#M#9OhU>'8"=5&Ku:P`H6luR$!6U7eglG+RY8bDV?5jpQta&^GegP^Bc#k&65L1Tb[F$J
%#C0RDiB&YSkje&pW,J..IBa7?3'?Jh+f]e<K`M8$0-HFM_3hJIc2\PQCO)W;9!F$<)!AP1$@0r]ZFn0<TEX]4ZS//AZOR.jC/G_(
%d%OE#Y6*dqhgTU],_B8DH:aYGdQsn/8+XXK_Xn3DBo59%P(7%F)8&UGSsKIJ,od9,OlEHL#E%Q)\L_0N/+eAU/""Jp<tZM&8:$HY
%-iL`RX:^.bdd4HHaaehr0?(=R%k\Fsa@T?9!iZ'-Z@A+O^a[_2Z/\c(R)U4#J'@2s]Gd:7FDE&k8nI!2%3Q$46_cDUKWqD-i2foM
%C.SY*nq>][MU1d+ARub,+BNS*KQlTa1O0ORo[EnZ]FHa!H9WGAP6j;,F1A;LO\f[DBj:k\h%:.=E"GZ^%>^X)#:@*k/U(-h.pP#d
%43!th&=rbFiN(fDC5,X(\f),Ersgm(H<2-_P;tZELC-s2I_VmiqGo5odEBsh-t(":6t-c'4F9W`YC/AQ`MHhMPHH%=@FOrO%:F9N
%aT5Nt)gNg+VZCc>%Ud?#\f/(#c-S+n7qNMm;.m)KBE^jhY).P/77*d[i$[E5<HOYp#q"-f-a*O+12C@K\[P`oo%/6R&3o)6!ec/+
%n#9fG1r%;XCQYkIX!VnKEl^$RTDQo2U=%1M*>!K[;Am4O2&gu97$l%9G@NafkiAY_,cTX:OWp3rWt+YE)K6g2?$4q`-Fd4RN_Dp1
%:n9bLI@!'H\0&l223Nm'h&'.J8#?BNe:I2M]dl:ALO7JP)hhNGs5CL6f*pV[VCM8A3lI*3JK6K2C*8!ga.n&9d95+O\4<=t@+qj$
%gr,r.)$cSb.N/jI[#!Z7SdH,&U2[i*B+S@ekSpXO)o6Z,!'aS@Fd/\gJb8K^Ncr(pTk19HbO[o"#BKd1cd'ZFV)ZP.iZ/ls,44S$
%L$mRPYn;Mh*`K+0UX%l4T+:D/)/rtp4UoVr-b*=P<L!YmVNn+s=R9$2]L^;Cj2-/_eO.gl^Cl,IE0BeXUE@D[KEZ0CK3X8Ije\s(
%$pjZIB,l8""6)ci5XVVsV3l1u[TW0]a=?&.>?QPWOCN1D8C>R+k<[/kr6.6AQM3O4:IrAnG-F=[pO$E+>E.D_edRlHq/g6;C-_^@
%4&GJ44Uoo%BB[qe<<gl&Bo;;r/NXsj)`9Stq?SL].X?3;F;0nWKr[g9JZrIECg-3UaQ_TAW"?;baHrZ)Q+-!_<up9i*'cl-FCiOc
%b]..Qoj=F#7@Ai06-<5M+QbD^P5-VHC34tr`aHkpSE6cXp=#fnMR0nQ'V]ah95M4P"]mg!hc5I,!B[N\e[t+6+&?j^r/:?$i4+Lp
%nQ%`*:T+BCWEd)&``o"7KCG^\]*$o@"W9402nHlfF^4%o!ug)i/i`I9\dlX^k9RUng67/J!=.!@)I3g-O(Pn)HUF[0(tJ2X^,K^Z
%YS4A&O]Kbo\K/W7h1/YW7Rg1TmSflJ70-J1%=H,F2'%L9![s,[46h@@bRN-cZ@4jkgUVUU<BE@IGc2,%?1T=MU+&XpN=J@C/16'&
%kRhbF^>..LTYO.THG(iCoECk8+424$6P32YROqFGa*#oU@mgQ$`(!g_r9537j(b79W7Ho:+[FNnK+1?qo>$Y'eFGhNA3)Ed@kON$
%KY7,b<6%E-=)rSWFkT<[+uKU2598a=lTiG2qAEBW:[Vo21F`Q(&?gs?cPLU"-r?^1&1:(ToR*X",2Tsb[g8M3@^C32';ngK[LkU>
%L^&o9#6J\<"SAi:A;o`&MHK>i+b)VpUFi\5b``!Gl]m8,7<$'L]s;Blp(1#M%]i4H928&%<>lB@\e,[O,-QFTRW6g7HA;)L!.ObK
%;lj4g*V8:tDK^ID#89[]^rie/?XT=E#D.SRYCfe,LcZ%O'$Sj>4b0l)iioT\au4[R2I_I2_\FfnlC,O<8<M<3)A"je!-Z;f.u4&m
%*&fsoUOttX<T:_.U$+bmZH,=:22P2c!V$<V5cacB]!=HV0qq!6JsE@m7r>]W@g&s8%e1ce?q7;BeWE(fUZ[.MaZ=Na6?H]9n4<,a
%X9%i"h6MnG>)K"t^arJ3\JPOG#AH-.5t2da,]#.:n>e%HC0[f>?6gR4FatR9"$99/dm3eDEdm-Imj:%@ET4;mp,Wb+:tK<d;*)W?
%dt-eHF'TN_f['k&!5C%1Bm[3j,iRAJe00:V%d\H5Xubu@1\Aj3@J_5AL(\0&?<9YM&@icq5R\=(=k9scTL=Ph#b`,;"'G6a<UX[2
%8or^G&Ij=&;<<2uNJbCBjZ;Z<2dQ`4['ZTgprWI3dLT=H%#$[GJapV8TE/1<SWBJ^Z,TsE"6(\H5WDbHm_*h`gB9(Bda:pJ:7gnt
%\n5(HH*/ZMCo6*@L03oE,C_Jhc0DLpZ:,7N<!!b.e2JKXfe=KJQ2c,0Cd;t&72$RE0^9SuUFY+l6,pq^;'G]GYEIkMb@lW#aEY%t
%G;UL\_uV^57TUW+j#M!:T`5YX(c)%>7HkP?3QOoC<4e,\I2EM[q$ogX,q%S3W`grbN2@03@:Ig;BSH;%F""2h!V(7"5f9YsUkisP
%[Lr4XQ7n/;E,$pJ64Y,l3=[0Bf=Xf:/e"h@2B]>*Ek;ruWB__]<KZau<E\G[b8AVL\mniRBf(bE9)%Oa5hq.tfFbHm#4ffUg^*lX
%b=V,+.KS+rc83"aM'+)pK^]30]Rb;/FC:<_9Ze;['e*&E7T>0V+Q,DYd4?Js'7.<82'AIj*S:ti?$54hkIBIN/#!*k<"a6gW[!f@
%#7r]?]/N;')&X"!j/W:o?sWG;DXXSLnsr1&aG:&JGq>BXR&sN0r;tEq]'9hkiW'm+]rQ_^nJjJ-d*]Zf$(V'Z$"Q:P,k'aao%g%o
%<$@h5*Jgp[1(8J1X=$#Fcr#T35TH$%)=H=V1qTmp`"SdG%C+d?5lQ"g7iWYW'6T@5[mIR>&g=RiLs=0`[;ZPX!LM[JUtN+d2A)T9
%gtLJmI[JoYG&B9nkj4^Y31<-=c*!i3o,);Z%&M?I8,IOS7r,<C6t1;DV9cYQBJ@T58/F3oM:D^`]K<4;I6H3.U9Ck]d1g&aO&fG&
%(3qudG$PQ5RsTo.<kT`qqe1!hI?1uLaF3,<!F,/qLNN\sHJol&?I*5?ecDc@hNUcAJTrXP=Vnb%ph#Z(fEYB+/mf)G\4/H`7,Q=@
%\D[Y=Yj+AobYKRq;>)#uK\JUEq*gn;0c6d<r-3HbjW[>&pmE(;d0,Hc%A*5E;tZM+`:Oh;UE%NTg'9#"hUR/O\Ta^?e[mTTO(WZI
%jg1a38C"iTC?QH.!BLduBR2ehk:!fj4+n?fVgdc)@+Af[hGr"hb%!hlW.E$*IBH_<MM846%WN_:?q7;BeWE(aj,p1Akb(bS,R]0V
%ZP4rf+:BUK/2Q=7FpIR$(_H,sKG;G_'l&*A20j9XU+Dht:jk-!dE9RTAWY/m*S:t1Xp4I;F7^H&r+Tp0JEpOar4(:-RhNm7jn3GE
%HuW&>LlH]MOBG1??cdL!7/i`^O2rgQq%70SAkA6IrU>JqM:Y`@l`/_]:O&@rAm<79&2<K68Y!X`nCEKn"pPY7\5AF-=ct#S8`-qk
%"TdD<&P*@Sb:#(&D*Zr,M;nM%>r,(9i[&M(99DIImg0?8Zdspucl5Tp1N1?b#<a`)e[6*.KEm<[ruoSU`8ei=YuiW6)PRBk6a\g(
%\5EG"B)C'uA5L>JV\/E,;Q\=bI94(/k*H3gaXJAE@k1&>-!8V3f)Z'`31t:!+Ve3HR>KstS9\a-o*hrr(,NJRbV4h7N55V%4GUY=
%+.rC?d9n2!5gG2"91ORH+;0biSkTXgb(.$?JE.g74WFQLVE+peo[jI(\Ub7-nA;#Vj5=I;LP(QM3hR%<>6i@#l#sY52r8B7NiMs`
%-aDFhJ-V'L9sXjH4N1O2@'@Y<coko2`c)q8Gu%[+>57]XO]TI.Z[!Q&j-tkcVG/l9obN_#pCso7R=dT6*I.(*aFJ<aQuhm2>i#-f
%!(^tmR\=U;ioN3C#8jf(!(e0^PL.X8Vc:BVNqAJ?bS&2%E<7V7ofg6:cg3mOU8V5-q%6&>E=jDda`[B_=f)B-@CBRS5/.=F0:i53
%],D5m?aC/$95GO-8qJ.t.Cj.nkH#b;maFVM@i]##EfW^9Ba4t1nB-V%$kC,e@.p8oZd`Sp>S8tg&rX[]&i-G?$2CSthEPfZX"(?R
%b]-4QhZ-6<O9g2"<S899,N=RH&GNan]Z2rf!/u0sJ:TJQAjh&O*8Z#\h6BLoPm'2+Qc0Bo\L?<WJi\l_hD'7.OW!"L`OBl%q?2`6
%bBlLaClTH'Edq`M4c>KIQlLX%dZoBEN0'cu>NU22N"r3N?t:a7%nK#P(_C$1L;5E=rQ.H&DZ4_fil1YBf]j1+BF<*T+ltYb\.*Er
%$.1mJ8k@JkD7GraY0\LADi65g9abVi:Zmrn@kgWq!>p$Rk,E8>Q4uol?D4XXH-sl)e,WYC,5fM@MD\jA:d5,afnAk;-u2+GG<jmU
%0=%&9nrY4C0#:']]:e'oDar\#V=,]K.G*I-1[@n4E72u48J7&CW08XQB!6CYW)UWEP@0lAji2Wr/CJu&E?bbWZ#L,WU__bnYfW&^
%#d]*h?V8<9(6F>4,)Fk3La+FqP)(LSXZ+H3GF%/HIjG+M?CU@7%mlJcXP%_U<QQ)tT^D2nGD_mK]]s4aLjU_h4E4Tt[0S0<*9()+
%n&=OuaNfY],Cfu0OXmM^1rChAN(rl#]6^MG<J.*K36qN0c>0+<0sMQH!5UZUnl19;M+U.,J.pdE<]WF=(>^`gd,5nmbT5:Tchibi
%&"k8d.*70XNCM#a7nO]&Qdc_D3,5es?6W1N?4^;fr%q+-Kj^[Y_LW^D$Rg9Onq7_P,%=U\Pb-f@\D\o8?%u&#oCEs%P=BL^9Xt?T
%BX!b9\i;\`oG+qiB]uq(.LTd^NWFp6JUaMQ^Z:k!UcMQ6<L0bm*>'TF<3doY73\`ApZ!\PS+7H3=nn'T=Zo6;_\DKI9`I4AfHkh@
%(SWK_;'(\@N4H8E<[6Jq8eBeW!g"4i!FTMWfD0u?NOLs@$]n>[lg/VpDdJ/R(VDlkb544iZUPHP%umaGbZJ$c,:4k,c?UelAQbS;
%]^ip$WcQZIfau@5\S=\b0=2<Nb9]3Cc.<EIie04u.Sj2RB]J?pfun2V"_=7Dg=G5r*4_E4G_mH94>"4.fW\^"2sM"pA0IS5^kRKP
%XCWodH%U'=S\XB)_.e&oqde-8(h2#]86b^<%/Yct4bA9)MMZVr(dX>:Xh[eU];TLZ/\j<F/"/2EA]eL)^DD:Z&gauu6tVIa&9DC#
%<kUPN-r5\@8QR;5f$KNXLcakOeuha"=dlhR"F0%6CpaT$NXO\?.ucc7FP>dY2'j[<7&R;.-+nuAD$H%DB#rH9f-U$i<IDD2_7NEE
%k9[]M:1DRfFNKK2O_&OD"T>A*(KE4\Q2Y*Vi0;&eeQnO"Qm$[%9p[\-$?k[fFGW0*iV<4^egdhR)'eTVQ/K>J8k)f,Geo#]7B]>G
%+SXlM._uh]]K0%J@p>d@UImd><kIh#j9,_*XiR?LN@KM&KdY"qNb:JG(;21`7@dQ'<jJK:0]"Q&$=L%%cfn&2N9G?ilHl;fY\TQS
%IN2W>\_">31$Lu>+I4=bmZ9Z)UG=9Q@,0?!&cc&CT^.d?\^r.+%%W=.-($bb^!S,+Aegrf,lkmEFU<B2o3rYE_H.6?(oXboUEkC=
%M1M#B-$TfjXMHj=/;rV9b4<-e7[7B8$t=?Z1@rNUl;Yk3]o7uU(J$<Z9'/R+J\!<s?-5SD&Ek%9&m=%hP,.2uLR^WW+D02Lq`edh
%jg"\ZS=XFq?CTkARV]&FoHBOQ3JQf%O"lI^eZ"aX<>F<>8].1PBnn`0RCFJ4R-1S48X!*^l09O^R-El=-'KaH]fJF[4]]bnl3-4>
%lB*u=YTTgXBp02U<1BNn>+CY\#qB;Yae'5Ee`ug5qPQb48:,K2hG>eEUJB5gGFCGT"I\;%:[^!l?8*+;Jt!B0<@RCdm0Vdb9'-#f
%.&cTfWoY1RJt'5P9n$N_4DTO>B2-%V>,FCtnk))F+_p=[opuCaTKX2u&"[o?M2.qG4,9N$N]9Fd$W5KS,\QsYaY`f]V;ph#M6#9@
%SL??:MWW!c5V8Q'SY<?T8aSWqLeLKp-Zkrn04>m>6jbC/3"/TL/n&aIG_1Th(iMWo[+-V9BL.e6QF"<_2afU^)qrGY]VMfY/^OJA
%*kJ3c_`<F6PNH,1Ak@.0k\?F[-JJQ6H+Ct(Q)$<q_u+b2b,/<W=*><t/"#fum*HIFF0ACo;)o!XbPajOYq^7qrJsI>Y9B0&U!4_\
%&CEm@^tX2L6Ou"1R%iIq`PBYG'L[Q%ZtYg_Tm?9`="A@JW\D.F=hLU6H)eH&JlXARd`^j1A@7Z68OG9(g"PWuT/)gqeVp8t&$:!o
%MKl5b'G3\_0@n3#GEqn7L;@tjKCSZ0GIL8aYb6^`@Rq^(9W\'2AVHjb.<t#CRtB-ZpF7\sY"/oE:HY%\#9[3KGj'n.i-7VtUXnhg
%XAAU#P;k?2E9)_h]rYdNS:Spd[e7uq7ek*<FfA!]"2<A6W,5M`djNiP2am8sA:H&fJ_hdgFN37/=!h$K<6WuC',4B07I2$A9m#^D
%j9.>-\`cZsrc#_`6$d4.,t(ne7C?&q-E*"q;kY_*WYM7_19ilQ)eFU3Vo]kgp#NcCZ89-Ak`lH\?e;W?kRnRp>-gF8UMA3idT2^m
%%HOfTD4f$VF\/RL?05$dE_$sGGJ%#>\V^,+c?\!;>kGP;BEBV)%jIX5PJ'9gBo'@til`etm"`d`(^o/<8@=pd_00+9P%euZ5cOXI
%l>Y$A=e+$`X&Vsc:tchB9,iDGe;%&#k#p-Q!h=J)21t**1+,*f7)ca2?O!B&%AE3Qkq?lhV6"so6=?.!j<6m9Q8SG99oWn7O!u/L
%Aj7\EAaaVoh/6Yi9V=&]ok4p\\jJ'H,ctf$5^$+kgI3%m%<[\RV1FegBdpb6FP,Xb1oP[_V0/gq5b4kN>*K5L`'rWp$,Q/gGSL`I
%@nQTkC-`4j@;1#Yd)&__o<`1KKLN/e&e#=RY\OeCj'a;L2*tMl&K^4+;gD,gYC+RAJ=CL2JW-d7+I<V5f&.^58lOH`Hf7Jcju<FV
%8G,BiJKF8[^a@k&)_p(4!=\ZO?k_j+fI#+KYS$-m!$OZNImdpr,7EG`1c>o7XTL%M>Ydu%;ke4$D;Z5&-)loKrE0apBLiF?[*=fI
%42Ea2jM/.@VEE5C$:[\p%6=sZGZHDE_rmuGI,T2lef'R$?#XdYK7Hj.Efk!"U6[X-Ge@S#'A=a0*Yq&%/05eeMeP@`c@E;dW`3Vb
%(Fr&Ml3`<f.ks13o<<4SA%([L79sAI8k#c9A_m)33_O<IlSd_Hk`UqhKq:<[!+P&uWjU$s's"IB:=ia)4B'aEnOYC`<iq>lHL^e7
%jAO,V)U+N*CNT,bMJbc?QZrSi]:c08OF&9VAS"b$%Z^XijauR,Ks+J$p;/"iVC\iAMuo-j=E8[cW7m*.PiuFg;HKt@MX0&],VdEQ
%:.68ndBk?Z\j;\Rp+&eF#hNa@.*EFC4!f-;::2:2)W,q!XM*?;.7sepSl0nG#:(?C(HtJ>((j;';LGGE-`onaQe7Is34$8V![XRo
%'(0a?1FYl">io<:-7/N!haCjUbcFC^9t^h=nf\78bi:HOOd$9bYD*i'B<+BY(O>G/'s9O@8W+JV0S9HUlWt>ug>cs/0K/a>!FKPF
%6SI-:(jY+.;6.F?QK33L[5X][@JN_^$s0O[1Me\H8(.4l%QU)5PuW_%W4^>e/BXu8V2JTca7cQ3V*%:k@U<H2=>RU'._S.Ai\-R4
%bQcQUQ"<_hgSe\47fR^*)MOJ9BS9B'dgp74FPp)Z2Bs3tQ^kMuO7KmV+:jD2?7njiRAg*#6eW0!>,6?5=H<dB1tT!Ea>93.Hcdol
%<(mrtH#Na5.81DII8hiX"oB`$>A!/'(Wp`B]:u6kP6iFCT=1D40'F:\8eTJ19YhoQh/5KW<!EG@hdAkaK<8^.gC*f_'K``,-'9cr
%2C]'@9E?M=gWsOZ#8Q"ad$$#?\<.3K,XPk7a2BPj48FKT0h%TK6Oh9i;U2'QWg>L;eKl.!q?c1Lmb-E<X=;)mM+8nAd(M^W)Dp\s
%Wa<t?]W4B"eYI1q7F!1hM9UVh$ssOU*r.3[X@)jU>.#'f;@UGF-^l>fO\E.EX4'"`Hrn"K-oqYmY3\SW?$k6B4;Vgu>RruDFbi!q
%lcqh8ie#lMR"EZAFmV4)WEX$CR)qG?m^Mpq*P=aEj&"m2(nCe8iNmpZU?^@S!Z(1&_-%9k,AWlo$\P;4jtuE9[E;TE'R\A#=h,V#
%r5kk5(r;d(),Cqa.+,>2E+Y`<aFMcu`5V.<3<;W+D!i`eE?k8<VpP158Gj@U:;a0d7lfen_F5SfKaY/<FmU/$mdE08Nh0&X"&(nZ
%8Ag7##>0a.;Pd"S8AU^XS8XgqJl=_-BfWYQ82^n9'89Ro;+3[C6V60?kQOBdl+dj`n2A.B7>F#cnN'&"*2f__e$*MNB0>'N)*,#K
%@Q[=](Q"DfVO%<]jBhNc@2\PW5flXdhkGLBKgtP0UFPfV=/^\)Buh.-r>es)=:V1RV](3`B`lEmPWO#F>rV!^/=K;g#u(eV)QR9]
%A_.dTU/ehBf,#3F?;YETZi5,Cm9EO$'IB(_-c&<g^$Q[I[D60BG.'emFf@>6V"c#^/h^D8UiSM5,%@bMI/k:U=a%dXb)'iIG8C]R
%FP_T194rRg"q+*p^B"iPPZ:d-,$jU.WSbumiiXIi&lKlG^[s&o6,`?$)Y%8_ZB])F_3N#ae"Y@&@kH4]0c4"68qc+J0hR]\<UQt"
%9>_leId!=e"WeBA^J)^]MluZI:DI\bi#D*sn7S]R)`aDu+'Y+6H%KceCHM]g2RKH2_pab:R.M06$1al;i%3[.W't:jAU-4;?P6og
%+3m`i4L`<H(P"YK!O899P61j3=)5%6Q:^A&lLsYQ;TQk,1S?LR49T;h7P-AZ\qfmK4Q;Kr6\)$"'NLs=">u`0)'gRc6,[B:X06Ha
%=+)e4r%KY9ajUM)"*rZ5OJK<!>ars@`>\o"(I,u.LG0jI%X*NY`tLh)o.iP3qQf^%:\t/I;1GOu[X*BYaG/R\GgL#4)G'lDccOi:
%FOEAj-Bda:)Q7^N^Mq4/+Y-UGln_9!^6OOF$OP.$Fcef_FC-DV*(WhLCZ>NDg',1^lKneS"`!kocK%XSnl["hUFUJF[n+qPZ>X?S
%1;0^h)9#o&0\OpNes4do*?uK`8phJ-=Dp*Z\#rKgk_3H3PT'[GTU)Oq.:5]rpJMe0SPed?:SmR>L=&\e8f:nDLaPFm#-3Su?!2#K
%7rj<F!/=To2NYDN:?Lb#!3a8^+[]%;[i:tUW?m.[Q5l/;aVTk>\pCh6+3ij"BSM5Eeb.DmUYtHgBsHF?O4CZZ_\pD67]](cNd:*Y
%G_1D?_.I[nNb71">,@PQ)[7amP-(5P.!Wq0gIs^Ic1(;R&q*h%ioWIUqGc_CBsq*Jqg]#.\!#\"Rs!MgVrJY4(4R+1hCGheDLbog
%[Qj0.CY?jW"n[J,P.+O^3@+6/3'u!Te%6N[;=eo1XlSm58h8\W!>V8*6hR'/1<b)0-PP8dITAtpB(d7DASV%.=dWL6>DLG$Gfr_R
%ftl_M]UW5&"6(]cJQhQOpLMfk*OQX!nI2PIXJ=X!3hG<XcBiU+'k4lL5c[l-7hXp#Be<qTOaFo?X*Df8N+oiqAt0\GRp&l6i_$sH
%TU*83?!3TM0qpsuq$"%NXO!hhFZd^>c*,@M$.+6,Ya.[f2M]kjFkH?'\#c(F[l\r3<A]6lVaK8+44">lNh3>rXeW?lPkbK`dEF9d
%>oc^[U\``doZUE/f%UX1CXti<n5YQVf=!n,k0)ZQ2*[NnUKNl7bNR%JUBKq6C$j[&%u]8(Z2!@E"=OBpBeU+,*_tk*=`Sq1C,>)T
%e8hsENIuF1XJDscA5p:6=UV61hlLM5MpYO[ph=rF<5'A9=e/beAVI(2+aAuY*I$i6G_V\Fc^Nd'Kii7P5cn)1kH,R(ZAQ(5lASd_
%I,S;LMTXp^TcD.lZD#juJ;hXS%]FMg7o*=Ler?R=%5K>8]idk]H9.JQ`n8261tSMeGG(8&j[I`\Nf(7TRo/qrKU/F)h@+-I]70*Z
%5BR-Da]mAR(:\Ks.7@f$)"goMC$Y"oDOYc-?]*BB^"i[j:bCPni0Bp@bSK_s3DR)Q[hoIU3P/l2+3\ag)8OdN2-;MVg\\8P[UV:L
%BEVPD)U/]^dFIai2p36n6K2Wr^g=&WO`I&bH9'`2cDZ$s%c^bXY*hIfjgm4gB)WgLKl9I_>3OP">6#GSQhmr;.#`\;p2`>^^\5nF
%8ZqRMm077SC69:L]</c@/Q,l!hXH5;i?`!6<c83?`#iPr%>ZP63e19+[Wg70ht@Wk6?eb>2O\dLXfIXGqW0A5hY,V8TED<,D5itY
%CfP<W2P]mrpl$)Ded+^[Gd"(?1E_/?*@Rb&HU#49m@^mSe3tcFNFj2Ll0)YuS#'KB5di_T[i:u?Ws/ASJ%8XfXg>[r\1)f`oE&4\
%UR@"9d?=T9h:E.CWjgPTYAr<PlOY?[Yo:jkk18))"?5(A?^'BkIK6KN/Q.INMl)iI*OBriDkU;&"K6+50;Z7_3lK@Z"0M([kXs%R
%\e,[O4%9hJbrYF/X5c3XQ9Rp@?A8&q"12gN8BIr:'N-F7U6lTWTYBnIhH.(/V)E,=:J:7aFbm*q3e19+f")cRDf*E&iJ3;XCY"X:
%>oh72Zh'=<=6Ce0FJ)X7KrnD?I'JR;K)i(D/W*lRjBF2S<Z!uBaT#>n[B*Pt,M.3,rBj=p@VFEBemiK/?[?*NYQm(2As2JUCq-t/
%<)q]JmsWcEVtN,28BA-?Ft!!K6D5.)r!jY6X\1G'gW3/&/\\7Ha]rtTF>%'?J&J0hRL`bHIVtf6efn@;;:\Vg[I"lNF5t"%)I"qZ
%%1jPF&ELS>pT%dnI-Y73pssLBKXmLKOj*KA;>9)3VMB(N+$smWGL4QTE:r@o0dj@<FV=Fc?g;Clal'$_mjf1h81qZ02(Cj[)>A"/
%W/+K).d"iXGo(TV@r?\^(2=.6f$=d^c<=I.1c#%JY:Y@j/bLE/nln;3W&^-g5TqS<7/uPFZeq2sVn_p&%!gI:O/A_tP0?pM8P^YV
%m>npmT/UW+2paR#nPWk3kV3NVn*21pgKrr14!he3/0g!lA1PEI7Xs`uSGkDr>S4Z&'#ct9PfQ6UPqfa4T9'3slXtg.Y81>u99$$i
%BoD^W]ZeLI[s3m#?a<3\-'i6Xj[c+q%FD%l6^1I*7ZNA=b<:_4B$!_hkKr$X\$\>-3g.`K'g4f,XG'jlY@O3R2H38t\"MPDnCs1D
%W7`Uf3Kad=TQ/kD-uo$=r:jJ(Y"EC@=5/Ga9=IXjk)!J.XIgGFI'rI-jSKhX[)I.18L[Tqi^j8?a[WT/=EW/kV4nr$bc_$corX-m
%l<DT^&=mB#Yt4$"];U&o[oqVFTktP&T^gS/q^1L5%<W<VD)^%-82f"b0LRpa/&4HG^(!q/I2b0rU=4fGk/gkR(NhCk2X<TQ$$FPO
%@K"ECo@8Gf0JhGZ;liZ?Mhb1%]8^?G@AFZU'kBktI1=PZDdAS@hg1<;kVP@W4)U;&"?i#gC],GsA[fM]BO%r!U<q<*q.rEd7!hQF
%bDdOOS#]MEE[2IY6)2,9;,2HW's<@9Io.b[\ahB<?H1ap:HZ"V#na%<Z3hX)ES4fLk*)</H0\8j+rLmff,92<GL4&.AsBbJa!bjN
%4%6O/Wg+r1X^0:SY$7+UF[[d$M(9!CWPuMjdXT0%CdX=QGRL/'K3g@*m'/FKmE2.C8L8RS$#`1m'&H*$!n_%-W`+a"EkP2kX`3#[
%IuH,%4?!VucOD^sg4#F2</GG=a!B57Yhf#MHVI:Hmj(8\,DkqJ5\%EK8^;MFq&/`U]i)6.A>-PjH7Ij]`l%_62[N^Q*Aj?k]Zd4]
%MK@I*3f3DC%Vjds7'^^H\Qk@D\H3a-b$,ZnPdaNI!bh*m/P?eHS"-AXhR<.KIa@4Z5<$r&C@P-6W3&[jCuI[uaWiUuihc>PG@+/>
%kQY+h=]?N#nC9g;]QI)sGj@@.UAI8S/<ZFl0']Ep>Or@3<PDObJPK.uN;(;jCdXc3GhZXu_o1ZYE(6PALl6:aWrNBan^^,hj)%c+
%,.b<$`?L_:a@&1VESK8qbci^Yb"C$#::4.9,U^_se;LmoE.]B;C<c"g5ZenLFmGd[YD>I1StQ5`lr(i5:S]Vp8WFruFq2)a-7Ldd
%(GIdt.'nLS)=F-(YSr<aaNIR%VJ""A<l`$T?64g!#5=:#Ap"gHLJql5,1WM%;F?Tl3C=$W09m6Ohb1J]o'8"Vd+GH15+fCjOZUrU
%9MWb,#pM=2if6,2As^(N"PC]`3(0;G_(GP5ajCYWm1_aln75YBkih?,!_GBVBSs@!;#Xe@D:*QMi1Cq6i.]_!5S>T*(\Wr7q$G.X
%i#kRA]0:la;0Z1P2hK+J&[UjUD'V[W@q=1g,,,.\(#Y`6(8>(0HPpl85W"[*cb0Pt3"9ZdQ:aQ\/K,26U'"!P"DH'BU:b2'a4pdl
%)KD9-);eZ\c4igl0gJ[]7ChtbA^!:[e4DfrcsFFa,o/n;A3O&AJRimCZt9\Cf!LQLl2c-Tam8^m#/>,%GD7M9EfLX@@P5fg^R$\L
%!"cio.?A(9]LYkn6h.`FOK<c(M1o0tfe\4?qGL,]!&"t;Kd8VgQR8s=,XXrg*FI0'*K+H&K-Qh\!)e7U\lp`.<IZK,DZA'q$?_q\
%oSn.'!6I\9Vbjf+fQIpkMf0_oP0PDJH:1_b_frf"3f:-]f^J#+'MX>6gfI:G*8)gW5uYur\aiO-gtEjo!_ogNB2u*^Yg&:,_*B^)
%$'?4?_SK!9&@`]]-#>@Kj7+i"3f:f&N5oasUENmbi1@WbP`/;cF!abEj;\7Y`EZ@jIkTj5"'ckZXt%WS@Yn$oJL'@kVeJuOj+2\&
%\H3bPi3]+`656MCI-;O7.)HMB;:\F_&E2nj<tZ6=XoJ]40bY;EhoiOs!fD\982C7i,<\g&:/0gpc&pd'"4UapJp^sQG'X!qs"4HR
%SugZ[*>K8Rb0E<)asFU\:Z]2/qc0+BrZB1\+WD%56?p[F*\AIGJ`P5uk_%GTq7mJ_deN;)bTW.?qNs$+)7!7mK;P#oEoiq9\/bU>
%]mWW8+0P]9_!aVr'PY4dojJV,lAQ5LTQO*qYW^#hrp_\>Q(2S=BlHTuABW=cf1REDlLtp/#=)?;NW+^YCQ4J]&=Nc7j;;EYA8N<n
%+mYkM=GJqOo]*kP>>BltKUu$nacW*eK<CP5$J"Skgh-R4jD)Bl)\SY<n-[`4^3IKCdU"W:1B*.SGU5B#ZQVRrdZKl!+pfn5B9PhE
%P+a%FCn,H/MIbX2KK#An$6\HnTW@1;6M5[3\%1D(3TWJ/r.Q`0K:LF=eEb!2'L4:`@7t:s64S0mF6:=YU'heba@LHj-Hna)-7P$]
%GR$qnP8&?#Mmj/n.W<25VE^?Y46d?Gc#M6<a+eEa3+rb5P.XLP_qamFmRiCM8iDCfc6WXUnoN1.E_3G1;[Kpa?cAPP]"rj;0)#^\
%;37T7O#+>ro"%:[i2dTX#R-Q+DPB`8VNo6MOE[+BGlNnh4o,a1"-P'&;N:dH@P5fgIk'L'njBU1f(5lr3p9O&,!!^]UG/ONJbTqp
%OG6jOVshJ:Rh?+a-1UXB\Uc;!8$q8Hg(_X_]bP[E&lF3JL5%"^<)QWm?G`2r8)>=?>"GM0^>u:o5u&i@5Fr.jfFgHL[$\ThWk$3O
%6^NF_VgGjbkD7i1E8dEe/RbPNOqcU@F3q<-8P/AtnQn,%AaGM"DgDM\l%N8UA>BUF=)N?pZef?%4U3?:.O%AMEna)>DcISg8BNYP
%=3O'do(Oor)kXt'+/<]lr?3'ghH18n?1Ge;irn1TI1`9u>=`OY!Q"MP$F-dl!hh2n/g<eSXSoCY9?D-'a]ZMM3KeH*ckUV!Y5Gtl
%;?;:AYE+0_qt[-nQ`qLJ4E+PG_]9j*rSUicDCm^7+??uai79*_p/M.s1("=g:3"g`O+)&<9ot,o63-NU8LQqmql7bkSZ:]#W'128
%^E%@USX3TD!'EQ-Wdt]dPEG8K8-+boOEo*F!<`5)&(`f%,qjZO.a533MCi9h&<::s:Wq-N`nM6A-?q4>@h/]?<Yoh-fjpJO8N];-
%A0?^)1$f"0.q"1\TF\]ZfA(Vka`r^P%s)Ig$W:gab2n?tl;*a3]H+PMMJr<($Go_h.SqupL-54+Os!*q2@rG[.X4N1ADX>Z@H](F
%i'&Sk\njRPm1e!b9$6lLr<P[)4)mdI?Ze:6$H3<CH5IW0&5NB4o1oBYK]f"O]@Jf63C.7A)%^@Nj:J9bk_J^PH07ojWZM_Z_5Wq7
%Lg^:MaUKEZY(!9VOdDFZl'+/`nAo'fUfj\9?_C?"d3Nl]=c]M-mh4]3&$AaG<GN!'/_>]-+0R.bC+nO?-Ho9->+T[Op`\`qF/X[A
%g!jrN9ji=#Aq7fhZOQ4KF]8eVM^p5!%IWqc'uJof+bS_boK1*<2(OieL'u#]'4uK\)MkaZT--*u&^o>H--\"Q1-MmtN@TO]h@0=,
%<BjB"Qin^YggchnRFJ.>cO?\SC;V)bj7Bn`:SEp2HjOP?o/2i3d&4NV3R#dEbLS@3UdCe^9>-Z$U^H&1]k>rO15KNR<*fh$""htN
%i;qn61J*Lh;`;<b1[sFi8pLQWl;4n=%Qq`+PRJX(+pfem0#4Yg#_n0*PTR(m^UMZ/6F0.6-V2]N2m<RW#"/oR8j($'9"0U;i8ZpG
%gc!sulT""_`"DW';P_eu-\FW=W@8tT0h%*i(KY-,`,l%L30qMC4c`+Y's7f)'Zr*NeIuspe0]P[i09#Y+fab6?0"ODJ!7EbkcG2e
%(S-To&Da7C>cuUS6pp_m/f<3*P;R:u8[!$a;ZaKV@k0LsT6lns[>A=Xob`mkj^SSe=P<nOkP7JDqh1j`>fcPtXG/DB!($,JBKh/)
%Wna9nn<EDQhPP(a7E=/i-rhK"/E)F#d@+70/%-feKZ#-:3A^ge2GaSR:9O:`k\7]dJ`puZa=\SYQOkD-LV@JaBs1kV.1cB0JJ+()
%3Mfr"];!!;[7c)s+(2a4mX2PUKWb,!@NVEOU2?nRHTYHO_nRMh8n5WLNuls^<kOAoXKs2l1lNoI!9n[NpOJoJCaRUsY\g!Fn!m1Z
%/1&u<dR$`tZcsFke/JrT2RlAnDCSBNo\74S3G=nm%_i-*4mhi'q`^9.c+_dB5&.5d71P+2.22aWS0(kWg:/SO:!ch^'Z[6["h!C(
%"S:eaUhk7C#3LL\,M>tjJmF;P.lQO_[&?^1(?7qaC[$CMBGJpWN0TFXBnY4D,0(>_SC&)Y3M^HTLWfC%girl4%M`e]#)RP^dQn]2
%j*6p5PP7:$a76c/:Hd>I_cc$1-.4e3eK2Rq$?J*""W9&56*1ggbT'#ONI*>FjghL5"D'*MBrG-r\)<JRhIpfQ\,j9boK2W0<AX.)
%Q+jNGU"d]B'G29UDj"3$KpNfkmOS;UHIg>6pM-McgG(Cn>l2AK1:tRBDdW92lW.X2q=.(P[.':GDRHl*r5c*J[tPn7E6baBr6M"m
%(4KRr=5-4iIXkbOF)*=3SlIb6$EcC"1VibQ%'@T2*6\(5@a(Z1n3cFeMFMQHDU7e0<S(\%!.[q,o6(/m@gc+2Z==b0BuTo@,1>]S
%#n<=e"?;]RBGVth3\E-sPA1HNq%A92imR9.aE?HDHMF\!/aIZ>GbgJsV?Q=Ap2n[/Bk8k:%pTZBV2qHAqBeAGf`cWjK$d_[:A*!S
%ldYG1^Hr-^>[>q""_.!21#Kd^\i_j46fjKpP>))k<ne.UghsfpSqg\gpGsi8*GB:]-[Xmq:)b]J.u/:V:Bk9/10\0#d8((uq5>Q%
%""uOS*UkL_(+5<1MiY$oL[9g6@tmsL3Z<#7J!8IJTQEVr:V<4s:s_*d@h$P#8hmo]K)lR1psNmT:us4%Qh.:Eg\q4<q'0b>:hoDV
%o*19'1086O=V6-#nI)%G$sjJ]&PbA[Xll`Z#pQCXMCOQUgmuj.*6=3X#Oa\f%:m$&A65%bB[V&dk:RsKeh'Bp:58sd"sUuakXjA=
%jTdr;YsUu+#Q7I9.r]/A2QjT3L\hD8'1]#f:><E7M0g7DQY+'&BeR=5A9@'/^$9ue:#S'A!7RtFS@[!WD0r?6_rFp!qMA=Q0`!-0
%U^U\%$DkWNYTQX-@'XcPR7at?+'71"frJh/'H0#G?Xm&@ls*cK%oW@(laB/k]cM5f"qo<0]/bl5H(S^!>51&HC2$BQB;DC(gq^:E
%TIK]2q'DDO0!ptm7[&!JgbRKQ2OUL&?=$*h/I!M<MFGf/ErMP;;j:K#XOj*hAIT-Tp?=.g4bRQ+n!R3umcUOeIRlRJMN4i)Nd-NG
%@,^E+[bK5YYfJ9+&YQtD%9Kj^5$IRsLV13(4!Z>B2QSW[+RcN!5Hhila%Jb#W<8?sH8=tW>b0U0e?,C!hrGQ?mj/r>i\N#9?kKsb
%rftMRZVb]_8Z&W!XB@;h4feHp$\X<^'!=#adfJTKKF?qCf"E$]icV\l]?t3Fhf_PlQWd+HBptQV6at>t9`soZ0fd/+7Q@rABc:@o
%X*G03*EaE-1ee$mR#J@cRP^;`&@>+5=JK53RGJL]9F%M^BfZ:bo%5MB5g#c>DYFo7ZEA87GRG_njjI_4NtN=c;bUt=RKb[r/"*8[
%eU5kWRbeT39d`b2dfAHh^eE3VTS]@7:".U4FYa&+Y76i$US^C?aZG:G(!JS\p03m-8Mh**!)`2V5j0A_NRQ2o/rq^[YqFTI1JS%B
%ZaVU@3"=R(Qmj>C.FSDoe'RTO2q'V64uF3Odf>'CgJ$'8@]&AmWbFL>WG.gsEU/c]do=J5atugkECQJfnQ_uF^Y2/af0g\-:Xp\4
%Qgc\',GQ_I-t/S,=I_k_=gFm9*L`kYhQf]Ydkps3*;.f<c&TXP(hT43Lmt8#9O8/o'"bE:VO=+pdDIdMY_rg'R\lEfd,"!2%V?<d
%brD7D,E1*t20;([^g[&C7^/J.Npq.uq@4'0-r(ah`LDG+c@5iRAaChScX29t?E!K7N8]Du&!-,?p]6a0nL/"<`1P0njr"AC]Q?=m
%o*f!MgrD)gnuA7B*V3c^(h2\d-7e4O0Rp6&11#T;\^X&X0@pp$bZLAR!eJl:jr%oNj35_'FJKmbSDdC9=`i.QPE7KD"DC:l+QT2=
%j,EIn9:%?e%!=PsoQLSW_;JA<CbsD^YdkR0Zis=]bXkj=Sj:j4ikgZj+HST?1qJW]8&@0J0X].2ht@pnLA@qrFeZ@H=Ye5aX8?X=
%d\kfJEk`QK*H"c)^h^\bDEWaUM;$VZ=RY7Sp&d!uhNY\9-($b81-0<BU@+ohlZ`;*/$sF\.*_J0h2]f0YMAT4nAD&Nk=G#b#"H@3
%au85W%X)g%iCt>r?Y30cN^l7a8fdB"*HK2Y\k=%SOakZ_m2aO4j@%%@WIF&=OcJTql?Ik_a+GX6,t?3JL,A#QT'*-8T(f&LI20Q:
%MKKm7^FAo=*8GSHj1-hbHoB>`Td"Yg@[G_/[Y,;+/8rQcd"]sI@!V3K3ou']a`@0P]'^$CCcesna_(hLdW-LIeXSi*P60[GIYHiK
%n<C-@KA3!)9;FW?`M2L&XsEmjbNU?.<j-[Gm2BT)q?2%6$m,]tGV+%O3JFdAK%D=:rnQOCB89SL,Md=0TJeNONLRgdLO8ZZm'Hd#
%+!P7/E!^m6g28Y,aH:P#'hF@@b;_Pfok3'N5X<p4+"FcGLa#8f201N^'f+jn<),&\*JI\;+]](5qBKIn:kp3cA5GUU[5l)7E=ZA[
%::A+,"VY,CG8/]EVG:_=J[$4aU2ULf5C=</C@RiG9Pbi<.@RK7me')4:<q*3alEpV1?<H<CA-WCrqWdL;Tu/qc9k+A>'^]be?e=*
%HAkP=0YB-;kl[&-2;GM"hj6a`H'chk>k+6=/8;%fjEHcb!XFWVad"Mf!Ol9UBZc\h@K6%]Qd+T![CTPMVD$H<fs<*>s&S0DkBBMu
%@jjcA8.aA]]i[G6Fd\=]q5Ua^"??&S$q[@?fQ*\*OPeQt=H"6:&"D?5bG@6\d_\Fd8J]lU6?K=_S'?*7:cs)"#0nYTc&0a\oL"tV
%jNt1'9r_fn?&*:qnYu]HQ@j>h\Z!hqB7N+<[imoQ_4aQCa3Z=AoM@^`656PEb,'L9Qrsk68ipi\0YRXAX.<,-G$MIl79)/]8nAfM
%a`&KPoQ"5*_*iQ_ja3"V%3Z-Z``,AC;Wpk"dm19rDtqVn1`nY9O01?h!93hrd8<+d&GCC2.hp@qC("g=nfgF;aJ1t"ds&qO[QsSJ
%U0g(@2l%@LGo.:<Y`C6$7Z^<<&4'2EgN,KgPWBL?1tHCi+,H3p<TIOkSt8$+oJ4@<*EO-5M%cSW)>>[(`<&_g988\md!cGDiA,i\
%&radn<-f"nqMLZ;N*6&sbafo7RHik4lrGK$2m@SC3LC%VJ2Z<sn[<9:Y"kIG;YN[L?$F7ts$oUH)R=c:_:!9CBq""990,EcA)&<2
%/eQ')39nZG3M&[skLtGr[$kjI"d0([K=O%hWj\(W?lj7f>+^3c4a$$g8aWt#%iZYoHM\8))--sE%ATkn1tl?VP$9V9L7>e*%p[&8
%m)Nsj,C[+iUdQrMConIGOdZN<7[o$7carkDZl9.'7D67##R0\-ml_WG"j;AA`03AkfAts:+,CGmq#\d4%q1WJ%;sENoqFD^$snq6
%Q,XE#Hn92;S1:MH\o$2q&l7/kjIiDC+?E3h<1/h-<<d-79(HDTSm5"2B=ptoB%a-r>,],::6eec*6F`@g_/jNR;+BMQ$f#]XtTTI
%8L_?F!AZ%-8h]4H0dI6o$.D6f-&jbI,!/9&b@eso/=e5^[=.VG^r$b#]oF9k6[3Croa9HhY8`9*Kr*^laGqo>G^ke[,Cf[pYY3&[
%Jk`?"00t=UKH^-VVS%L&Y=b&GL$4FK%Di:&0s1(3M7a[0I[*4elOBp<fp)Q1!s(7bih!NY++a6/N*A8,^&k,>rUc%n4(@-'-ndMS
%#4d;nV]_Pm9iIPO.$q6^e7S5'MmB$VG]00O7hX>t&3O%#cQ&t?#9slLA5+4V)R!/0GjSHlRHTDr]e4$a;g03\'Qpbm<IJeBCq5DV
%>N5>F.<SN#m`7\r'5k?$">[fH$tSU#6ib3qS+$E9o'>m`Gg>M24<#Ic]-D5c2$Z?Pl2/V8aN"j249`.ae/4#W#2WA_r$p;@%)':I
%PPI2/T!qRJ]0s6U*&o2aC0HC2Dnks.XLHePSc%N59)/IE]=r8WS$@$_C50C03=^>2pJhPTXY%.RY(-<G54]o*ASWSKqFi">KH!.h
%()Vie#rQFraP\soRZ38-+>VrQ/F-eto(S;R!U?<dmZhnG;b]]jArs$k_3PX?Oa)s0@X0'eO?URWF(ahZ*K[pO"!\WN71Cu`p8OT^
%P?iL*8P)?REeieT^'pZ:><4-IU*0Z;5i_s"+cI\Z1_N*)C9oZeXS>G\hXeu#g^oec4btIDSnZV[N-_[kJW%L^!6)ijm>,("9]frd
%:b@UNV*fi5"*mG$n!6Bpl%^)gR,K3IK_/',#eu8d@M=R4Y6N8;3CH_a3!0uOWm\-h7bQOW,6A,&\(%AKZ\/K>2_)EC*DE+i@]]\T
%k:DN#%l-Y^^07-h'uDFuMkQKTCks\YaA<<!3o%)Hh34qOaJe,Da8hOEbN2fWEIBauE]]!m_aV/RS439R?Zr7I2cDa[<HWn/QVNd(
%-7j@0%>4oiBGHj9W`UIp&e4IMO@)T!p0f0Z58gbo+E'Z`L.JVk]FbH(m5a*Acb$8[i3qgQc[Pp)3@')K.fB?@ZR\&XmopP0[k15e
%1Mp9darXcQ!tQT[Tk77.:tWYFk(6eX6\"-\I,LR=j,]9$'`1[s0Qd<K\"A083)aiD6l9g[eG'/[iE$KTSAd3-/dW_lJ0>!NnXY;<
%N,M9#auf.?G"P8FKHC\D-](g$ns'@rOL$aeF>>;J[HFC-ql:@-F`%#M'j5`'GL2(Z+EBr=A6RMLS/]8HSmZfnJ2d6HVobl0\g[,%
%[8/8EJf"rqf98uQ6Bi^&F;2ck"M.bhau)tk-h@8:e5@TJ<Jf?Fck]><1f+nVQne*r##:#"run#X?-#q,8Kd#?`-,?$&\0&@7$Y?0
%lT*Xp%b!ZSrrYeT29/3]9rl$-KlpKN!&UitR*")_G!oEOKFN3?9^-ZPk=l"K1uL/Zo)X^,jY4H%DufhJC#XX?!"l>b>+LhT?E/W_
%[;oH<4d<`'"YG_tibUs\A,m,=4LH]DinlRKDP[eA%JUbjIk!"3X358bC/,*IW6e?/%$*ujLo,gtB5XnTihlDnR:QhQgH(4D+0U":
%D7'*T35g7Qejd7k;^%A(H]#'VHp38O_8T12LqXGIg2sPOR1QOOV8)Z_>[LBPMJ*`pX^6?01&,d;/L!f0TCU4orC)9H>Pn(8IfASu
%^]2@Rmsk>[Ish4gJ)>bQe"7\s0E:t;fC/b1gUI4Zq#9$o5Q1HU\,Z:'jkF/Ao%-+?rUKj$++O.XlYk[1s5U;tIK/m8J,]+jJ`%dQ
%i0RgMr(iC8nc&X\7iG#~>
%AI9_PrivateDataEnd
