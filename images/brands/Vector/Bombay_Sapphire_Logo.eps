%!PS-Adobe-3.1 EPSF-3.0%%Title: BOMBAY_S.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: Marijke Staes%%CreationDate: 07-09-2004%%BoundingBox: 0 0 306 142%%HiResBoundingBox: 0 0 305.7339 141.1192%%CropBox: 0 0 305.7339 141.1192%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors: %%DocumentCustomColors: (PANTONE 281 CVC)%%CMYKCustomColor: 1 0.72 0 0.38 (PANTONE 281 CVC)%%RGBCustomColor: %AI7_Thumbnail: 128 60 8%%BeginData: 11876 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0AFFA853532F5328532F5328532F7EA8FD0BFF53280628287EFD%07FF532F5328532F5328FD05FF7E5328532F532853FFFFFF532F5328532F%5328537DAFFD0AFF842F0159FFFFFFA82F5328532F53287EFFFF7E532F53%28532F5353FD10FFA853000600060006000600060006000628FD08FFA906%0600060006002FA9FD05FF280600060006002FFD05FFA800060006000628%FFFFFF280600060006000600060053A8FD07FFA806000600FFFFFFA80600%060006000653FFFFA8000600060006000601A9FD0EFF7D01280128532801%06012801060128010628FD07FF0628010653290106012FFD05FFA9012801%060128A8FD06FF530106012801A9FFFFFFA9012801060128010601280153%FD08FF012801067EFFFFFF7E280106012801FD04FF530128010659290106%53FD0EFF06060028A8FF7D060006007EA828000600062EFD05FF28060006%53FFA8280006007EFD05FF2F0006000600A9FD06FF280600060059FD05FF%5900060006A8A906060006007EFD07FF0600060053FD04FF590600060006%A8FFFFFF280600062E7E0606002FFD0EFF290128062F53A906280128A8FF%A82806280128FD04FFA828012806AFFFFF5328012806FD05FF2828062801%2853FD05FFA828062801287DFD05FF5928062801FFFFA8012806282FFD06%FFA90128062828FD05FF28280128067EFFFFA82801282F530128062859FD%0EFF5306000600537E06000600A8FFFF2806000600FD04FF5300060028FF%FFFFA8000600067DFD04FF2F000600060028FD05FF7E00060006007EFD05%FF7D00060006FFFFFF060006002FFD06FF530600060006A8FD04FF840006%000606FFFF53000600A87D06000628FD10FF7E53287EFFA801280106A8FF%FF7D01280106FD04FF0628010628FFFFFFA82801060153FD04FF2E060128%010601AFFD04FF28060128010659FD05FF7D06012801FFFFFF010601282E%FD06FF53010601280184FD05FF29010601287DA901280153FFFFA87E7EFD%16FF8406000600A8FFFF2E06000600FFFFFFA80600060053FD04FF000600%0600FD04FF5300060006000659FFFFFFA80600060006007DFD05FF7E0006%0006FFFFFF0600060053FD06FF00060006000653FD05FF7D060006002853%06000684FD1BFFA901280628A8FFFF290128062FFFFFFF7E0128062859FD%04FF5306280128A9FFFFFF2F28012806280153FFFFFF7E06280128062859%FD05FF7D28012806FFFFFF0628012853FD05FF7E28062801280629FD06FF%28280128062801282FFD1CFF8406000600A8FF53000600067DFFFFFF5306%0006007DFD04FF2806000600A8FFFFFF5300060006000600FFFFFF060600%060006007DFD05FF7E00060006FFFF2806000601FD06FF59000600060006%00A8FD05FF8400060006000600A8FD1BFF537E0106012828280128010653%FFFF847D28010601287DFFFF7E7E2801280106A8FF7E7E28280106012801%067DFFA8060128010601287DFFFFFF7E7D2F2801060153010601280184FD%04FF7DA828060153010601287DFD04FFA82F28010601280153FD1BFF7D06%000600060006000600287DFFFFFF53060006000600A8FFFF2E0600060006%00A8FF5300060006000600060028FF59000600060006007EFFFFFF530006%000600060006000606A9FD04FFA806000600067D2800060053FD04FF5306%00060006000684FD1CFF2828062801280628012806287EFFFFFF28280628%0128A8FFFFFF0628012806287DFFA828012806285328062801FF06280159%062801287DFFFFFFA8280128062801280628012806AFFD04FF2828062801%FF2F28012806FD05FF28280628012828FD1EFF53060006007E7D28000600%067DFFFFFF28060006007EFD04FF0606000600A8FFFFA928000600A80006%00062E0600067E060006007EFD04FFA953000600067E7E0006000606A8FF%FFFFA828060028FF7E00060006A8FD05FF532800060053FD1EFFA8012801%06A8FFA80601280128A9FFFF7E0128010659FD04FF5301060128A8FFFFFF%2E060128FF2801280106012828FF0128010659FD05FF7D06012801FFFF7E%010601282EFD04FF5301282EFF7E280106017EFD06FF2828010628FD1EFF%8406000600A8FFFF2E06000600A8FFFF7D060006007DFD04FF2806000600%A9FFFFFF53000600FF5306000600060059FF060006007DFD05FF7E000600%06FFFFFF2800060006A8FFFFFF0006005353530006000628FD06FF2F0006%002FFD1EFFA901280628A8FFFF7E0128062859FFFFA90128062859FD04FF%2F06280128FD04FF2F280128FFAF012806280128A9FF0128062859FD05FF%7D28012806FFFFFF2F28012806A9FFFF842801280628012806280128FD06%FF2828062828FD1EFF8406000600A8FFFF53060006007DFFFFA906000600%2FFD04FF000600062EFD04FF53000600FFFF280006000628FFFF06000600%7DFD05FF7E00060006FFFFFF530006000684FFFF7D000600060006000600%0600A8FD05FF2F0006002FFD1EFFA901060128A8FFFF59010601287DFFFF%FF2806012828FFFFFFA80601280184FD04FF28280106FFFF7D0601280184%FFFF010601287DFD05FF5928010601FFFFFF2828010601A9FFFF28280128%28532E2F0128010659FD05FF2E0601282EFD1EFF7E06000600A8FFFF0006%000600A8FFFFFF7E00060006A8FFFF7E00060028A8FD04FF2F000600FFFF%FF00060006A8FFFF060006007EFD05FF7D00060006FFFF840600060006FF%FFA806000653FD04FF060006002FFD05FF5300060053FD1EFFA906280128%7EFF28280628012FFD05FF290128067EFFFF282801287DFD05FF28280628%FFFFFF2F012853FFFFFF062801287DFD05FF5928062801FFA82801280628%53FFFFA8012806A9FD04FF2828062801FD05FF2F2801282FFD1EFF530600%0600060006000600067EFD05FF84060006007E5306000628FD05FFA92800%0600A8FFFF7D0600A8FFFF7E0600060028A9FFFFFFA92800060006000600%06000606FFFFA906060006A9FD04FF530006000653FFFFFFA80600060028%A8FD1CFF84060128010601280106012884FD07FF7E0601280106012828FD%06FF530106012806FFFFFF0128FFFFFF2801280106017EFFFFFF53010601%2801060128010628FFFFFF28280106017EFD04FF01060128010653FFFF2F%01280106012FFD1CFF530006000600060006287EA8FD09FF7E0600060006%2EFD06FFA800060006000653FFFF5353FFFF7E00060006000600FFFFFF00%0600060006000600537EFFFFFF7D060006000600FFFFFF53060006000600%06FFA800060006000600A8FD1BFFA8A9A8A9A8A9A8FD10FFA97EA9A8FDFC%FFFDFCFFFDE6FF84597E7DA8A85353FD08FFA853A8FD08FF7D7E597E7D7E%59A8A8FD06FFA87D7E597E7D7E7DA9FD07FF7E7D7E597E7D7EA87E7D7E59%7E7D7EA8FFFF84597E7D7E597E7EFFFFA97D7E597E7D7E59A8A8FD07FF7E%7E597E7D7E597E7D7E597E7EFD0AFFA8280006000600060053FD06FFA82F%000600FD07FF7E060006000600060006067DA8FFFFFF2806000600060006%00062EA8FD04FF00060006000600A8000600060006007DFFFF2E06000600%060053FFFF590600060006000600060153A8FD04FF530006000600060006%00060028FD09FFA82806280128062801282FFD07FF0628012884FD07FF2F%280128062801280628012FA8FFFFA906280128062801280628017EFFFFFF%7E062801280653FFA8062801280628FD04FF062806280128A8FFFFFF2828%01280628012806280128A8FFFFFFA9280128062801280628012806FD09FF%5300060053A8FF53060053FD07FF060006007DFD08FF00060006067D2806%00060028A9FFFF53000600062E59010600060084FFFFFF2800060006A9FF%FF53000600067DFD04FF7E0006000659FD04FFA800060006065901060006%0028FD04FF7D06000600537E8406060006A8FD08FF06060128A8FFFFFF06%0628FD07FF0128010628FD08FF2801060153FFFF53280106017EFFFF5928%010601FFFFA90128010606FFFFFF2828010601FFFFFF5928010601A9FD04%FFA806012801A8FD04FFA8280106017EFFFF2828010601A8FFFFFFA90106%0128A8FFFFFF280601A9FD07FFA806000600A9FFFFFF53002FFD06FF7D06%00060006A8FD07FF0006000628FFFFFF0006000628FFFF7D00060006FFFF%FF53000600067DFFFF2F00060006FFFFFF7D000600067EFD04FFA8000600%0684FD04FFA80006000653FFFF7E0006000628FFFFFF7E06000600A8FFFF%FFA8000659FD07FFA90628012853FFFFFF7E2828FD06FF590128062801A8%FD07FF2806280153FFFFFF5306280128FFFF5928062801FFFFFF7D280628%017EFFFF2828062801FFFFFF5928062801A9FD04FFA828012806A9FD04FF%A8280628017EFFFFFF2806280153FFFFFFA906280128A8FD04FF59017EFD%08FF0600060006A8FFFFFF5359FD06FF06060006000653FD07FF00060006%28FFFFFF2806000600FFFF7D00060006FFFFFFA80006000653FFFF2F0006%0006FFFFFF7D000600067EFD04FFA80006000684FD04FFA80006000653FF%FFFF0006000628FFFFFF7E06000600A8FD0FFF28280106012FFD0AFFA828%010601280128FD07FF0601280153FFFFFF2801280106FFFF7D06012801FF%FFFF7D060128017EFFFF2E06012801FFFFFF7D06012801A8FD04FFA82801%0601A9FD04FFA8060128017EFFFFA90601280153FFFFFFA801280106A8FF%FFFFA8FD0BFFA8000600060053FD09FF7E00060006000600A9FD06FF0006%000628FFFFFF0006000628FFFF7E00060006FFFFFF530006000684FFFF53%00060006FFFFFF7E0006000684FD04FFA8000600067EFD04FFA800060006%53FFFF7E0006000653FFFFFF8406000600A8FFFF7D0653FD0AFFA8530628%0128067EFD08FF53280628012806287EFD06FF2801280653FFFF53280128%06A8FFFF7D28012806FFFFA80628012828FFA8FF2F28012806FFFFFF7D28%012806A9FFFFFFAFA828062801A9FFFFFFA9A8280128067EFFFF28280128%06FFFFFFA8A901280628A8FFA828017EFD0AFF2F000600060006007EFD05%FF2806060006530600060053FD04FF010600060006065306060006002FFF%7D000600060006532F0006000600A8FF2F000600060006282F2828000600%0684FFFFA80006000600067EFFFFA8000600060006285901060006007DFF%FF7E060006000600060006000653FD0AFF530601280106012806A9FD04FF%0628010601A82E06012828FD04FF53012801060128010601280128A8FF84%0601280106012801060128017DFFFF530601280106012801060128010601%A9FFFFA8280106012801A8FFFFFF28012801060128010601280153FD04FF%06280106012801060128017EFD0BFF7D5328060006000628FD04FF7E0006%0006A85900060006A8FFFFFFA87D00060006000600060053A8FFFFFF7E28%000600060006000628A8FD04FF53060006000600060006000600067EFFFF%FFA8530006000684FFFFFFA85300060006000600060053FD05FFA8280600%0600060006000653FD0EFF2F280128062859FD04FF53062828FF7E280128%067EFD05FF280628012F7DA8A8FD07FF59280628017E7EA9A8FD07FF2828%062801FFFFFF5928062801A9FD04FFA828012806A9FD04FFA82806280153%0628012828FD06FFA906280128A8FFA828067EFD0FFF280600060028A8FF%FFFF06060053FFFF000600062EFD05FF0006000628FD0AFF7D00060006FD%0BFF2F00060006FFFFFF7D000600067EFD04FFA80006000684FD04FFA800%0600065353000600067EFD05FF7E06000600A8FFFFA82853FD0FFFAF0606%01280184FFFFA90601280106012801060128FD05FF0601280153FD0AFF7D%06012801FD0BFF2E06012801FFFFFF7D06012801A8FD04FFA828010601A9%FD04FFA8060128017EA82801060153FD05FFA801280106A8FD0FFF0628FD%04FF7E0006000653FFFF7E0006000600060006000600A9FD04FF00060006%28FD0AFF7E00060006FD0BFF5300060006FFFFFF7E0006000684FD04FFA8%000600067EFD04FFA80006000653FF0606000600FD05FF8406000600A8FD%04FFA87E7EFD08FF012884FD04FF2801280653FFFF532801280628012806%2801287EFD04FF2801280653FD0AFF7D28012806FD0BFF2F28012806FFFF%FF7D28012806A9FD04FFA828062801A9FD04FFA8280128067EFF7E062801%287DFD04FFA901280628A8FD04FF530628FD08FF060053FD04FF28060006%53FFFF28000653FFFFFFA80600060053FD04FF0006000628FD0AFF7E0006%0006FD0BFF5300060006FFFFFF7E0006000684FD04FFA8000600067EFD04%FFA80006000653FFA80600060028FD04FF8406000600A8FFFFFF7E000653%FD08FF010628FD04FF2F0106017EFFA901280184FD04FF2828010606FD04%FF2801060153FD0AFF5928010601FD0BFF2828010601FFFFFF5928010601%A9FD04FFA806012801A8FD04FFA8280106017EFFFF2F28010601A8FFFFFF%A901060128A8FFFFAF010601A8FD08FF06000659FFFF7E00060006A8FF53%060006A8FD04FF530006000659FFFFFF0006000628FD0AFF5900060006A8%FD0AFF2800060006A8FFFF59000600067DFD04FF7E000600067DFD04FFA8%0006000653FFFF7E0006000628FFFFFF7D060006007E845900060006A8FD%08FF0628012828530128062859FF7D28012806A8FD04FF28280628012884%FF2F28062801287EFD08FFA9012806280153FD09FF7E012806280159FFA9%01280628012FFD04FF062801280628A8FFFFFF282806280128A8FF7D2806%28012853FFFF280628012806280128062828FFFFFF7E84A8A95300060006%00060006000653FFA8060006000606FFFFFF7D060006000600287D060006%00060028A8FD07FF060600060006007EFD08FF00060006000600A8060600%060006007DFFFF5306000600060053FFFF7D0600060006002FA806000600%0600067D53000600060006000600060006007DFF7D282853010601535353%012801537EFFFFFF597E7D7E597EFFFFFFA97D7E597E7D7E59A87D7E597E%7D7E59FD08FF7E7D7E597E7D7EA8FD07FFA87E7D7E597E7D7EA87E7D7E59%7E7D7E7EFFFF84597E7D7E597E7EFFFFA97D7E597E7D7E59FF7D7E597E7D%7E59A97E7E597E7D7E597E7D7E592F0106017EA8A87E0006007DFD75FF28%000628FFFFFF28062828A9A9FD71FFA85906280153FFFFFF06060006007E%FD71FF280006000653FFFFFFA928280153A9FD71FF7E06012853FD06FFA8%FD75FFA8A8A8FD04FFFF%%EndData%%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: BOMBAY_S.EPS 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -141.12 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 141.12 li305.734 141.12 li305.734 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"gsave % PSGState0 0 mo306 0 li306 141 li0 141 li0 0 liclp54.1646 41.1231 mo54.1646 34.2071 50.7066 31.4966 47.4356 31.4966 cv45.94 31.4966 li45.94 49.628 li45.94 50.7496 46.127 50.8433 47.4356 50.8433 cv50.7999 50.8433 54.1646 46.731 54.1646 41.1231 cvcp53.7906 16.0752 mo53.7906 10.1876 50.9869 6.63575 47.5289 6.63575 cv46.127 6.63575 45.94 7.00977 45.94 8.0376 cv45.94 24.7676 li47.2486 24.7676 li51.2676 24.7676 53.7906 21.7764 53.7906 16.0752 cvcp65.4737 41.3101 mo65.4737 51.4971 58.3707 57.3853 45.753 57.3853 cv31.7339 57.3853 li31.7339 55.7964 li31.7339 54.3946 32.2012 53.647 33.6968 52.8995 cv34.8184 52.3384 35.2857 51.9649 35.2857 50.7496 cv35.2857 31.6836 li34.3506 31.5899 30.3321 30.001 30.3321 26.4498 cv30.3321 25.6084 30.8926 25.0479 31.3599 25.0479 cv32.2012 25.0479 32.9493 26.0757 34.4444 26.0757 cv35.0987 26.0757 35.2857 25.9825 35.2857 25.2349 cv35.2857 9.06592 li35.2857 7.29004 34.5376 5.70118 31.3599 5.70118 cv29.1172 5.70118 27.3414 6.7295 27.3414 8.41163 cv27.3414 9.81348 28.3697 10.7481 29.3975 10.7481 cv30.9864 10.7481 30.6124 10.0938 31.6407 10.0938 cv32.3882 10.0938 32.5752 11.0284 32.5752 11.7764 cv32.5752 13.6456 29.8648 15.982 26.7803 15.982 cv22.4815 15.982 19.6773 12.898 19.6773 9.43995 cv19.6773 6.54249 21.4532 3.73877 25.1919 1.9629 cv26.9673 1.21485 30.0518 0.747559 33.4161 0.747559 cv47.3418 0.747559 li58.5572 0.747559 64.4454 6.0752 64.4454 15.1412 cv64.4454 22.0572 60.9874 26.3565 55.5665 27.6646 cv60.6133 29.2535 65.4737 33.3658 65.4737 41.3101 cvcp290.435 8.0376 mo290.435 11.4961 287.725 15.0474 283.612 15.0474 cv280.528 15.0474 277.817 12.898 277.817 9.90723 cv277.817 9.15918 278.099 8.41163 278.846 8.41163 cv279.874 8.41163 279.594 9.15918 281.183 9.15918 cv282.772 9.15918 283.799 8.50538 283.799 7.19678 cv283.799 5.51416 282.585 4.67334 280.995 4.67334 cv279.407 4.67334 278.005 6.54249 276.977 8.59864 cv266.695 29.3467 li266.695 50.6563 li266.695 51.8711 267.163 52.2452 268.284 52.8057 cv269.78 53.5538 270.247 54.3008 270.247 55.7032 cv270.247 57.292 li252.677 57.292 li252.677 55.7032 li252.677 54.3008 253.145 53.5538 254.64 52.8057 cv255.667 52.2452 256.229 51.8711 256.229 50.6563 cv256.229 32.7115 li254.64 32.3375 249.873 30.0948 249.873 26.3565 cv249.873 25.5152 250.341 24.9542 250.808 24.9542 cv251.648 24.9542 252.022 25.3282 252.77 25.3282 cv253.424 25.3282 253.611 25.1412 253.611 24.5806 cv253.611 24.2999 253.424 23.9263 253.051 23.1788 cv245.013 7.47706 li244.546 6.63575 243.424 5.60792 242.396 5.04688 cv240.901 4.29932 240.433 3.55176 240.433 2.14991 cv240.433 0.654297 li259.593 0.654297 li259.593 2.24317 li259.593 3.64502 258.938 4.29932 258.284 4.67334 cv257.63 4.95362 257.35 5.60792 257.35 6.35547 cv257.35 7.00977 257.536 8.0376 258.098 9.15918 cv262.957 20.001 li268.191 9.15918 li268.752 8.0376 268.938 7.00977 268.938 6.35547 cv268.938 5.60792 268.658 4.95362 268.004 4.67334 cv267.35 4.29932 266.695 3.64502 266.695 2.24317 cv266.695 0.654297 li280.247 0.654297 li283.799 0.654297 285.295 1.21485 286.696 1.86915 cv288.939 3.08448 290.435 5.32715 290.435 8.0376 cvcp194.45 41.0298 mo194.45 34.1133 190.992 31.4034 187.721 31.4034 cv186.226 31.4034 li186.226 49.5347 li186.226 50.6563 186.412 50.7496 187.721 50.7496 cv191.086 50.7496 194.45 46.6373 194.45 41.0298 cvcp194.077 15.982 mo194.077 10.0938 191.273 6.54249 187.814 6.54249 cv186.412 6.54249 186.226 6.91651 186.226 7.94434 cv186.226 24.6739 li187.534 24.6739 li191.553 24.6739 194.077 21.6832 194.077 15.982 cvcp205.759 41.2168 mo205.759 51.4039 198.656 57.292 186.039 57.292 cv172.02 57.292 li172.02 55.7032 li172.02 54.3008 172.486 53.5538 173.982 52.8057 cv175.011 52.2452 175.571 51.8711 175.571 50.6563 cv175.571 31.5899 li174.637 31.4966 170.618 29.9078 170.618 26.3565 cv170.618 25.5152 171.179 24.9542 171.646 24.9542 cv172.486 24.9542 173.235 25.9825 174.73 25.9825 cv175.384 25.9825 175.571 25.8887 175.571 25.1412 cv175.571 7.57032 li175.571 6.7295 175.479 5.88819 174.075 5.23389 cv172.861 4.67334 172.3 3.92579 172.3 2.71045 cv172.3 0.654297 li187.628 0.654297 li198.843 0.654297 204.731 5.98145 204.731 15.0474 cv204.731 21.9634 201.273 26.2627 195.853 27.6646 cv200.899 29.1602 205.759 33.2725 205.759 41.2168 cvcp229.499 37.5718 mo226.228 21.8702 li222.862 37.5718 li229.499 37.5718 licp248.284 57.292 mo230.62 57.292 li230.62 55.7964 li230.62 54.3008 231.274 53.7403 231.929 53.46 cv232.863 53.086 233.05 52.3384 233.05 51.7779 cv233.05 51.2168 232.863 50.4693 232.676 49.628 cv231.461 44.3008 li221.087 44.3008 li219.778 49.441 li219.592 50.2823 219.404 51.2168 219.404 51.5909 cv219.404 52.1514 219.592 52.8995 220.245 53.273 cv220.993 53.647 221.554 54.3008 221.554 55.7032 cv221.554 57.292 li207.161 57.292 li207.161 55.7964 li207.161 54.3946 207.628 53.647 209.124 52.8995 cv210.245 52.3384 211.554 51.4039 211.74 50.4693 cv216.413 32.7115 li215.573 32.3375 212.488 30.0948 212.488 27.1973 cv212.488 25.7022 213.423 25.2349 213.891 25.2349 cv215.105 25.2349 215.199 26.4498 217.067 26.4498 cv217.722 26.4498 217.909 26.1695 218.096 25.4214 cv222.302 9.15918 li222.489 8.50538 222.676 7.66407 222.676 7.00977 cv222.676 5.4209 221.554 4.5796 221.554 3.64502 cv221.554 2.43018 222.676 1.9629 223.703 1.58887 cv227.536 0.374024 li228.097 0.187012 228.845 0 229.312 0 cv230.34 0 230.9 1.02833 231.087 1.9629 cv243.704 50.4693 li243.985 51.4039 244.92 52.1514 246.321 52.8995 cv247.816 53.647 248.284 54.3946 248.284 55.7964 cv248.284 57.292 licp164.73 57.292 mo147.346 57.292 li147.346 55.7032 li147.346 54.3008 147.813 53.5538 149.309 52.8057 cv150.337 52.2452 150.897 51.8711 150.897 50.6563 cv150.897 25.4214 li139.495 55.9834 li139.215 56.731 138.841 57.6656 138.374 57.6656 cv137.906 57.6656 137.439 56.6377 137.159 55.9834 cv126.224 25.3282 li126.224 50.6563 li126.224 51.8711 126.785 52.2452 127.813 52.8057 cv129.308 53.5538 129.775 54.3008 129.775 55.7032 cv129.775 57.292 li114.634 57.292 li114.634 55.7032 li114.634 54.3008 115.102 53.5538 116.597 52.8057 cv117.626 52.2452 118.186 51.8711 118.186 50.6563 cv118.186 31.5899 li117.251 31.4966 113.232 29.9078 113.232 26.3565 cv113.232 25.5152 113.793 24.9542 114.261 24.9542 cv115.102 24.9542 115.85 25.9825 117.345 25.9825 cv117.999 25.9825 118.186 25.8887 118.186 25.1412 cv118.186 7.57032 li118.186 6.7295 118.093 5.88819 116.69 5.23389 cv115.476 4.76661 114.915 3.92579 114.915 2.71045 cv114.915 0.654297 li133.42 0.654297 li133.42 2.33643 li133.42 3.83204 132.859 4.39258 132.112 4.67334 cv131.177 5.04688 130.897 5.70118 130.897 6.26221 cv130.897 6.82276 131.271 7.85108 131.551 8.59864 cv139.869 34.5811 li148.935 8.59864 li149.215 7.85108 149.589 6.82276 149.589 6.26221 cv149.589 5.70118 149.309 5.04688 148.374 4.67334 cv147.72 4.39258 147.065 3.83204 147.065 2.33643 cv147.065 0.654297 li164.449 0.654297 li164.449 2.71045 li164.449 3.92579 163.889 4.76661 162.674 5.32715 cv161.272 5.88819 161.178 6.7295 161.178 7.57032 cv161.178 50.6563 li161.178 51.8711 161.739 52.2452 162.767 52.8057 cv164.263 53.5538 164.73 54.3008 164.73 55.7032 cv164.73 57.292 licp96.5025 33.7398 mo96.5025 31.9639 li96.129 31.8707 95.3809 31.4034 94.2598 30.7491 cv92.6705 29.8145 91.4556 28.2256 91.4556 26.4498 cv91.4556 25.4214 91.7359 25.0479 92.4839 25.0479 cv93.3248 25.0479 94.4463 26.0757 95.4747 26.0757 cv96.129 26.0757 96.4092 25.7955 96.4092 24.0196 cv96.4092 18.9727 95.0074 9.43995 92.5772 6.63575 cv91.8296 5.79493 91.1753 5.60792 90.2408 5.60792 cv86.3155 5.60792 84.1656 15.0474 84.1656 29.0665 cv84.1656 43.2725 86.2217 52.1514 90.4278 52.1514 cv95.5679 52.1514 96.5025 38.2256 96.5025 33.7398 cvcp108.092 29.4405 mo108.092 46.357 100.055 57.9463 89.8668 57.9463 cv80.5206 57.9463 73.2305 45.983 73.2305 33.7398 cv73.2305 32.2442 li72.7632 32.0572 71.8287 31.4034 71.0811 31.0293 cv69.212 29.9078 67.9034 28.2256 67.9034 26.4498 cv67.9034 25.5152 68.2774 24.9542 68.9317 24.9542 cv69.7725 24.9542 70.8008 25.9825 71.6421 25.9825 cv72.483 25.9825 72.7632 25.5152 72.9502 23.7393 cv74.6329 8.50538 81.5489 0.187012 90.0538 0.187012 cv100.896 0.187012 108.092 11.0284 108.092 29.4405 cvfalse sop/0 <</Name (PANTONE 281 CVC)/CSA /1 /TintMethod /Subtractive/TintProc null/MappedCSA null/NComponents 4 /ColorLookup [ [ 0 0 0 0 ] [ 0.00392157 0.00282353 0 0.0014902 ][ 0.00784314 0.00564706 0 0.0029804 ] [ 0.0117648 0.00847059 0 0.00447059 ][ 0.0156863 0.0112942 0 0.00596079 ] [ 0.0196079 0.0141177 0 0.00745098 ][ 0.0235295 0.0169412 0 0.00894118 ] [ 0.027451 0.0197648 0 0.0104314 ][ 0.0313726 0.0225883 0 0.0119216 ] [ 0.0352942 0.0254118 0 0.0134118 ][ 0.0392157 0.0282353 0 0.014902 ] [ 0.0431373 0.0310589 0 0.0163922 ][ 0.0470589 0.0338824 0 0.0178824 ] [ 0.0509804 0.0367059 0 0.0193726 ][ 0.054902 0.0395295 0 0.0208628 ] [ 0.0588236 0.042353 0 0.022353 ][ 0.0627451 0.0451765 0 0.0238432 ] [ 0.0666667 0.048 0 0.0253334 ][ 0.0705883 0.0508236 0 0.0268236 ] [ 0.0745098 0.0536471 0 0.0283138 ][ 0.0784314 0.0564706 0 0.029804 ] [ 0.082353 0.0592942 0 0.0312942 ][ 0.0862746 0.0621177 0 0.0327844 ] [ 0.0901961 0.0649412 0 0.0342746 ][ 0.0941177 0.0677648 0 0.0357648 ] [ 0.0980393 0.0705883 0 0.0372549 ][ 0.101961 0.0734118 0 0.0387451 ] [ 0.105883 0.0762353 0 0.0402353 ][ 0.109804 0.0790589 0 0.0417255 ] [ 0.113726 0.0818824 0 0.0432157 ][ 0.117648 0.0847059 0 0.0447059 ] [ 0.121569 0.0875295 0 0.0461961 ][ 0.125491 0.090353 0 0.0476863 ] [ 0.129412 0.0931765 0 0.0491765 ][ 0.133334 0.096 0 0.0506667 ] [ 0.137255 0.0988236 0 0.0521569 ][ 0.141177 0.101648 0 0.0536471 ] [ 0.145099 0.104471 0 0.0551373 ][ 0.14902 0.107295 0 0.0566275 ] [ 0.152942 0.110118 0 0.0581177 ][ 0.156863 0.112942 0 0.0596079 ] [ 0.160785 0.115765 0 0.0610981 ][ 0.164706 0.118589 0 0.0625883 ] [ 0.168628 0.121412 0 0.0640785 ][ 0.17255 0.124236 0 0.0655687 ] [ 0.176471 0.127059 0 0.0670589 ][ 0.180393 0.129883 0 0.0685491 ] [ 0.184314 0.132706 0 0.0700393 ][ 0.188236 0.13553 0 0.0715295 ] [ 0.192157 0.138353 0 0.0730196 ][ 0.196079 0.141177 0 0.0745098 ] [ 0.2 0.144 0 0.076 ][ 0.203922 0.146824 0 0.0774902 ] [ 0.207844 0.149648 0 0.0789804 ][ 0.211765 0.152471 0 0.0804706 ] [ 0.215687 0.155295 0 0.0819608 ][ 0.219608 0.158118 0 0.083451 ] [ 0.22353 0.160942 0 0.0849412 ][ 0.227451 0.163765 0 0.0864314 ] [ 0.231373 0.166589 0 0.0879216 ][ 0.235295 0.169412 0 0.0894118 ] [ 0.239216 0.172236 0 0.090902 ][ 0.243138 0.175059 0 0.0923922 ] [ 0.247059 0.177883 0 0.0938824 ][ 0.250981 0.180706 0 0.0953726 ] [ 0.254902 0.18353 0 0.0968628 ][ 0.258824 0.186353 0 0.098353 ] [ 0.262746 0.189177 0 0.0998432 ][ 0.266667 0.192 0 0.101334 ] [ 0.270589 0.194824 0 0.102824 ][ 0.27451 0.197648 0 0.104314 ] [ 0.278432 0.200471 0 0.105804 ][ 0.282353 0.203295 0 0.107295 ] [ 0.286275 0.206118 0 0.108785 ][ 0.290197 0.208942 0 0.110275 ] [ 0.294118 0.211765 0 0.111765 ][ 0.29804 0.214589 0 0.113255 ] [ 0.301961 0.217412 0 0.114746 ][ 0.305883 0.220236 0 0.116236 ] [ 0.309804 0.223059 0 0.117726 ][ 0.313726 0.225883 0 0.119216 ] [ 0.317648 0.228706 0 0.120706 ][ 0.321569 0.23153 0 0.122197 ] [ 0.325491 0.234353 0 0.123687 ][ 0.329412 0.237177 0 0.125177 ] [ 0.333334 0.24 0 0.126667 ][ 0.337255 0.242824 0 0.128157 ] [ 0.341177 0.245648 0 0.129648 ][ 0.345099 0.248471 0 0.131138 ] [ 0.34902 0.251295 0 0.132628 ][ 0.352942 0.254118 0 0.134118 ] [ 0.356863 0.256942 0 0.135608 ][ 0.360785 0.259765 0 0.137099 ] [ 0.364706 0.262589 0 0.138589 ][ 0.368628 0.265412 0 0.140079 ] [ 0.37255 0.268236 0 0.141569 ][ 0.376471 0.271059 0 0.143059 ] [ 0.380393 0.273883 0 0.14455 ][ 0.384314 0.276706 0 0.14604 ] [ 0.388236 0.27953 0 0.14753 ][ 0.392157 0.282353 0 0.14902 ] [ 0.396079 0.285177 0 0.15051 ][ 0.4 0.288 0 0.152 ] [ 0.403922 0.290824 0 0.153491 ][ 0.407844 0.293648 0 0.154981 ] [ 0.411765 0.296471 0 0.156471 ][ 0.415687 0.299295 0 0.157961 ] [ 0.419608 0.302118 0 0.159451 ][ 0.42353 0.304942 0 0.160942 ] [ 0.427451 0.307765 0 0.162432 ][ 0.431373 0.310589 0 0.163922 ] [ 0.435295 0.313412 0 0.165412 ][ 0.439216 0.316236 0 0.166902 ] [ 0.443138 0.319059 0 0.168393 ][ 0.447059 0.321883 0 0.169883 ] [ 0.450981 0.324706 0 0.171373 ][ 0.454902 0.32753 0 0.172863 ] [ 0.458824 0.330353 0 0.174353 ][ 0.462746 0.333177 0 0.175844 ] [ 0.466667 0.336 0 0.177334 ][ 0.470589 0.338824 0 0.178824 ] [ 0.47451 0.341648 0 0.180314 ][ 0.478432 0.344471 0 0.181804 ] [ 0.482353 0.347295 0 0.183295 ][ 0.486275 0.350118 0 0.184785 ] [ 0.490197 0.352942 0 0.186275 ][ 0.494118 0.355765 0 0.187765 ] [ 0.49804 0.358589 0 0.189255 ][ 0.501961 0.361412 0 0.190746 ] [ 0.505883 0.364236 0 0.192236 ][ 0.509804 0.367059 0 0.193726 ] [ 0.513726 0.369883 0 0.195216 ][ 0.517648 0.372706 0 0.196706 ] [ 0.521569 0.37553 0 0.198197 ][ 0.525491 0.378353 0 0.199687 ] [ 0.529412 0.381177 0 0.201177 ][ 0.533334 0.384 0 0.202667 ] [ 0.537255 0.386824 0 0.204157 ][ 0.541177 0.389648 0 0.205648 ] [ 0.545098 0.392471 0 0.207138 ][ 0.54902 0.395295 0 0.208628 ] [ 0.552942 0.398118 0 0.210118 ][ 0.556863 0.400942 0 0.211608 ] [ 0.560785 0.403765 0 0.213099 ][ 0.564706 0.406589 0 0.214589 ] [ 0.568628 0.409412 0 0.216079 ][ 0.57255 0.412236 0 0.217569 ] [ 0.576471 0.415059 0 0.219059 ][ 0.580393 0.417883 0 0.22055 ] [ 0.584314 0.420706 0 0.22204 ][ 0.588236 0.42353 0 0.22353 ] [ 0.592157 0.426353 0 0.22502 ][ 0.596079 0.429177 0 0.22651 ] [ 0.6 0.432 0 0.228 ][ 0.603922 0.434824 0 0.229491 ] [ 0.607844 0.437648 0 0.230981 ][ 0.611765 0.440471 0 0.232471 ] [ 0.615687 0.443295 0 0.233961 ][ 0.619608 0.446118 0 0.235451 ] [ 0.62353 0.448942 0 0.236942 ][ 0.627451 0.451765 0 0.238432 ] [ 0.631373 0.454589 0 0.239922 ][ 0.635295 0.457412 0 0.241412 ] [ 0.639216 0.460236 0 0.242902 ][ 0.643138 0.463059 0 0.244393 ] [ 0.647059 0.465883 0 0.245883 ][ 0.650981 0.468706 0 0.247373 ] [ 0.654902 0.47153 0 0.248863 ][ 0.658824 0.474353 0 0.250353 ] [ 0.662746 0.477177 0 0.251844 ][ 0.666667 0.48 0 0.253334 ] [ 0.670589 0.482824 0 0.254824 ][ 0.67451 0.485648 0 0.256314 ] [ 0.678432 0.488471 0 0.257804 ][ 0.682353 0.491295 0 0.259295 ] [ 0.686275 0.494118 0 0.260785 ][ 0.690197 0.496942 0 0.262275 ] [ 0.694118 0.499765 0 0.263765 ][ 0.69804 0.502589 0 0.265255 ] [ 0.701961 0.505412 0 0.266746 ][ 0.705883 0.508236 0 0.268236 ] [ 0.709804 0.511059 0 0.269726 ][ 0.713726 0.513883 0 0.271216 ] [ 0.717648 0.516706 0 0.272706 ][ 0.721569 0.51953 0 0.274197 ] [ 0.725491 0.522353 0 0.275687 ][ 0.729412 0.525177 0 0.277177 ] [ 0.733334 0.528 0 0.278667 ][ 0.737255 0.530824 0 0.280157 ] [ 0.741177 0.533648 0 0.281648 ][ 0.745098 0.536471 0 0.283138 ] [ 0.74902 0.539295 0 0.284628 ][ 0.752942 0.542118 0 0.286118 ] [ 0.756863 0.544942 0 0.287608 ][ 0.760785 0.547765 0 0.289098 ] [ 0.764706 0.550589 0 0.290589 ][ 0.768628 0.553412 0 0.292079 ] [ 0.77255 0.556236 0 0.293569 ][ 0.776471 0.559059 0 0.295059 ] [ 0.780393 0.561883 0 0.29655 ][ 0.784314 0.564706 0 0.29804 ] [ 0.788236 0.56753 0 0.29953 ][ 0.792157 0.570353 0 0.30102 ] [ 0.796079 0.573177 0 0.30251 ][ 0.8 0.576 0 0.304 ] [ 0.803922 0.578824 0 0.305491 ][ 0.807844 0.581648 0 0.306981 ] [ 0.811765 0.584471 0 0.308471 ][ 0.815687 0.587295 0 0.309961 ] [ 0.819608 0.590118 0 0.311451 ][ 0.82353 0.592942 0 0.312942 ] [ 0.827451 0.595765 0 0.314432 ][ 0.831373 0.598589 0 0.315922 ] [ 0.835295 0.601412 0 0.317412 ][ 0.839216 0.604236 0 0.318902 ] [ 0.843138 0.607059 0 0.320393 ][ 0.847059 0.609883 0 0.321883 ] [ 0.850981 0.612706 0 0.323373 ][ 0.854902 0.61553 0 0.324863 ] [ 0.858824 0.618353 0 0.326353 ][ 0.862746 0.621177 0 0.327844 ] [ 0.866667 0.624 0 0.329334 ][ 0.870589 0.626824 0 0.330824 ] [ 0.87451 0.629648 0 0.332314 ][ 0.878432 0.632471 0 0.333804 ] [ 0.882353 0.635295 0 0.335295 ][ 0.886275 0.638118 0 0.336785 ] [ 0.890196 0.640942 0 0.338275 ][ 0.894118 0.643765 0 0.339765 ] [ 0.89804 0.646589 0 0.341255 ][ 0.901961 0.649412 0 0.342746 ] [ 0.905883 0.652236 0 0.344236 ][ 0.909804 0.655059 0 0.345726 ] [ 0.913726 0.657883 0 0.347216 ][ 0.917648 0.660706 0 0.348706 ] [ 0.921569 0.66353 0 0.350197 ][ 0.925491 0.666353 0 0.351687 ] [ 0.929412 0.669177 0 0.353177 ][ 0.933334 0.672 0 0.354667 ] [ 0.937255 0.674824 0 0.356157 ][ 0.941177 0.677648 0 0.357648 ] [ 0.945098 0.680471 0 0.359138 ][ 0.94902 0.683295 0 0.360628 ] [ 0.952942 0.686118 0 0.362118 ][ 0.956863 0.688942 0 0.363608 ] [ 0.960785 0.691765 0 0.365098 ][ 0.964706 0.694589 0 0.366589 ] [ 0.968628 0.697412 0 0.368079 ][ 0.972549 0.700236 0 0.369569 ] [ 0.976471 0.703059 0 0.371059 ][ 0.980393 0.705883 0 0.372549 ] [ 0.984314 0.708706 0 0.37404 ][ 0.988236 0.71153 0 0.37553 ] [ 0.992157 0.714353 0 0.37702 ][ 0.996079 0.717177 0 0.37851 ] [ 1 0.72 0 0.38 ]] >>add_csd1 /0 get_csdsepcs1 sepf297.861 133.923 mo297.861 138.129 294.403 141.12 290.291 141.12 cv287.768 141.12 284.59 139.438 284.59 136.353 cv284.59 136.074 284.59 135.886 284.87 135.886 cv285.618 135.886 286.365 136.26 287.113 136.26 cv288.795 136.26 289.824 134.952 289.824 133.363 cv289.824 130.559 287.113 129.905 284.87 129.905 cv261.225 129.905 li261.225 128.316 li261.225 126.915 261.691 126.167 263.187 125.418 cv264.216 124.858 264.776 124.485 264.776 123.269 cv264.776 104.203 li263.841 104.11 259.823 102.521 259.823 98.9688 cv259.823 98.127 260.383 97.5665 260.851 97.5665 cv261.691 97.5665 262.439 98.5948 263.935 98.5948 cv264.589 98.5948 264.776 98.502 264.776 97.754 cv264.776 80.1832 li264.776 79.3418 264.683 78.5005 263.28 77.8467 cv262.065 77.2857 261.505 76.5381 261.505 75.3233 cv261.505 73.2671 li290.571 73.2671 li292.44 87.6602 li291.6 87.9405 290.758 88.2208 289.824 88.2208 cv285.805 88.2208 287.02 78.8746 277.02 78.8746 cv275.991 78.8746 275.244 79.3418 275.244 80.4634 cv275.244 97.9405 li280.011 97.9405 li281.225 97.9405 281.973 97.0997 283.281 94.5762 cv284.028 93.0811 284.777 92.6133 286.179 92.6133 cv287.768 92.6133 li287.768 109.624 li286.179 109.624 li284.777 109.624 284.028 109.157 283.281 107.661 cv282.721 106.54 281.786 104.764 280.57 104.764 cv275.244 104.764 li275.244 123.923 li277.58 123.923 li285.712 123.923 286.927 113.643 290.852 113.643 cv291.786 113.643 292.814 114.204 293.562 114.67 cv293.095 116.353 290.291 125.138 290.291 126.073 cv292.347 126.353 297.861 128.128 297.861 133.923 cvcp243.935 89.2491 mo243.935 83.3609 240.757 79.7159 236.645 79.7159 cv235.056 79.7159 234.868 79.9961 234.868 81.024 cv234.868 99.5294 li236.364 99.5294 li241.69 99.5294 243.935 94.669 243.935 89.2491 cvcp258.888 129.905 mo240.757 129.905 li240.757 128.316 li240.757 127.007 241.411 126.447 242.626 126.073 cv243.653 125.792 243.653 125.512 243.653 124.952 cv243.653 124.485 243.467 123.831 243.093 122.802 cv236.831 105.885 li236.271 105.885 235.522 105.979 234.868 105.885 cv234.868 123.269 li234.868 124.485 235.429 124.952 236.457 125.418 cv237.953 126.167 238.42 126.915 238.42 128.316 cv238.42 129.905 li220.942 129.905 li220.942 128.316 li220.942 126.915 221.409 126.167 222.905 125.418 cv223.934 124.952 224.494 124.485 224.494 123.269 cv224.494 104.203 li223.56 104.11 219.541 102.521 219.541 98.9688 cv219.541 98.127 220.102 97.5665 220.569 97.5665 cv221.409 97.5665 222.157 98.5948 223.653 98.5948 cv224.308 98.5948 224.494 98.502 224.494 97.754 cv224.494 80.1832 li224.494 79.3418 224.401 78.5943 222.999 77.94 cv221.783 77.379 221.224 76.5381 221.224 75.3233 cv221.224 73.2671 li236.457 73.2671 li247.766 73.2671 254.869 78.5005 254.869 89.1553 cv254.869 96.1651 251.131 101.119 246.551 103.456 cv254.683 123.362 li255.337 125.044 255.897 125.325 257.019 125.792 cv258.141 126.26 258.888 126.727 258.888 128.128 cv258.888 129.905 licp214.214 129.905 mo196.736 129.905 li196.736 128.316 li196.736 126.915 197.203 126.167 198.699 125.418 cv199.82 124.952 200.287 124.485 200.287 123.269 cv200.287 104.203 li199.354 104.11 195.334 102.521 195.334 98.9688 cv195.334 98.127 195.895 97.5665 196.362 97.5665 cv197.203 97.5665 197.951 98.5948 199.446 98.5948 cv200.101 98.5948 200.287 98.502 200.287 97.754 cv200.287 80.1832 li200.287 79.3418 200.194 78.5943 198.792 77.94 cv197.577 77.379 197.017 76.5381 197.017 75.3233 cv197.017 73.2671 li213.933 73.2671 li213.933 75.3233 li213.933 76.5381 213.372 77.379 212.157 77.94 cv210.755 78.5943 210.662 79.3418 210.662 80.1832 cv210.662 123.269 li210.662 124.485 211.223 124.952 212.251 125.418 cv213.746 126.167 214.214 126.915 214.214 128.316 cv214.214 129.905 licp190.007 128.316 mo189.913 129.905 li172.343 129.905 li172.343 128.316 li172.343 126.915 172.81 126.167 174.306 125.418 cv175.333 124.952 175.895 124.485 175.895 123.269 cv175.895 104.857 li166.642 104.857 li166.642 123.269 li166.642 124.485 167.203 124.952 168.23 125.418 cv169.726 126.167 170.193 126.915 170.193 128.316 cv170.193 129.905 li152.622 129.905 li152.622 128.316 li152.622 126.915 153.09 126.167 154.585 125.418 cv155.613 124.952 156.174 124.485 156.174 123.269 cv156.174 104.203 li155.239 104.11 151.221 102.521 151.221 98.9688 cv151.221 98.127 151.781 97.5665 152.249 97.5665 cv153.09 97.5665 153.837 98.5948 155.333 98.5948 cv155.987 98.5948 156.174 98.502 156.174 97.754 cv156.174 80.1832 li156.174 79.3418 156.081 78.5943 154.679 77.94 cv153.464 77.379 152.903 76.5381 152.903 75.3233 cv152.903 73.2671 li170.1 73.2671 li170.1 75.3233 li170.1 76.5381 169.353 77.379 168.137 77.94 cv166.735 78.5943 166.642 79.3418 166.642 80.1832 cv166.642 98.6885 li175.895 98.6885 li175.895 80.1832 li175.895 79.3418 175.801 78.5943 174.399 77.94 cv173.185 77.379 172.437 76.5381 172.437 75.3233 cv172.437 73.2671 li189.727 73.2671 li189.727 75.3233 li189.727 76.5381 189.166 77.379 187.95 77.94 cv186.549 78.5943 186.456 79.3418 186.456 80.1832 cv186.456 123.269 li186.456 124.485 186.923 124.952 188.045 125.418 cv189.54 126.167 190.007 126.915 190.007 128.316 cvcp101.126 89.2491 mo101.126 82.5196 97.8536 79.4356 93.835 79.4356 cv92.2461 79.4356 92.0591 79.7159 92.0591 80.7437 cv92.0591 99.1563 li93.7413 99.1563 li98.6949 99.1563 101.126 95.5108 101.126 89.2491 cvcp112.06 89.1553 mo112.06 94.9493 109.537 99.6231 106.172 102.24 cv102.995 104.764 98.1343 105.885 92.0591 105.885 cv92.0591 123.269 li92.0591 124.485 92.5264 124.952 93.648 125.418 cv95.1436 126.167 95.6104 126.915 95.6104 128.316 cv95.6104 129.905 li78.1334 129.905 li78.1334 128.316 li78.1334 126.915 78.6006 126.167 80.0962 125.418 cv81.1241 124.952 81.6846 124.485 81.6846 123.269 cv81.6846 104.203 li80.75 104.11 76.7315 102.521 76.7315 98.9688 cv76.7315 98.127 77.292 97.5665 77.7593 97.5665 cv78.6006 97.5665 79.3482 98.5948 80.8438 98.5948 cv81.4981 98.5948 81.6846 98.502 81.6846 97.754 cv81.6846 80.1832 li81.6846 79.3418 81.5914 78.5943 80.1895 77.94 cv78.9747 77.379 78.4136 76.5381 78.4136 75.3233 cv78.4136 73.2671 li92.4332 73.2671 li104.303 73.2671 112.06 79.0616 112.06 89.1553 cvcp138.042 89.2491 mo138.042 82.5196 134.772 79.4356 130.752 79.4356 cv129.257 79.4356 128.977 79.7159 128.977 80.7437 cv128.977 99.1563 li130.659 99.1563 li135.613 99.1563 138.042 95.5108 138.042 89.2491 cvcp148.978 89.1553 mo148.978 94.9493 146.547 99.6231 143.089 102.24 cv139.912 104.764 135.052 105.885 128.977 105.885 cv128.977 123.269 li128.977 124.485 129.538 124.952 130.565 125.418 cv132.061 126.167 132.528 126.915 132.528 128.316 cv132.528 129.905 li115.051 129.905 li115.051 128.316 li115.051 126.915 115.519 126.167 117.014 125.418 cv118.135 124.952 118.603 124.485 118.603 123.269 cv118.603 104.203 li117.668 104.11 113.649 102.521 113.649 98.9688 cv113.649 98.127 114.21 97.5665 114.677 97.5665 cv115.519 97.5665 116.266 98.5948 117.761 98.5948 cv118.416 98.5948 118.603 98.502 118.603 97.754 cv118.603 80.1832 li118.603 79.3418 118.509 78.5943 117.107 77.94 cv115.892 77.379 115.332 76.5381 115.332 75.3233 cv115.332 73.2671 li129.351 73.2671 li141.22 73.2671 148.978 79.0616 148.978 89.1553 cvcp57.6656 110.278 mo54.3941 94.4825 li51.0298 110.278 li57.6656 110.278 licp76.4512 129.999 mo58.7872 129.999 li58.7872 128.502 li58.7872 127.007 59.441 126.447 60.0953 126.167 cv61.0298 125.792 61.2168 125.044 61.2168 124.485 cv61.2168 123.923 61.0298 123.082 60.8433 122.334 cv59.628 117.007 li49.254 117.007 li47.9454 122.148 li47.7584 122.895 47.5718 123.923 47.5718 124.297 cv47.5718 124.858 47.7584 125.606 48.4126 125.979 cv49.1602 126.26 49.7212 127.007 49.7212 128.41 cv49.7212 129.999 li35.3282 129.999 li35.3282 128.502 li35.3282 127.101 35.7955 126.353 37.2911 125.606 cv38.4122 125.044 39.7208 124.111 39.9078 123.176 cv44.5806 105.325 li43.7398 105.044 40.6553 102.801 40.6553 99.9034 cv40.6553 98.4073 41.5904 97.8477 42.0572 97.8477 cv43.2725 97.8477 43.3658 99.1563 45.2349 99.1563 cv45.8892 99.1563 46.0762 98.7813 46.2632 98.127 cv50.4688 81.772 li50.6558 81.1177 50.8428 80.3702 50.8428 79.7159 cv50.8428 78.0332 49.7212 77.1924 49.7212 76.3511 cv49.7212 75.1363 50.8428 74.669 51.8707 74.295 cv55.7027 73.0801 li56.2632 72.8931 56.9175 72.7061 57.4786 72.7061 cv58.4131 72.7061 59.0674 73.7339 59.2544 74.669 cv71.8716 123.176 li72.1519 124.111 73.0865 124.858 74.4883 125.606 cv75.9839 126.353 76.4512 127.101 76.4512 128.502 cv76.4512 129.999 licp34.7671 115.792 mo34.7671 124.39 28.7857 131.213 19.9068 131.213 cv18.1314 131.213 16.3555 130.933 14.5796 130.372 cv13.5518 130.092 12.15 129.532 11.1216 129.532 cv8.97217 129.532 6.91602 130.839 6.91602 133.176 cv6.91602 135.232 8.59815 136.448 10.5611 136.448 cv11.4019 136.448 12.0562 135.886 12.4302 135.886 cv12.7105 135.886 12.7105 136.167 12.7105 136.353 cv12.7105 139.158 9.53272 140.933 7.00928 140.933 cv2.6167 140.933 0 137.849 0 134.017 cv0 129.532 3.55127 127.381 7.19629 126.353 cv7.19629 112.334 li8.31788 112.334 li14.9537 112.334 10.9346 125.232 19.3462 125.232 cv22.898 125.232 24.9542 122.334 24.9542 118.876 cv24.9542 116.446 23.4585 113.269 21.9634 111.306 cv20.2808 109.157 17.4771 105.605 16.3555 104.39 cv12.5235 104.39 7.85059 102.708 7.85059 99.2491 cv7.85059 98.4073 8.22461 97.8477 8.69141 97.8477 cv8.97217 97.754 9.43946 98.0342 10 98.0342 cv10.6543 98.0342 11.2154 98.127 11.2154 97.754 cv11.2154 97.4727 11.3086 97.0997 10.9346 96.6319 cv9.90674 95.2305 7.10303 92.1465 7.10303 86.6319 cv7.10303 79.4356 11.6827 72.8931 19.3462 72.8931 cv20.5611 72.8931 22.4307 73.1734 23.1783 73.4537 cv25.0474 74.0147 25.7017 74.2017 26.543 74.2017 cv27.3838 74.2017 28.0381 74.0147 29.066 73.0801 cv29.44 72.7061 30.0943 72.5191 30.8418 72.5191 cv32.7115 72.5191 li32.7115 89.9024 li31.3091 89.9024 li30.4683 89.9024 29.5337 89.9961 28.8794 89.2491 cv26.7295 86.9122 28.3184 78.5005 21.4024 78.5005 cv18.3184 78.5005 16.6358 80.7437 16.6358 83.6412 cv16.6358 91.6788 34.7671 103.174 34.7671 115.792 cv1 /0 get_csdsepcs1 sepf301.253 125.973 mo301.253 125.565 li298.181 125.565 li298.181 125.973 li299.477 125.973 li299.477 129.897 li299.957 129.897 li299.957 125.973 li301.253 125.973 li1 /0 get_csdsepcs1 sepf305.303 129.897 mo305.303 125.937 li305.285 125.937 li304.073 129.897 li303.701 129.897 li302.482 125.937 li302.465 125.937 li302.465 129.897 li302.033 129.897 li302.033 125.565 li302.776 125.565 li303.881 129.069 li303.893 129.069 li304.979 125.565 li305.734 125.565 li305.734 129.897 li305.303 129.897 li1 /0 get_csdsepcs1 sepfgrestore % PSGState%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (Marijke Staes) (First Digital Services)%%Title: (BOMBAY_S.eps)%%CreationDate: 07-09-2004 10:01%AI9_DataStream%Gb!T<$Zd:HP32^orXU#hTaQ-aVHj2%nF54>7'k"loaPagr7IR"M%'VW[:Sb_8Hh]]0u*_Yb63o0h(?f+[l<>/g1mY&!`6s^,(V4,%HZjT4mdBbmh4(bJ+$Wo>.5&O%Q=KR10o*`SBE*ANjmMZCc,ra0U#F/WM-<BXb/Hg7i`G.oU>PeFot/u7h:%:;qs3(uj5tf?s7#g*%in=1Wl/hVN^Y@U0gg3,qj(\Q0??1[:*j=Ge5$@I6!N29Vh@fD0mcfSrrqOTU0I(Mm4[.]Zeq'16?`ZKlqMWZQQ9MqBk$L"g;9R3s%s7UfgMPe*-<lm!"qA&RJ]@\R-O8SbMO'h>3gcRb`>Wpouhu,VTY<S"%n#pnQY6:c&8se^_EI#:qp?LK58I/L7/,JS\7nXcZ^G!?H%$fI./7@KY)5L02(s"^H6qsV"SroX;g]JrDomhh,'Eh&Gerfcg=W$hRkNgk[e?ghmim]W4*/D)Y<n4RT4CC?:??hLqn6m<to47B3%%<6VuCDg"?mZMa(SqW@51rp`)/b_qs+Onnk4l)U:<PAmETXaD<UbG7<^QRpb'I(.urHujN'"BGLP1;IPsYBP?)HQQh2^LBnkjRK-)%q"j:7c0gEfp4!#ON;[:TLO/4VGINo?5OBNa#%,%!h0j_O00J^\L/:q"11bhCWu,>M\q)i5qud$c%V[r3gTl??>`=7hg>Ih+nq+7B%Mhdc\2g:l"hcO+"b845uG7S'KY+ImdZj[,5'd%g?n/9KC3oOh.+lY/oV'+@Y:CfCfeJLi@Z[=G/<n[C"m>k(99RD*>h,VVHbHJ[-%GPg[nl@q:aI"p46(nR:\K&<,+4^AXlG9*%M]_c\op=%LYEUdk<T+LK0,<ec:k@W2i&F_aa>U<DdI*1",(;6PGN+bZ(NVGoB(sshQ%mC&!W$JL_r2MHV,]+hV%"g.8QI%o/'K3"HNH>YXNZItnqG)NEUD2d\lh;\9S.t(sJ11-H1gek5KB=f4@mJ'("d"G3%!_nYP\H[r\%M)M"4T:if96Mc9\I,Z(n_C%ec50:m=#bRb/^O^t`gf(^3pI?a\Kho)/DLj\@@-5=9iM(8tT@-XdQeBR;ASuO4be2&r[?)K;!e'j^%80U?n>-<_#n/JJp?^%^57J_U"I,Z*D'D^ZeAe"s9BEe8%.8gj3&\cEdEQ=pYR!I/Q-8V'^E#l'6DiHD:\]c*NQ[-]$A`P0kC!hCV%#1PNT"Eio[<6J:gLJP8ir<@\e'BtENZiP<-B2,_%m0Mn9%\hcRLRYG'D8XRd;a_Fj>r7rVhdpuJFh+^F%5Vo8Bsc";dAl#.7[O*p%?%->H@[Wt8,'2_&N3MCcd9j;)l*GWcXApjQnO[k1[(GS9l5t>Q%Q-m\.5rl[*&+/-8b?&$[(3X@[en4WdaPaXJ+-[TU8pN8b8't-%5N=0LosaiMSkYCkqHJDHP4/6OIWCbC3Oa@uqQjMO(&]^KB4pd@J'60tg%i0$qHJD$0''YDQCjlNLd-[]n0rCCn*QVB-MmYM)5llt%Yhj9HL!P3pr+?B$6<\3N#g#HPB=]5-S.B>G4`!pX7&-=!EV\#NMeDEq;coAMK/0qc8DD&X#VP.8n(A^%;7+UihC$&+O3`3G"M331%E:tbeX7N3,1V?V,Tc!<cg/Lhe;toj:7n_X@@Z;`&4e%_pa.r,@(L,nF5T'S$#hO=`mbi;b[PXn)BaFK3>83c>9jG%'Gl/uM[uo6E%k./c-GAqS@?[8So9'=W8$FU2I)BnS#MKGt,pQ[@n!7(agW)QR24.ct+Gj]tJc7a$#3l0FU8**s^ZGF5Nh%X&)FCB<BBOIjO"Lg.9%b_tkUn]%+X13Bg!+Z,%GkXkk]BH]Jc$^+X_Bd'6=_km=C2!^7lN@LW+cpiX.8*ObjeKu>kD6.bfh.C7gDg/7J<G)Cs_f'4']u.f_%66Vm=?>l7sVWEeQ@O6ZQ:%'#3H+\,LYpO%I%X<FRZd+!d(%'4I68U`4L9W/h8b3DWgtP?h)rsje>,6@2GQ`jh5=DE=rlV=SF`fc[%3oB/$RbFluIEkr?<)H"cZPK7Y1"Vpfc#;.,fF*V?=,]7S[8UH('2XJ3?*q=9BJED"17;i<\>D#AQ;Z0FgJ_r#]g!dA"2C`rkh=JI%#[6&Pe_3bc[BDcX\YbB<l"V6`?<,I>=)qr$D`0M[-*b<=qmcf5,CShM-T5":289OBcts9STKJZ&Mf1C+]H"&T3Xl>!%3C-Jk)O"m%-jfR"l_<"oO_B.edP]g^_$>kIV.j9/9J^HT(H)=OT>KAuOl?Gt"*,7!d!@j]Rl1=o@,-b]/#bGC*f%:2YP8$D%5qti7e\O0?.O(!%Dq+2;^Fk\r8>J$6gJakL.5^:F]MJ90Dp]e^[CTt(aEfZqfq*"5S#V*\Y(pgVk=sQE$aD/ELUImgkkEXL?EpnSQD9sRkMpp_aOY`3%e/5$j@UbJ-Rp![44G++`q]V4mb<]O<F0E%g?)rd-T?=WaPtf^CP9ZSb@Pd8UlmOdXZ5J@iV<3?MOkk`9V^)ph]%DCp`gQ5qN1Msg%[2@?j@+4A=O\%]d>"S=M-FS`&P],R/paX`(Hfe232,NfAB[S-%i?[7VZkpn;!mRhQ&tN1IaiL[5W+TSq@b%3S8(RHFUsPl.ja(`h%]KV8YPm3_a29kM+Y_b4ZMBu<lf@=M;Ha27qM();=i_TuJlXJc;cIXu7=i;=<P0>onD6YhmIG't,Tg"+Fk/bRTjcgI\?F-LMq#$^8%7:U<nO5G>rpbg<lAB\0bk].MLca70YNh"3`VQME?Tfoe$F\/)64`?Gp%O6[eV:E^]j+QQoC([OEZh?U:$hB0%8m'b*h488sJKu#W%W[q=)31kP+br'oV+Z-p3Ksi%.2k7&DhnMV]h=DK44B/]sQ*A2bfm6*RgKbfq&/,N!HS3c-f\3X&lT4=PQK7KQ(Gq%TF4PCfDCbIN%oOaE?3)nKUG%Ai/O4N'%+&YNe+8YiGfnIQ/9GA&oQb-,7AtfF3J[`ni*T,1U.lH6`BkndP>-BGUqpbVAjW92)OVJ3nK49+0I?CU'%:&Cr%>P[*^?1V%]oBdX7eJa+[)p]&$V8N2]/=4s-l\ru:r*_)n,UZ^#['lnpf$=`f:dNYo'jTq:6.[piokggmE?<4$(&<ioKmN!W%=4U9C6<6rk@sX,H:i+mdV&.j0.`)9j!HRXX5Lh!*[oq$`!BfGR8ud4fe]FTaQ0$gXc/TR>VoM.R*nAksk&KO(5*g3#Zel[nH9/YR%>0=L0@^Ahn\R"__^)aBCk3G\5Ts>0Y(/6<q/*fc8n(LNO5F]"5qrcS68(ZAgoY#$X?.=nE.TndcWd)[-f%aeG&>Z<'2jp\NDC[H*%V9Yj-?1IXbO<Ti<g3S`a2mo_u?@SuU4ne%iV-I*4L,8V][C6u;a/sdXIa.AmqRu9)`aJ,+.[QI11uHbcbZ8`=:D(9u=Gcn/`kTFh%W);,\aqEfQjrkZChKi:mja^S*MY#JCPi_QZU;JHZj&9g%*N`+S2En2<M&l4nYu_,?C5HetY)g$Bg$c$X1<ncnDO=,C^9,m![EpP*%?7iSB)muTI6f)lUg3eSd1CD001CqTRB"g_+g)1?#%TY/k5&cfLR(W_(*kA;acDB7[%Yk[bbOp9]D:.9iE]p"LPq#;?R>$bN.`N.r%/>Q4p^)%GU=rhd5>W4Ons*<dZCRO=t`N^^1>AIFPl3b,Q%-Qr$i@+@_S(Gop9#L?S)F)P(CaHH"C@go&3d5+qD>!ik\Qp1V^lL(S%<TfD'G&c`l_)^)_2+q^HMe(A%cD)&Q2>)F;<,B&"ZM6Lm603'6N4ZR1U?qKq.Re*1Ad'bHR'&!iMl;?T="cqrS4SWa4TP:]eKLg`%0V<3_$K(IQ;`0V=T@ijmC*Ym>#\mpH]OJH3]IWd@o3D"\gf62&G;NrXQG$5k^*dqFb^qEgD67?)F5Njnn@Id!ZK"eo]o5+PMsYjm%2e$Fkebc?'/^(GE`JUca+-0]El[@A.0s1S);`,P(UJ#IUec]!fO>@pK;_hb>pRqe2[[.rb:04'i<,G+-*XDStVq.R.Fo)*qZ';_?%LU-;=g+$1+kf-X2'FRohD\3h%M72kkULm^PokaG7FKK>p%n'4d0kQ^'j1"HPo%^_G4ntWGaf]HJqpnfUQpoEq/Gij_IbMC@c[T*+%EtCie#Q$4(!QC%Q>.6C)XSHai?2JQp3JA6:%W&W'csrm)AbldD@(Qb_dCj0+s#TnT%NRqliQ$9qK85`6PB,%,VrQRY7ldPoW!@3e%Z*PopYPN>?/A=m1rjD`@j-P4erAN3cg0/o>O'e0LT8@2d.W%%eS8HR'O1K+8,$CE2<`_@77bOfSDgV4*ri`Y#XR.ln:eJ^Lk[88s%$`);Hri3F%HpUFpqOJt2]&u`8e7<`,%Vs&^<(aKnXd,#ZHWEbV?a-u&N2s@L25H9'^9ue.2#ElJ!UP-3q6_QY:=XNjkNqqZ$sOfF%@[>QOe[aC9PKiW3NPeFeB?&KS-CknS\LM4Z;^lKg]q,R?O,TL-%Ep)0Ft)hQQ?TK+*34Ombh%JIZ](GUNLoOGbUP3A\tX1;C>*8_%QShQUEDsB!ppeVIncIcTe*5$HGfVnR]6sC%Xm71c]:W81+.Neel:B)iWhn$fqf:uYo<TJ/=E_iZ2u/;0=n`#2<"bb1D(R=3``CQ)%eo4_/SU[indpAr:hJJO->SB9%Ce>CVhmrJIPuLs/<alSTV01q:QY,2Wd[4g=%_\jF],T*ra=oWBcb):n5D>DnXTN7]UZXns516ud%')#e)--7.&H7bSG^<\G"?K7.Kq:k'2(/KQF[YG/q4P]DohoN5)GJ<XumciP3H%:L]^\n#$>2S,ofnRK/D\m;:G%WH-e&0`%)]JO9%jn!EYm]LGOYEs/WZudBA:4^Ssl'H%d(Oo]fNs/8NJh-/"g\&!ko/:IGG1qu25`X-,.<W>6\2_7U>b#*$0?Q^16]2c0`HVtIr.Va"%LijNskNA?+Zh*j83R<WTF<8c+oC4r5qf?sFCpogkc1ttX3SUVoAWo&e'0"BPgk:[E\.*`^Z\u0]Zd%1Vg%qe?jg0%Ec_e&=/=cMl%G;_#'g\&P^I(`[TXk,N_[SH.uT%;p_XSpkTan_0ZEaCZcXK5&D\YKk]<5oQ.0<UBdkDO_Z2u/CHU?&u..E=R40aH,=QV")p>UF=9%=^%_dE_7dX.?,c%T3NQXa,>0`2t8H%@u34C(ul=N(o!'D%Z>$_>tjG1AicF4Uq(bC;k0_!,e`l7Rn+^BMt)2MN+_0s/7TaM(rp>1%a"[A;NC2?QMf9^qi@M&t$$d+\LnsWP#f-`^-me@!rnMGiR:#"$S52?FacAW1n"$@ikq:c%gUK&KG/\$Z>]c/K*M,cADHI;maFRkV%S.3E@JS6ANVMPa=p42bgs)TnGT=m@6+J$;X4O^M['Za@6B.j^7p:,)4X^CJQl.Xh$BI50Ne&r5'4oXheIn%9SRLVchi*!(XTD#n;%`Q,a.]DpiM^FVTP4TAo>i9]>c>(6B0fu*A>MiYWa\UD*I[3if^Ma_t"lqd8_0,O#4VVa'!BsBo#6sop0rT-6LqI)B:5?n-WhhU</%6N?Q:!ma(/iUu3j(KWH(jmNu.O6O+FRjU`@l1@/1j,9u:mceH+PBcV4n\/Z'0Vuh/&c1M@d.2SUO2LNEqX\XtkP,!9R*4pm1.dlQ%I,KiH]("b>(o<6Gc8p*-Lqc?"QUHUof+IVa_-`r^DNILurH.r%IZIq:98.)Q"7Rrb4MQ9KJ&h!PrnZ=)n%QJB4C>k;J$iLp_"2+J%G@-G"T>"O$4hQ.>DY`u(rViSR]Ks4VUYt.LPAU9)pRnt`+(#9LX2b/(Rcem0jS>W9qM?7XH\]krIXa`Dl0W[Rf;EM-id/Akqtg<Y%%Cc58LRjIA?i0;aB*N.nc/Yqs^``LJ%qu.QC;7B-rRcmfY<&T)S*q<ko7N0rgcsR4d5$#fp\euZs4.b7OfQ+GbC@3OGl,3`0tV@B%mTu(W^Nt+qZr8^7hnI(YcHEE*]6Xk[W9)>B:,VV9:or_H00a@3aoCATbr,FNe\b2Rr=>N+IX_<Ca'YG<f@RD^H18#/B^dt(k<Ihk%n#4'@nUW7S,BE+r?Cnn1rRLmQD,?N?InKI*?%2Y7D8#f9qVgDue-p5=:KO`6irA0TE.?[H^;#!(\U([(;r<YNL.V=!kO>tA_XFkV%oli@lf+5L*g?(Y;9geK(%l^]K4^k)"iCgpGVWF#^/*%j-M8-<'IkaOd)5GN5Vtp8*h*&Kbk'%73mQHQSSGh>G%#p!OEU\ZX^Ahd*%OWH^c>)<=j^\K2@pfD22d8'!'3A]_`]R"_<0?J1J5#tf9Ng4%&J,Q;$lOVHgGCT?N0)Q`(CU=&UW<Id&0DICDb:dDSSG(!AJ,$WE%^rQDup&>ieNsYXIrnYKbNo-])X/'Gnje"^r`W#k/O2'IUm=.!nrmSu>pH`QjCQ3dKeGOQKRNHER5CN97q$b_%Ki!50'\1;I;t\u7%k08)l::D7C*F;P5.jM+>rg9iipJ7"p?LGOUP#h^5R)7t*B=,>OeW=rJ^oo$9;Jc2Z4P'Mp"e>UgadW>7O>osCWr-(N>*`5#:Ts2i%*aUM'q3>Q0q9X/c&%6lWY\R26@,"agGc:Z*pG_b+JIf1G'DPti=%@9(\Ck-!E;f%[lL+30's[c7-bA-YlfI0OTBeI(1MSaoMt_bL%`S5T`/nR%t4Z''k7UNfTHMd,Eq;p/ee*c2Wcgp3XIC32c>I-Mcm2j%>5`\9\BS%@q.S6Veo_Rt"l<s<eqjYV.kk=<3:R-I_k4862%[H?Q9:RCBk:\T9DNO'b:o$.]fDri!N`0U^HpY5.\f2!ZN=',:"]B`rZcFVfGHeRB4m?UP[+.n!bbK$N9q`jHXBfTjS]t\hc_FEYH%8(+b'GZEYIpNZS>He^c3^K]QE^O(3`l<q(Q@a4TE_s?.E@kfN!rqub0G1g#@\\$JPQ8a"MU\dP6>LoJY]Ba@Y]GQKbfYagmIW8ZN%HYG._98-^^kGN#CRps;+o$u_[2ob:NjdeBWV\@ARRnq@e->E@?gAXk"K\,tGV2s==?S7)p)LG(@/Ded(s6u&XVgcaRbV.ePnr<qE%4tK4L<F&_`=tHj^8R^k=\B8e:A/\K[TH);h@5X<XOR%TBr+[YPf8a,T/GN4;EEqo`k#QI?M2-cZ4:3i4B83Si7ZXT*V+KG6Bng=:%.?@[S'6Ck^QIp=TS]e$l)/nMne:_k;>D"65]8N%G>.JXK>9lfL@u`Y^qJ?ce;^SQI)F9%0K(hnf19L[bPrN8L>/_&,4^g2X0dm8"%Ut+ZVK:1C'X6<.FNp-S@""<i\e)5la6Q&$8m9!c4GiI5_RX?I#:TM<?5dr4\L`O!3\=DhW9.P*uTt#s^9k81I]GcNfQS.H$QuZU\%9r(!+QW9Wm=C5+X0_4^ek)r8qR+)ZpZDQV^fF2D'$tZ_8eJ.XkfE<uI^da8?%9^%m]+H]lN2nZL0H4q8%Da5%.FK'$`/_f:.[U<8%1JEET5>7lV5UMhl,3[W,e5g-Llmk1rn>$bc;]NGK7-<nb(3a]IWM-;9B=U9;]3*&jbpf_\aKQk@9pG(0EUk+X'IOJM6Z?Z*%Dgii%H;P<+BgkWr$4dj"QjjU-V>/!B)W]!o#IK$d-/8p'M.#h[RO5]7[NVA4A5TcIh)+XU_$q((0GR-]+i7M_Q=='\,*A>c3.^9J5d^m^%-<PrTjifY&]V!hK7dhKI^FJ;$4$_V"-K?N21a5-EJ6l&Q9Y(6]T+XZYeKF]/nbU^&`p/@7,K?MVNUB5V*=H3M9BnXNEOfL93_Y@4%OiiKOOtd>2*(m;(A2?f>CN1$,[N[Xr-Cc&IX(1!Rj$`h3'06]Rb/`Ep;MW=nNpI&pTo&G\(u\Yg,I>6;N[MD(+QM,$]c]0t2#V-]%7d=R-C'a<[7t([aBcJ@sMp(AjD_203"=H*^<R*iRRhLW4'QU;u\09I^0p'`'dpu[FIO;A]/h'4[<+AL[qfOHkr&DOQN+@[,;/h1"%*6GN:O8BA[O_pB1?O*<nKT['9\%F1S-ejNK2'Nft>]R(T)<6f*maj0#[Uh]gdUU]r6HD]Lgs/WMD\YMj1:kOMX0iheCNubG$2Rp5%1<DXP&1EN1%N1-p&g\rh'31!]/_n.u6KDMVC!c(c!Vo#JM47m2IMD0]hd4s]+_$[d=A9AM:P/cY]_Ip-2o'GJJKJp(qfN<2N@:W;%%5\4CgaT2qg`*1$:D#A?ou&lpaprA;9IEG[+D&m+e1p#Dni:tfL1E`+0/UubOo!,X&K>lf$1SFR)5'579;qXd:S:7d2B'bJ3F`DL%N)1u2!&U&CjED#aDFoLq=qU"u#Vr2(8F\DbJpp+8G0[NGP/[K12_d\*&#o9'(cXVbL[.KV7:)#U%hCYID[LRD0;TBt_[>-_R?2(G%%2*l2rY.sD#pG-R-%nV#"HuK_o`X/DY)$$l1J!nLKNE+k[j!GkePm-$\UJ!`D(lU[`0,]iTD2/2&8;pWN[+aj6DC1BjJ5_h2<fHf%qJ(1MV6EQ0:,9(>W%fHkGZi.W+iB[9QTA027j,'UA?S`A[j,pNq@q_g8D#"oc#@(-e7$S@eHo7\W)XqaGA>hP("%;09P.'FAN,U'%69bh#$laRAVm<?"ONu+21lbo^:Xc-QRP,4_D`jg<LbrXG:8@&5@[%u[j4GY)1kH4!S]E$8."VXGQiKNt'W0U$+\[]YUjomW8AqQ5%Mrb]5/-Sq/T`lka`P)?QH.nKT#=o:o\."ukFD2k$)s'Wi@;dl?2?5/V"\jPjE(u3E"$aYEH`K>%"Kb3_*g6XLJbjm2Xee7k#&=M^%`[?P/1oaq!'OM:n1s0(2<?m9\0rGmU-5>X5JJ&D*ZN_c77`G'p@rdHoR:@C*@GmN=[OMUrbF?SK;p*3[Cf#XEGW_pKQo*6!B!+N8%NbGj,0F@TXn]5*$+;q7M,TsIKNZ+#]Je%cG!>CS^JB,kPO8pPu9aipN$V1W4"VAp.+<ZB4bOL,I,oA<O73tE]oRJd93$8Bc1hS9V%COkK^-QA245&E_(7fc-s2jdOh0e";fT13H4F^iECq-VoRUh?ujOWkt@mk%L?1-f<I:2D+]__^euM\C/Gi"/3GUf8L\2[31"lL*o_%A,sRFO=RjM22;@+:&M2C1kugCma"3&iE7KoW`]b).B^LkA=u=P9[3(2q_jVOP#miY[`QkCC7&JkFO$)503-s[8d&8UT`oNK8'<es%RZ/Qekh.jL9G.Y%K[,P_gED,>lssnDb7f:WX20q]DHUC*'9!:;9!dm0@(i:BY\#p6>c9N7(dT5qp4b\$NM4]#!aMC`e)1J11(_]p%7V$$T8P9I-Ld$Cu$<>+00SGZEaiuRWUM:5GpVLq]CR7l\#S&.hrX;.@$p=ku4-H$>`X?a;*3G]r!%>!EAe'\,ifpS^1X&WkTf,`J%WWXa%J-CO;YqoISkB'_)0gLm@MW(`_4Vp&E8h1*SltK->W*$/.!>4AUZ\XgpkY+]!`&@WJYh3R8h/l&u.2hZ+7LD7l#W<b8a[r#d%q07^7:ln,h`sooO0V1Ud^^<U;Mp"4B/]\&u\?`Ft,oYRaa6F7P.jq`u?>p7maui_!>(QfFEO".s,N^NUQblm6KEVj]AGQ[)LANDX%dfU:S/lpPG-4j3_)Bb%/a;q4Iht9;ZN#bB_$jkVeQn2-633++](MJ*]FR3&rJB,_CR[47N*+:cX[j;j.b9$EYOG?)d;2BpDA6t;j%IkHS/1$5RY27j0$igWt?(:.tk-kcUmMpr@J()rL-"P"SsP.8o/A,luR8I_/o&c3ghFFD.!#"_W#l)`FTmo@Uk8@=NE'Aa=MPLe8A%3#\EG6MN6ArYeJZ%E4c1o@u;sDs>7A-;JiPDX^hNF=,l^^r4VOJ.9ruN=Ih*]Nk5`@,T"hO+(aZ)5lNZ99$[4EWg4KLgD?(!)j^C%EkMH26r(^I.r5K![H`n";Q'[1gf3ohRt^%82&'?O?5fo32%3GU"@??Aap(Y!8uqbuRH7QZ7oN=d;M'tPG(Xm<C9T<YT9,VSkri,b%XMNU2i+Z$Ee6.n193CT8\L':@T+".jgPd9mWYK6"<Cdcp$oJOJm-An:M%h;3-B\StM<#**6kW&LKk!af6/Lg;PmsQc)^4>%3^ugU%0dWuJBGu_q]2i.>NB/XKO#2Yn6p&uk8-@C)d^'20/.sb]@nN1YDKt"pUb"$+!1OUk#hSBW*bg_-81N1G8^A^@lGjAH">^OnMUCW$%"opEg.*1=[ETS]knZeJS\^/@YCVc)_/"XF$C1(mG@"sbMjR"nF-5:5BDDh:%a#-S-7<Fk>:U\^8$Yo0eAg>oj30bJf,kjUZ#tCL1%l=bQ+CTKs&^8"!j]Oi#,?JSk]0FVnT/f6L^46Dcl;ZOK)8\(fkj8&Ab?nL^-Ji`*W7[f;1(@*IXj:G6eD4uW>oWK$/3;1]U*I++A%qShu.bUd`p+R4<ekX]oBMDU[fO@7(0\:'-9@@.9)&*#4[KFeSiI9##69c]8rfk&on-%?LO%!Uc#5%8`A@hUMAO<OeuR27\BA('Fp%<f)CnO&A44B^Lld:+1B]8-qD<MMHK106,C#dML'Tg#C+:,iYUcH4jho)U<lo'$RL#`f=/OR=.=rkpBs`UM7\9Q;KU90Q6LhB$9Ys%;V,-HE`0@Wj$9T56*dT2Un;%Z:%NZ:UUt2_VD-1-`hLH&%9$>KOq]PZARt'mc2"lV7nG/kK1OW6!of=2"D:qIIiVOd[U`BK_T&C]%rJlTCp;BLDD:E)'pRC_a&5\/4q\2aTeWqPp,Q6m(hN9qm=<tGTKiWb:FY%K.Jp8]?G)5bB[?r^FAFSX3!La8eR8Wb4#0Y-4CH[\/%UHru?MG:$a%\.lREU!cX_8pehLFbDW<Ac,=LFdR6CmgBtaD+&379>Ota;H;lJEh*/>-Q!<Ol'mn77fG)E>ED:X+ma[\&(Fh>(2T!%lENob9`2S9dc*5SgStqAB7N_H,WZnie&FhU_5pL]5gY#k\*P1l+X)i&5WKC)JiBgCE9j+bYm*HPro"e9RfVQZ_@oIJjJc#<1t[V6%E)TLG9TdMhm2p5BWJifLd1K"-;>KihM!_=#W"C?,&U-^=U'U#8`7<6Q(>.#=AE!Y)2G^TYh@]C$;NEW9a:DZc)i,J9TfGt"AJ"L/%9H3)5du%ZFijkR@_6arNe6s'^)FOq#\\cl%L]9)MjKI4P+E)et>6-?.5V+6^i%:4S;0X]i35cqU<WlaliXC>faLa2PCaI_0+Nr`5%V%kF?/=2OH&0`>fU/OS?E$jGEl50\0O(J58n!H@u)(P-<%]"\1XAh!-?Uo(l!HjmtKu'E0n=u!H1%P&IT*IuC!QFG\#ZHC;D3_AZ%8N_1Ym6K_4fQQJ79Ut^B=XtX!9+n5lFC_2oa#2)$@@`:b61FSb`rc&@,d<*K]O?fMiP6.+#ii$j,Y;*#A+$m>3<S8"dLW'!nuhP6%b'rsu+l]hEi[>!saDN(KT@@C'##6<&.B#mu/0%X`-Sc]M,HM\EZ1%eP18sE*faolu&lCL:<hU;cYpB%>DLg%Em$i@-#m<A-j_0q>%7`-cGkU*7JU0kmTHCh##<2!j[+`(.9D/U9C"FV_(b+ODEEHia.WgfNdCtM6;S8ge+;M+*<)58ZM#V?24pph7!!:,asFD2l!%8g^>%ep95j^X1pYVGlEq;E",?<EaFaJbPf=n+=C#'#eF`jWb'?!Kp6B,*mWd]/8/>IIebWfgoTG(#-'nF2W6+_a*:51+s.87-m@%0Z9Ir%\RrgDM.s"A>?='P;HB"kPN.*o+H.P'U*'hHU*du'>[mdf*g+/c!fntGN>Zl+_N8m*@:k,gi4@cR0P\"?e=jf('HFKJ:]W<g>]c'5%mc%'L+]FF>Ot!aXjhhQ;_7his-W^[W[1sZ?iZ(Qn3-\pELPj/Tq_<h"J1N4>Jp7ArXO*Otj*:[\+IshpJUtj(,c9[<]U_6\YfQq+%G0qaR&]=Z4Jf"p89.1QMJm?=:#c0)"C`qhI"iB@bhSMZmc+A9;ak31?8<&PZM]'NC#"\B\VR3Aq$m5gSe=gu&igWgCVa/+Qp^*E9%HcC;ugbEb-ih-LBlTNS+n[u9_(cet%[^TA2PX?X#FR$AC`45j]7+jT3@FS*]A4jsX3&X<=q=VU4<A%CBQ4cso.O`9ifEm.epAW]=%MLM#=''jA(/Q>mZM3G:<.ahh?@N+PeIU]51Jiu4r/5Z0YlkRoUDm1/H+VHCtofs!4q&!tY<sl>MXkQZ;l[bREm"WW:Hd&$RMV>(/%e&&daHFWF2$24Y)&Icb!7qPTcE&a7NF-%jh9$hUE&T]U-G9aV!2,(DCg;:NhHFPn9&+*["3jtA)\bDsANa54R8CNZX^fgG018kE9%N+B`/!kPke)1$kX4,O8:K1MD`bT>Ee'F,P.?%GWiM2U.cUVP&okG<XP4/]a%j,bN[=oAJ85WV`)3-337eT7G^Jc_)Ze\,<3qDYSE%-`"#M=VB"^GUY=g92\#,8[2l!=D,[B-0*Xp<,J[=')Z01`hD?8hDAgq8J/A+NYtKaYpNYn),$F6:1l/X,K>l\CR0XElcE:&!q#=e%N?r]S[2!s?Nq;'r^jXlQ<_EK]VIV9X;q!<i&[eEh=\DXDW1+ugX<l8q=QQV19gR24[3V909i1=s8W'Gm.AiDa9h%=UFqUj(pD.Og%^kS[uHYKgBeJHoL7YF]8ef.&2A61>4MH&G'5K7ME;QORK.R^8g\3tD"Ur2CFp&f8Uc,><R-TuWp7,u_NRb5E[aGi)f\7KKl[W&]1%:SI[LS!mObg7;*f^hR1gLBeKe0/FN.^5?V_8jh)!c4*4leiJQ4JK5EJaQ#,THSE?U`S)>[pBtgR3"(NT\"0QI'u<`tV8u$-#O>e4%;1:#r=Z90OPtF">-p&/ZA)i4j(HhQmEG?8%SF%kI!^54Y/E"0XE6ch2LiTk4`d?*8!JPFa?3<$J"*F-@*AQDDZ0&_*.C*2oIVHmo%n;d0JSO.1IWl&KcoYEDE1#C*!M(kf,US`Ak7FZZAb^(q]RN3%c'p`b'*$qlg?p);V"P5Zo2[3f,]H,jVM^%H"'N7fhiJh>r&#S2V%Z$$B#d:oQY9P35qL;SDA3%rEEb;r):-Br76e9c>]+g*.^nc$s=iX*j"<O$]P*$L]TR05EMp`Pln.]QZi7M+i,Z_3tIZ;iVjiAf@S%eO`HfW`Zk8+];/#ZTqBYc\%[sNl\,m%18l6>9f\P7?jn`ZVF,tB!f3W+.P'%P[=0INA:GF.<r-a6%+*$,Y-_*5O!sB3VL/2'&$_I%H0j_b&f`G%!>SfY0GmH2aJ0oaSMYA1Wi`Qh.bGQf#'&:aLp`kAMNF'!/pX?cNoX/Q^[Rc'q5H_BboA%s4!mG+4*!J6;tK*T"(>\_%RbZ=]E0A\@>28Yqj3\uPAN6[16Xg]YBWWP4M0WnD[`,2ndh#0I9&*fSik/uk7jE"c"L`];`3JnI#%o4,HU0A*M&W6`ggCbK4<Ei<%VnVnuUei"t!6Y3+bsR`e89TjkP&SMS&l8W!7_K8ZA!1:>P;'_@a)*QQirD'2Zu%Nh&WK?dX"h^$\i?FId%Uu2ifXaB8t\(oMk,_0%)bb;igao-'(8iV->7!#9,T3D5UlH>EBs?kkGhWH\puZ8*(#C,jmKaJK]Qr5$(5SBA$gQ@QdTrce\sr=sF<6D,UhSeTD,d=#&7u[H%#)"3_l[B$aPu?an7^;)gn;o0hhffTo+oF+i1H8Is`b8RNopMrMB,"3-dkKfpi&Y*_Xe.%5Vpro^8Tlb.6qT[%O8=>CZgfdX2(oVf%%F,^Rk%.@+)ro/ci##"dRB:]Oe0g#\]M,6CGaXR00;DW*]ZbiM'TTt`KH1J:_Dhq`Aqln`4Ai'&5S<ZEMH-j3"%kpEnQih%LYBO'%*7W+=Eq=rAh_=d[M*8&aI"A)m=CN"B0@MZ9A['"n"mkYg,$]&F`liJBGT"JhQbdDe->skp6M<Caf'Q)'[R0(3"QMc:,c/\*2hU]c%a]g^QWTe:i&Tol=ZYi7;k%4n8CYFc?_6ufQkC*U?bXT3R"uTo9-@mq.qAI9%cepPA+jKsZiRPlF=?!#CBo[#3HQ!^]i"WV5S58ee%%F\:7mD\\'q>Bdb3BJk</rt@fe+neFI**`(e+$;lqLEn3Qkd6?=I$h]@^QX5h'=A&=rABB$d/SDVX/P\\4s0Wf7<@#8A-K36Wi$F%(C$q0-"`sa8*5*seaXk!]\^]r-Cd#UI*A*n#nFer\cW@4E8[n3%Ztrj'IUN7]FY+*I'HVS#j9S*N-<2*::1QGA^,dq9i@%NL&VTX%.QCXB"MuP'Q,/@98`WHLLXE@Z/q,*3T(764/jb2!0/=f%ks/s*6=/]^K%(tlSNU:H0]Mo2X:ca2NEO?"#d;Vq48QO*iN_n\)@)el%Pp[)e!J#G13QBBFA/PcK9=>&7\CUb=.hb-8V[3&_X)(k#4=,cl&RaGV$CnatY5)+.(qa^>$<b_(M:Z,(P=c:_YNp]U[1*o!6%B4E%`\n`jYi[Anr0@tEYQVRFI.$<`0mU!>E,t@S[T\`[itOU9UDZsRn-h3I\Z6)Y?AZu_)'m?*)5A*T01UJ-7]Mr!'V*7lECBjG>ke:L%*erhB31c]7r6u8Q<M>PIp;Mmq:1Zt[4=/3U,s^s\?mp'??=HMagT%A&4;I5XN\RfL_]J+U!hRqsNti,<<Ynnej:mkAY0iIB#E.Xt%Vf$9pTP$*i[UCObT9uW>D;8IJH\5;`\3Ajkq=GkDE_rhSAQa@qYR.3ua2i2<ONhAWbejOA%StSDp0SQNb9KPb1+tt?.hojGj-!(L%Hd`Jf^-erib?h'@d%#h7R7P,?,TI0'6^#;+NqbWIlCesT1*<']"K\1Wk\VHYOSEE$CfQV&EZNssL*P")bpfcjk_`pR%Ur8oiJ85S%D-d88,(WFL<GqtlK[mHY90fAEMETu&/B@,?XZF<RA;8Si<<`h/GB:FZ73QbhS0UE@NnlOB\kT+sNj_f3\Kr^<dko=2/;7'qCKP*.%`"HL4)W4G2ZS7B=F.5UR;N4H4r.pPH6?HrZ3TYq'2S,OuGfe"%U#dI!S:m3W"VlSD'tVkY9WQA^AW;HL$1cpp]Ip$jO;%mH96GCW%J.kSg)?p.]$pVlkaI-H"F$0sVDNP])AGr:!m<hN&PrVjNfW_$i',_3@(l#U:bk3#GEaOUG0QHn#FmZd$'Q6`;*fEs-A!F]=N'O7<%ZWQ4lA+^RN2?`c,YF[UDErN09GRN##e3X>ZEWOP`-g4t\PpIS&nS&$Z93_SUP(W-DW!]XuYnA!d1WpoKT3*FMICY0]o/HmGdTod4%Em:=gF#C(-MHN'Ua/aa[N4bC/ZTP4l@7?lO,*&.bk5^YmS0K&!\InYN3bdM$<CC.21lZa#79a2oan=(G&qWH+)KIb6Jg*B!ejB\W%,c=*O$B=TlTu-99Bo'G$LQ;[_lr#Q%_88]_n\Uu^2g$UWkI3]F4pE3ej5hPY1TT\LJ5Eap\jFCn;2p,j's-r<BCa&AMl44gmJ'Yr%?k@>WLTOC:Y5&)Om5r/i>3%[YK+2ir>/O-fo^JHJUEEQt^j`U<bNBs!s7!5_(-+SElNZ$biIg4#F,W')0DUE?#W4V*KlLI-`3E,L%DB<:o(.>s4]X-TS<r;;\bjSGjnj^),UQ0;o#doXI-BQW9F)2C7c0gScP&^>50Rb+nHotfNQDoqM=^T4ck9OYaR+mHt`Sdg"(Gg]r%@)^-KkElqO4R;=o*GhW.S]_'&p4q@qJ%O3[^5:`FLk!2$fo)mi]<<<ZDYC\t`LFoKn+"`Fgtb2#4mh+S'tcd'n`g$][s\,ArWaRq%V)<brm,ErjidV'CEb[*~>%AI9_PrivateDataEnd